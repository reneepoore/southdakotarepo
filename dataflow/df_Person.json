{
	"name": "df_Person",
	"properties": {
		"folder": {
			"name": "Dimensions"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "vwCodeTable",
						"type": "DatasetReference"
					},
					"name": "vwCodeTables"
				},
				{
					"dataset": {
						"referenceName": "Person",
						"type": "DatasetReference"
					},
					"name": "srcPerson"
				},
				{
					"dataset": {
						"referenceName": "AlternateName",
						"type": "DatasetReference"
					},
					"name": "srcAlternateName"
				},
				{
					"dataset": {
						"referenceName": "ConcernRole",
						"type": "DatasetReference"
					},
					"name": "srcConcernRole"
				},
				{
					"dataset": {
						"referenceName": "vwAddress",
						"type": "DatasetReference"
					},
					"name": "vwAddress"
				},
				{
					"dataset": {
						"referenceName": "vwPersonPhoneNumber",
						"type": "DatasetReference"
					},
					"name": "srcPersonPhoneNumber"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Dummy1",
						"type": "DatasetReference"
					},
					"name": "DummyFile"
				},
				{
					"dataset": {
						"referenceName": "DimensionTargetTesting",
						"type": "DatasetReference"
					},
					"name": "tgtDimPerson"
				}
			],
			"transformations": [
				{
					"name": "CaseObjective"
				},
				{
					"name": "CaseStatus"
				},
				{
					"name": "CasePriority"
				},
				{
					"name": "CaseOutcome"
				},
				{
					"name": "CaseClassification"
				},
				{
					"name": "CaseTypeCode"
				},
				{
					"name": "drvTrimColumns"
				},
				{
					"name": "SelectTrimColumns"
				},
				{
					"name": "JoinAlternateName"
				},
				{
					"name": "SelectAlterName"
				},
				{
					"name": "drvTrimAltColumns"
				},
				{
					"name": "SelectAlterNameColumns"
				},
				{
					"name": "JoinPersonPhoneNumber"
				},
				{
					"name": "JoinAddress"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          TABLENAME as string,",
				"          CODE as string,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> vwCodeTables",
				"source(output(",
				"          CONCERNROLEID as long,",
				"          PERSONBIRTHNAME as string,",
				"          DATEOFBIRTH as date,",
				"          DATEOFDEATH as date,",
				"          GENDER as string,",
				"          SPECIALINTERESTCODE as string,",
				"          LASTWRITTEN as timestamp,",
				"          UPPERPERSONBIRTHNAME as string,",
				"          UPPERMOTHERBIRTHSURNAME as string,",
				"          RACE as string,",
				"          INDIGENOUSGROUPCODE as string,",
				"          INDIGENOUSPERSONIND as string,",
				"          VERSIONNO as integer,",
				"          PRIMARYALTERNATENAMEID as long,",
				"          ETHNICORIGINCODE as string,",
				"          PAYMENTFREQUENCY as string,",
				"          NEXTPAYMENTDATE as date,",
				"          CURRENCYTYPE as string,",
				"          METHODOFPMTCODE as string,",
				"          DATEOFBIRTHVERIND as string,",
				"          DATEOFDEATHVERIND as string,",
				"          PRIMARYALTERNATEID as string,",
				"          COUNTRYOFBIRTH as string,",
				"          PLACEOFBIRTH as string,",
				"          PINNUMBER as string,",
				"          MARITALSTATUSCODE as string,",
				"          NATIONALITYCODE as string,",
				"          RESIDENCYABROADIND as string,",
				"          MOTHERBIRTHSURNAME as string,",
				"          COMMENTS as string,",
				"          TYPE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> srcPerson",
				"source(output(",
				"          ALTERNATENAMEID as long,",
				"          CONCERNROLEID as long,",
				"          TITLE as string,",
				"          FIRSTFORENAME as string,",
				"          OTHERFORENAME as string,",
				"          SURNAME as string,",
				"          UPPERFIRSTFORENAME as string,",
				"          UPPERSURNAME as string,",
				"          PHONETICENCODING as string,",
				"          VERSIONNO as integer,",
				"          LASTWRITTEN as timestamp,",
				"          NAMESUFFIX as string,",
				"          NAMETYPE as string,",
				"          NAMESTATUS as string,",
				"          FULLNAME as string,",
				"          COMMENTS as string,",
				"          INITIALS as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> srcAlternateName",
				"source(output(",
				"          CONCERNID as long,",
				"          CONCERNROLEID as long,",
				"          CONCERNROLETYPE as string,",
				"          CREATIONDATE as date,",
				"          REGISTRATIONDATE as date,",
				"          STARTDATE as date,",
				"          LASTWRITTEN as timestamp,",
				"          SENSITIVITY as string,",
				"          PREFCOMMMETHOD as string,",
				"          PREFCOMMFROMDATE as date,",
				"          PREFCOMMTODATE as date,",
				"          PRIMARYWEBADDRESSID as long,",
				"          VERSIONNO as integer,",
				"          PRIMARYPHONENUMBERID as long,",
				"          PRIMARYEMAILADDRESSID as long,",
				"          PRIMARYBANKACCOUNTID as long,",
				"          REGUSERNAME as string,",
				"          PREFPUBLICOFFICEID as long,",
				"          PREFERREDLANGUAGE as string,",
				"          ENDDATE as date,",
				"          STATUSCODE as string,",
				"          CONCERNROLENAME as string,",
				"          PRIMARYADDRESSID as long,",
				"          PRIMARYALTERNATEID as string,",
				"          COMMENTS as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> srcConcernRole",
				"source(output(",
				"          CONCERNROLEID as long,",
				"          PRIMARYADDRESSID as long,",
				"          ADDRESSID as long,",
				"          ADDRESS1 as string,",
				"          ADDRESS2 as string,",
				"          ADDRESS3 as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          USCOUNTY as string,",
				"          ZIP as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> vwAddress",
				"source(output(",
				"          CONCERNROLEID as long,",
				"          HOMEPHONE as string,",
				"          CELLPHONE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> srcPersonPhoneNumber",
				"vwCodeTables filter(TABLENAME=='CaseObjective') ~> CaseObjective",
				"vwCodeTables filter(TABLENAME=='CaseStatus') ~> CaseStatus",
				"vwCodeTables filter(TABLENAME=='CasePriority') ~> CasePriority",
				"vwCodeTables filter(TABLENAME=='CaseOutcome') ~> CaseOutcome",
				"vwCodeTables filter(TABLENAME=='CaseClassification') ~> CaseClassification",
				"vwCodeTables filter(TABLENAME=='CaseTypeCode') ~> CaseTypeCode",
				"srcPerson derive(each(match(type=='string'), $$+'_Trim' = trim($$))) ~> drvTrimColumns",
				"drvTrimColumns select(mapColumn(",
				"          CONCERNROLEID,",
				"          DATEOFBIRTH,",
				"          DATEOFDEATH,",
				"          LASTWRITTEN,",
				"          VERSIONNO,",
				"          PRIMARYALTERNATENAMEID,",
				"          NEXTPAYMENTDATE,",
				"          PERSONBIRTHNAME_Trim,",
				"          GENDER_Trim,",
				"          SPECIALINTERESTCODE_Trim,",
				"          UPPERPERSONBIRTHNAME_Trim,",
				"          UPPERMOTHERBIRTHSURNAME_Trim,",
				"          RACE_Trim,",
				"          INDIGENOUSGROUPCODE_Trim,",
				"          INDIGENOUSPERSONIND_Trim,",
				"          ETHNICORIGINCODE_Trim,",
				"          PAYMENTFREQUENCY_Trim,",
				"          CURRENCYTYPE_Trim,",
				"          METHODOFPMTCODE_Trim,",
				"          DATEOFBIRTHVERIND_Trim,",
				"          DATEOFDEATHVERIND_Trim,",
				"          PRIMARYALTERNATEID_Trim,",
				"          COUNTRYOFBIRTH_Trim,",
				"          PLACEOFBIRTH_Trim,",
				"          PINNUMBER_Trim,",
				"          MARITALSTATUSCODE_Trim,",
				"          NATIONALITYCODE_Trim,",
				"          RESIDENCYABROADIND_Trim,",
				"          MOTHERBIRTHSURNAME_Trim,",
				"          COMMENTS_Trim,",
				"          TYPE_Trim",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectTrimColumns",
				"SelectTrimColumns, SelectAlterNameColumns join(SelectTrimColumns@CONCERNROLEID == SelectAlterNameColumns@CONCERNROLEID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinAlternateName",
				"JoinAlternateName select(mapColumn(",
				"          CONCERNROLEID = SelectTrimColumns@CONCERNROLEID,",
				"          DATEOFBIRTH,",
				"          DATEOFDEATH,",
				"          LASTWRITTEN,",
				"          VERSIONNO,",
				"          PERSONBIRTHNAME_Trim,",
				"          GENDER_Trim,",
				"          UPPERMOTHERBIRTHSURNAME_Trim,",
				"          RACE_Trim,",
				"          INDIGENOUSGROUPCODE_Trim,",
				"          INDIGENOUSPERSONIND_Trim,",
				"          ETHNICORIGINCODE_Trim,",
				"          DATEOFBIRTHVERIND_Trim,",
				"          DATEOFDEATHVERIND_Trim,",
				"          PRIMARYALTERNATEID_Trim,",
				"          COUNTRYOFBIRTH_Trim,",
				"          PLACEOFBIRTH_Trim,",
				"          MARITALSTATUSCODE_Trim,",
				"          NATIONALITYCODE_Trim,",
				"          RESIDENCYABROADIND_Trim,",
				"          MOTHERBIRTHSURNAME_Trim,",
				"          COMMENTS_Trim,",
				"          TYPE_Trim,",
				"          ALTERNATENAMEID,",
				"          CONCERNROLEID = SelectAlterNameColumns@CONCERNROLEID,",
				"          FIRSTFORENAME_Trim,",
				"          OTHERFORENAME_Trim,",
				"          SURNAME_Trim",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectAlterName",
				"srcAlternateName derive(each(match(type=='string'), $$+'_Trim' = trim($$))) ~> drvTrimAltColumns",
				"drvTrimAltColumns select(mapColumn(",
				"          ALTERNATENAMEID,",
				"          CONCERNROLEID,",
				"          FIRSTFORENAME_Trim,",
				"          OTHERFORENAME_Trim,",
				"          SURNAME_Trim",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectAlterNameColumns",
				"SelectAlterName, srcPersonPhoneNumber join(SelectAlterName@CONCERNROLEID == srcPersonPhoneNumber@CONCERNROLEID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinPersonPhoneNumber",
				"JoinPersonPhoneNumber, vwAddress join(SelectAlterName@CONCERNROLEID == vwAddress@CONCERNROLEID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinAddress",
				"JoinAddress select(mapColumn(",
				"          CONCERNROLEID = SelectAlterName@CONCERNROLEID,",
				"          DATEOFBIRTH,",
				"          DATEOFDEATH,",
				"          LASTWRITTEN,",
				"          VERSIONNO,",
				"          PERSONBIRTHNAME_Trim,",
				"          GENDER_Trim,",
				"          UPPERMOTHERBIRTHSURNAME_Trim,",
				"          RACE_Trim,",
				"          INDIGENOUSGROUPCODE_Trim,",
				"          INDIGENOUSPERSONIND_Trim,",
				"          ETHNICORIGINCODE_Trim,",
				"          DATEOFBIRTHVERIND_Trim,",
				"          DATEOFDEATHVERIND_Trim,",
				"          PRIMARYALTERNATEID_Trim,",
				"          COUNTRYOFBIRTH_Trim,",
				"          PLACEOFBIRTH_Trim,",
				"          MARITALSTATUSCODE_Trim,",
				"          NATIONALITYCODE_Trim,",
				"          RESIDENCYABROADIND_Trim,",
				"          MOTHERBIRTHSURNAME_Trim,",
				"          COMMENTS_Trim,",
				"          TYPE_Trim,",
				"          ALTERNATENAMEID,",
				"          FIRSTFORENAME_Trim,",
				"          OTHERFORENAME_Trim,",
				"          SURNAME_Trim,",
				"          CONCERNROLEID = srcPersonPhoneNumber@CONCERNROLEID,",
				"          HOMEPHONE,",
				"          CELLPHONE,",
				"          CONCERNROLEID = vwAddress@CONCERNROLEID,",
				"          PRIMARYADDRESSID,",
				"          ADDRESSID,",
				"          ADDRESS1,",
				"          ADDRESS2,",
				"          ADDRESS3,",
				"          CITY,",
				"          STATE,",
				"          USCOUNTY,",
				"          ZIP",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"CaseObjective sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string",
				"     ),",
				"     partitionFileNames:['CaseHeaderPOC'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DummyFile",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> tgtDimPerson"
			]
		}
	}
}