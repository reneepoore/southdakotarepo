{
	"name": "df_DimApplication",
	"properties": {
		"description": "This is not complete. Need Program Status to continue\n",
		"folder": {
			"name": "Dimensions/UnderConstruction"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CodeTables",
						"type": "DatasetReference"
					},
					"name": "vwCodeTables"
				},
				{
					"dataset": {
						"referenceName": "Application",
						"type": "DatasetReference"
					},
					"name": "srcApplication"
				},
				{
					"dataset": {
						"referenceName": "vwProgramStatus",
						"type": "DatasetReference"
					},
					"name": "vwProgramStatus"
				},
				{
					"dataset": {
						"referenceName": "CaseHeader",
						"type": "DatasetReference"
					},
					"name": "srcCaseHeader"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DimensionTargetTesting",
						"type": "DatasetReference"
					},
					"name": "tgtDimApplication"
				}
			],
			"transformations": [
				{
					"name": "RecordStatus"
				},
				{
					"name": "ApplicationMethod"
				},
				{
					"name": "ApplicationType"
				},
				{
					"name": "SelectTrim"
				},
				{
					"name": "drvTrimColumns"
				},
				{
					"name": "LookupAppType"
				},
				{
					"name": "SelectAppType"
				},
				{
					"name": "LookAppMethod"
				},
				{
					"name": "SelectAppMethod"
				},
				{
					"name": "LookupAppStatus"
				},
				{
					"name": "SelectAppStatus"
				},
				{
					"name": "LookupProgramStatus"
				},
				{
					"name": "SelectProgramStatus"
				},
				{
					"name": "LookupCaseRefNumbr"
				},
				{
					"name": "drvCaseRef"
				},
				{
					"name": "SelectCaseColumns"
				},
				{
					"name": "SelectCase"
				}
			],
			"scriptLines": [
				"source(output(",
				"          TABLENAME as string,",
				"          CODE as string,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> vwCodeTables",
				"source(output(",
				"          APPLICATIONID as long,",
				"          SUBMITTEDDATETIME as timestamp,",
				"          FILINGDATE as date,",
				"          REFERENCE as string,",
				"          APPLICATIONMETHOD as string,",
				"          ROOTENTITYID as long,",
				"          ASSIGNEE as string,",
				"          VERSIONNO as integer,",
				"          LASTWRITTEN as timestamp,",
				"          CURRENTAPPLICATIONSTATUSID as long,",
				"          PDFID as long,",
				"          CASEID as long,",
				"          REFERENCEADDENDUM as string,",
				"          IEGEXECUTIONID as long,",
				"          RECORDSTATUS as string,",
				"          SCHEMANAME as string,",
				"          INTERPRETERREQIND as string,",
				"          INTERPRETERLANGUAGECODE as string,",
				"          SPECIALASSISTANCEIND as string,",
				"          SPECIALASSISTANCEREQUIREMENTS as string,",
				"          APPLICATIONTYPE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> srcApplication",
				"source(output(",
				"          APPLICATIONID as long,",
				"          REFERENCE as string,",
				"          PROGRAMAPPLICATIONID as long,",
				"          STATUS as string,",
				"          DESCRIPTION as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> vwProgramStatus",
				"source(output(",
				"          APPEALINDICATOR as string,",
				"          CASEID as long,",
				"          INTEGRATEDCASEID as long,",
				"          CASEREFERENCE as string,",
				"          CASETYPECODE as string,",
				"          CLASSIFICATIONCODE as string,",
				"          EXPECTEDOUTCOME as long,",
				"          ACTUALOUTCOME as string,",
				"          OWNERORGOBJECTLINKID as long,",
				"          VERSIONNO as integer,",
				"          LASTWRITTEN as timestamp,",
				"          INTEGRATEDCASETYPE as string,",
				"          OBJECTIVECODE as string,",
				"          OUTCOMECODE as string,",
				"          PLANID as long,",
				"          PRIORITYCODE as string,",
				"          RECEIVEDDATE as date,",
				"          EFFECTIVEDATE as date,",
				"          STATUSCODE as string,",
				"          ENDDATE as date,",
				"          EXPECTEDENDDATE as date,",
				"          EXPECTEDSTARTDATE as date,",
				"          FIRSTREVIEWDATE as date,",
				"          COMMENTS as string,",
				"          CONCERNROLEID as long,",
				"          REGISTRATIONDATE as date,",
				"          STARTDATE as date,",
				"          DEFAULTCURRENCYTYPECODE as string,",
				"          DEFAULTDELIVERYMETHODTYPE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> srcCaseHeader",
				"vwCodeTables filter(TABLENAME=='RecordStatus') ~> RecordStatus",
				"vwCodeTables filter(TABLENAME=='ApplicationMethod') ~> ApplicationMethod",
				"vwCodeTables filter(TABLENAME== 'ApplicationType') ~> ApplicationType",
				"drvTrimColumns select(mapColumn(",
				"          APPLICATIONID,",
				"          SUBMITTEDDATETIME,",
				"          FILINGDATE,",
				"          CURRENTAPPLICATIONSTATUSID,",
				"          CASEID,",
				"          RECORDSTATUS,",
				"          APPLICATIONTYPE,",
				"          REFERENCE_Trim,",
				"          APPLICATIONMETHOD_Trim,",
				"          ASSIGNEE_Trim,",
				"          RECORDSTATUS_Trim,",
				"          APPLICATIONTYPE_Trim",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectTrim",
				"srcApplication derive(each(match(type=='string'), $$+'_Trim' = trim($$))) ~> drvTrimColumns",
				"SelectTrim, ApplicationType lookup(APPLICATIONTYPE_Trim == CODE,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupAppType",
				"LookupAppType select(mapColumn(",
				"          APPLICATIONID,",
				"          SUBMITTEDDATETIME,",
				"          FILINGDATE,",
				"          CURRENTAPPLICATIONSTATUSID,",
				"          CASEID,",
				"          RECORDSTATUS,",
				"          APPLICATIONTYPE,",
				"          REFERENCE_Trim,",
				"          APPLICATIONMETHOD_Trim,",
				"          ASSIGNEE_Trim,",
				"          RECORDSTATUS_Trim,",
				"          APPLICATIONTYPE_Trim,",
				"          ApplicationType = DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectAppType",
				"SelectAppType, ApplicationMethod lookup(APPLICATIONMETHOD_Trim == CODE,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookAppMethod",
				"LookAppMethod select(mapColumn(",
				"          APPLICATIONID,",
				"          SUBMITTEDDATETIME,",
				"          FILINGDATE,",
				"          CURRENTAPPLICATIONSTATUSID,",
				"          CASEID,",
				"          RECORDSTATUS,",
				"          APPLICATIONTYPE = SelectAppType@APPLICATIONTYPE,",
				"          REFERENCE_Trim,",
				"          ASSIGNEE_Trim,",
				"          RECORDSTATUS_Trim,",
				"          APPLICATIONTYPE_Trim,",
				"          ApplicationType = SelectAppType@ApplicationType,",
				"          ApplicationMethod = DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectAppMethod",
				"SelectAppMethod, RecordStatus lookup(RECORDSTATUS_Trim == CODE,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupAppStatus",
				"LookupAppStatus select(mapColumn(",
				"          APPLICATIONID,",
				"          SUBMITTEDDATETIME,",
				"          FILINGDATE,",
				"          CURRENTAPPLICATIONSTATUSID,",
				"          CASEID,",
				"          RECORDSTATUS,",
				"          REFERENCE_Trim,",
				"          ASSIGNEE_Trim,",
				"          ApplicationType = SelectAppMethod@ApplicationType,",
				"          ApplicationCurrentStatus = DESCRIPTION,",
				"          ApplicationMethod",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectAppStatus",
				"SelectAppStatus, vwProgramStatus lookup(SelectAppStatus@APPLICATIONID == vwProgramStatus@APPLICATIONID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupProgramStatus",
				"LookupProgramStatus select(mapColumn(",
				"          ApplicationID = SelectAppStatus@APPLICATIONID,",
				"          ApplicationSubmittedDate = SUBMITTEDDATETIME,",
				"          ApplicationFilingDate = FILINGDATE,",
				"          CaseID = CASEID,",
				"          ApplicationType,",
				"          ApplicationCurrentStatus,",
				"          ApplicationMethod,",
				"          ApplicationProgramStatus = DESCRIPTION",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectProgramStatus",
				"SelectProgramStatus, SelectCase lookup(SelectProgramStatus@CaseID == SelectCase@CaseID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupCaseRefNumbr",
				"srcCaseHeader derive(CASEREFERENCE = trim(CASEREFERENCE)) ~> drvCaseRef",
				"LookupCaseRefNumbr select(mapColumn(",
				"          ApplicationID,",
				"          ApplicationSubmittedDate,",
				"          ApplicationFilingDate,",
				"          CaseID = SelectProgramStatus@CaseID,",
				"          ApplicationType,",
				"          ApplicationCurrentStatus,",
				"          ApplicationMethod,",
				"          ApplicationProgramStatus,",
				"          ApplicationCaseNumber = ApplicationCaseReferenceNumber",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCaseColumns",
				"drvCaseRef select(mapColumn(",
				"          CaseID = CASEID,",
				"          ApplicationCaseReferenceNumber = CASEREFERENCE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCase",
				"SelectCaseColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string",
				"     ),",
				"     partitionFileNames:['DimApplication'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> tgtDimApplication"
			]
		}
	}
}