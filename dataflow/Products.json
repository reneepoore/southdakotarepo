{
	"name": "Products",
	"properties": {
		"folder": {
			"name": "Demos"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"name": "SQLProducts"
				},
				{
					"name": "DimProd"
				}
			],
			"sinks": [
				{
					"name": "loadADW"
				}
			],
			"transformations": [
				{
					"name": "LookupKeys"
				},
				{
					"name": "ColumnSelection"
				},
				{
					"name": "NewRowOrExistingMember"
				},
				{
					"name": "SurrogateKey1"
				},
				{
					"name": "SetAttributes"
				},
				{
					"name": "Filter1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ProductID as integer,",
				"          Name as string,",
				"          ProductNumber as string,",
				"          Color as string,",
				"          StandardCost as decimal(19,4),",
				"          ListPrice as decimal(19,4),",
				"          Size as string,",
				"          Weight as decimal(8,2),",
				"          ProductCategoryID as integer,",
				"          ProductModelID as integer,",
				"          SellStartDate as timestamp,",
				"          SellEndDate as timestamp,",
				"          DiscontinuedDate as timestamp,",
				"          ThumbnailPhotoFileName as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false) ~> SQLProducts",
				"source(output(",
				"          ProductKey as integer,",
				"          ProductAlternateKey as string,",
				"          ProductSubcategoryKey as integer,",
				"          WeightUnitMeasureCode as string,",
				"          SizeUnitMeasureCode as string,",
				"          EnglishProductName as string,",
				"          SpanishProductName as string,",
				"          FrenchProductName as string,",
				"          StandardCost as decimal(19,4),",
				"          FinishedGoodsFlag as boolean,",
				"          Color as string,",
				"          SafetyStockLevel as integer,",
				"          ReorderPoint as integer,",
				"          ListPrice as decimal(19,4),",
				"          Size as string,",
				"          SizeRange as string,",
				"          Weight as double,",
				"          DaysToManufacture as integer,",
				"          ProductLine as string,",
				"          DealerPrice as decimal(19,4),",
				"          Class as string,",
				"          Style as string,",
				"          ModelName as string,",
				"          EnglishDescription as string,",
				"          FrenchDescription as string,",
				"          ChineseDescription as string,",
				"          ArabicDescription as string,",
				"          HebrewDescription as string,",
				"          ThaiDescription as string,",
				"          GermanDescription as string,",
				"          JapaneseDescription as string,",
				"          TurkishDescription as string,",
				"          StartDate as timestamp,",
				"          EndDate as timestamp,",
				"          Status as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false) ~> DimProd",
				"Filter1, DimProd lookup(ProductID == ProductKey,",
				"     multiple: true,",
				"     broadcast: 'auto')~> LookupKeys",
				"LookupKeys select(mapColumn(",
				"          ProductID,",
				"          Name,",
				"          ProductNumber,",
				"          Color = SQLProducts@Color,",
				"          StandardCost = SQLProducts@StandardCost,",
				"          ListPrice = SQLProducts@ListPrice,",
				"          Size = SQLProducts@Size,",
				"          Weight = SQLProducts@Weight,",
				"          ProductKey,",
				"          ProductAlternateKey,",
				"          ProductSubcategoryKey,",
				"          WeightUnitMeasureCode,",
				"          SizeUnitMeasureCode,",
				"          EnglishProductName,",
				"          SafetyStockLevel,",
				"          ReorderPoint,",
				"          SizeRange,",
				"          DaysToManufacture,",
				"          ProductLine,",
				"          DealerPrice,",
				"          Class,",
				"          Style,",
				"          ModelName,",
				"          EnglishDescription,",
				"          StartDate,",
				"          EndDate,",
				"          Status",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> ColumnSelection",
				"ColumnSelection split(isNull(ProductAlternateKey),",
				"     disjoint: false) ~> NewRowOrExistingMember@(NewRow, ExistingMember)",
				"NewRowOrExistingMember@NewRow keyGenerate(output(surrogatekey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> SurrogateKey1",
				"SurrogateKey1 derive(surrogatekey = crc32(surrogatekey)) ~> SetAttributes",
				"SQLProducts filter(regexMatch(Name,'^s')) ~> Filter1",
				"SetAttributes sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     mapColumn(",
				"          ProductKey,",
				"          ProductAlternateKey,",
				"          ProductSubcategoryKey,",
				"          WeightUnitMeasureCode,",
				"          SizeUnitMeasureCode,",
				"          EnglishProductName,",
				"          StandardCost,",
				"          Color,",
				"          SafetyStockLevel,",
				"          ReorderPoint,",
				"          ListPrice,",
				"          Size,",
				"          SizeRange,",
				"          Weight,",
				"          DaysToManufacture,",
				"          ProductLine,",
				"          DealerPrice,",
				"          Class,",
				"          Style,",
				"          ModelName,",
				"          EnglishDescription,",
				"          StartDate,",
				"          EndDate,",
				"          Status",
				"     ),",
				"     format: 'table') ~> loadADW"
			]
		}
	}
}