{
	"name": "df_DimEmployer",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Employer",
						"type": "DatasetReference"
					},
					"name": "srcEmployer"
				},
				{
					"dataset": {
						"referenceName": "ConcernRole",
						"type": "DatasetReference"
					},
					"name": "srcConcernRole"
				},
				{
					"dataset": {
						"referenceName": "Address",
						"type": "DatasetReference"
					},
					"name": "srcAddress"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DimensionTargetTesting",
						"type": "DatasetReference"
					},
					"name": "tgtDimEmployer"
				}
			],
			"transformations": [
				{
					"name": "SelectSourceColumns"
				},
				{
					"name": "LookupPrimaryAddressID"
				},
				{
					"name": "SelectPrimaryAddressID"
				},
				{
					"name": "LookupAddress"
				},
				{
					"name": "SelectAddress"
				},
				{
					"name": "drvTrimColumns"
				},
				{
					"name": "drvNullsDate"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CONCERNROLEID as long,",
				"          REGISTEREDNAME as string,",
				"          TRADINGNAME as string,",
				"          INDUSTRYTYPE as string,",
				"          COMPANYTYPE as string,",
				"          BUSINESSDESC as string,",
				"          UPPERTRADINGNAME as string,",
				"          UPPERREGISTEREDNAME as string,",
				"          VERSIONNO as integer,",
				"          LASTWRITTEN as timestamp,",
				"          NUMBERCASUALSTAFF as integer,",
				"          PINNUMBER as string,",
				"          PAYMENTFREQUENCY as string,",
				"          NEXTPAYMENTDATE as date,",
				"          CURRENCYTYPE as string,",
				"          METHODOFPMTCODE as string,",
				"          SPECIALINTERESTCODE as string,",
				"          EXEMPTIONIND as string,",
				"          STATUSCODE as string,",
				"          COMMENTS as string,",
				"          PRIMARYALTERNATEID as string,",
				"          NUMBERPERMANENTSTAFF as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> srcEmployer",
				"source(output(",
				"          CONCERNID as long,",
				"          CONCERNROLEID as long,",
				"          CONCERNROLETYPE as string,",
				"          CREATIONDATE as date,",
				"          REGISTRATIONDATE as date,",
				"          STARTDATE as date,",
				"          LASTWRITTEN as timestamp,",
				"          SENSITIVITY as string,",
				"          PREFCOMMMETHOD as string,",
				"          PREFCOMMFROMDATE as date,",
				"          PREFCOMMTODATE as date,",
				"          PRIMARYWEBADDRESSID as long,",
				"          VERSIONNO as integer,",
				"          PRIMARYPHONENUMBERID as long,",
				"          PRIMARYEMAILADDRESSID as long,",
				"          PRIMARYBANKACCOUNTID as long,",
				"          REGUSERNAME as string,",
				"          PREFPUBLICOFFICEID as long,",
				"          PREFERREDLANGUAGE as string,",
				"          ENDDATE as date,",
				"          STATUSCODE as string,",
				"          CONCERNROLENAME as string,",
				"          PRIMARYADDRESSID as long,",
				"          PRIMARYALTERNATEID as string,",
				"          COMMENTS as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> srcConcernRole",
				"source(output(",
				"          ADDRESSID as long,",
				"          ADDRESS1 as string,",
				"          ADDRESS2 as string,",
				"          ADDRESS3 as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          USCOUNTY as string,",
				"          ZIP as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> srcAddress",
				"srcEmployer select(mapColumn(",
				"          CONCERNROLEID,",
				"          COMPANYTYPE,",
				"          BUSINESSDESC,",
				"          UPPERREGISTEREDNAME,",
				"          PRIMARYALTERNATEID,",
				"          NUMBERPERMANENTSTAFF,",
				"          REGISTEREDNAME",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectSourceColumns",
				"SelectSourceColumns, srcConcernRole lookup(SelectSourceColumns@CONCERNROLEID == srcConcernRole@CONCERNROLEID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupPrimaryAddressID",
				"LookupPrimaryAddressID select(mapColumn(",
				"          CONCERNROLEID = SelectSourceColumns@CONCERNROLEID,",
				"          COMPANYTYPE,",
				"          BUSINESSDESC,",
				"          UPPERREGISTEREDNAME,",
				"          PRIMARYADDRESSID,",
				"          REGISTEREDNAME",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectPrimaryAddressID",
				"SelectPrimaryAddressID, srcAddress lookup(PRIMARYADDRESSID == ADDRESSID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupAddress",
				"LookupAddress select(mapColumn(",
				"          CONCERNROLEID,",
				"          COMPANYTYPE,",
				"          BUSINESSDESC,",
				"          REGISTEREDNAME,",
				"          UPPERREGISTEREDNAME,",
				"          ADDRESS1,",
				"          ADDRESS2,",
				"          ADDRESS3,",
				"          CITY,",
				"          STATE,",
				"          USCOUNTY,",
				"          ZIP",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectAddress",
				"SelectAddress derive(each(match(type=='string'), $$+'_Trim' = trim($$))) ~> drvTrimColumns",
				"drvTrimColumns derive(each(match(type=='string'), $$+'_null' = iifNull($$,'NA' )),",
				"          {Modified Date} = currentUTC()) ~> drvNullsDate",
				"drvNullsDate select(mapColumn(",
				"          CONCERNROLEID,",
				"          REGISTEREDNAME = REGISTEREDNAME_Trim_null,",
				"          ADDRESS1 = ADDRESS1_Trim_null,",
				"          ADDRESS2 = ADDRESS2_Trim_null,",
				"          ADDRESS3 = ADDRESS3_Trim_null,",
				"          CITY = CITY_Trim_null,",
				"          STATE = STATE_Trim_null,",
				"          USCOUNTY = USCOUNTY_Trim_null,",
				"          ZIP = ZIP_Trim_null",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string",
				"     ),",
				"     partitionFileNames:['DimEmployer'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> tgtDimEmployer"
			]
		}
	}
}