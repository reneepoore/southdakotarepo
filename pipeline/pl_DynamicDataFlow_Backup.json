{
	"name": "pl_DynamicDataFlow_Backup",
	"properties": {
		"activities": [
			{
				"name": "LkupTableNames",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.00:15:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "\n/*\n********************************************************************************************************\nThe first sql select will get the table names.\nthe second sql will get the max ordinal. This is to check if there are multiple columns that make up\na unique row. In the case of CODETABLEITEM there are 3. I only want to process on row. If there is\none row the column is use in as the Key Identifier in the data flow.\nIf the Ordinal Position is greater than 1 it is the CODETABLEITEM. Then that data is processed \ndifferently in the data flow via Conditional split.\nThe third sql gets the columns used in the Primary Key\n\nCode by: Renee Poore\n  \n\n*******************************************************************************************************\n*/\n\nSELECT tblinfo.TABLE_NAME,\n       tblinfo.TABLE_SCHEMA,\n       ISNULL(tblid.COLUMN_NAME, 'NA') UNIQUE_ID,\n       mop.ORDINAL_POSITION\nFROM   (SELECT TABLE_NAME,\n               TABLE_SCHEMA\n        FROM   INFORMATION_SCHEMA.TABLES\n        WHERE\n         TABLE_TYPE = 'BASE TABLE'\n         AND TABLE_SCHEMA = 'CURAPD01') tblinfo\n       LEFT OUTER JOIN (SELECT TABLE_NAME,\n                               MAX(ORDINAL_POSITION) AS ORDINAL_POSITION\n                        FROM   INFORMATION_SCHEMA.KEY_COLUMN_USAGE\n                        WHERE\n                         OBJECTPROPERTY(OBJECT_ID(CONSTRAINT_SCHEMA + '.'\n                                                  + QUOTENAME(CONSTRAINT_NAME)), 'IsPrimaryKey') = 1\n                        GROUP  BY TABLE_NAME) mop\n                    ON tblinfo.TABLE_NAME = mop.TABLE_NAME\n\n       INNER JOIN (SELECT DISTINCT TABLE_NAME,\n                                   COLUMN_NAME,\n                                   ORDINAL_POSITION\n                   FROM   INFORMATION_SCHEMA.KEY_COLUMN_USAGE\n                   WHERE\n                    OBJECTPROPERTY(OBJECT_ID(CONSTRAINT_SCHEMA + '.'\n                                             + QUOTENAME(CONSTRAINT_NAME)), 'IsPrimaryKey') = 1) tblid\n               ON mop.TABLE_NAME = tblid.TABLE_NAME\n                  AND mop.ORDINAL_POSITION = tblid.ORDINAL_POSITION ",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ds_AllTableNames",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "GetEachTableName",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "LkupTableNames",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('LkupTableNames').output.value\n\n",
						"type": "Expression"
					},
					"batchCount": 4,
					"activities": [
						{
							"name": "df_RptToStage_copy1",
							"type": "ExecuteDataFlow",
							"dependsOn": [],
							"policy": {
								"timeout": "0.00:15:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataflow": {
									"referenceName": "df_RptToStage_copy1",
									"type": "DataFlowReference",
									"parameters": {
										"TableName": {
											"value": "'@{item().table_name}'",
											"type": "Expression"
										},
										"SchemaName": {
											"value": "'@{item().TABLE_SCHEMA}'",
											"type": "Expression"
										},
										"UniqueID": {
											"value": "'@{item().unique_id}'",
											"type": "Expression"
										}
									},
									"datasetParameters": {
										"RptDB": {
											"Schema": {
												"value": "@item().table_schema",
												"type": "Expression"
											},
											"TableName": {
												"value": "@item().table_name",
												"type": "Expression"
											}
										},
										"StgDB": {
											"Schema": {
												"value": "STG",
												"type": "Expression"
											},
											"TableName": {
												"value": "@item().table_name",
												"type": "Expression"
											}
										}
									}
								},
								"compute": {
									"coreCount": 8,
									"computeType": "General"
								},
								"traceLevel": "Fine"
							}
						}
					]
				}
			}
		],
		"folder": {
			"name": "Testing"
		},
		"annotations": []
	}
}