{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "RP-SouthDakota-POC"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/stgSourceEmployee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdventureWorksDW",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Testing"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleName",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "HireDate",
						"type": "date"
					},
					{
						"name": "BirthDate",
						"type": "date"
					},
					{
						"name": "Phone",
						"type": "nvarchar"
					},
					{
						"name": "MaritalStatus",
						"type": "nchar"
					},
					{
						"name": "EmergencyContactName",
						"type": "nvarchar"
					},
					{
						"name": "EmergencyContactPhone",
						"type": "nvarchar"
					},
					{
						"name": "SalariedFlag",
						"type": "bit"
					},
					{
						"name": "Gender",
						"type": "nchar"
					},
					{
						"name": "DepartmentName",
						"type": "nvarchar"
					},
					{
						"name": "StartDate",
						"type": "date"
					},
					{
						"name": "EndDate",
						"type": "date"
					},
					{
						"name": "Status",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "stgSourceEmployee"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/targetSalesOrderHeader')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdventureWorksLT2019",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Fact"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Status",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "SalesOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "PurchaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "AccountNumber",
						"type": "nvarchar"
					},
					{
						"name": "CustomerDescription",
						"type": "nvarchar"
					},
					{
						"name": "ShipToAddressDescription",
						"type": "nvarchar"
					},
					{
						"name": "BillToAddressDesciption",
						"type": "nvarchar"
					},
					{
						"name": "ShipMethod",
						"type": "nvarchar"
					},
					{
						"name": "SubTotal",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TaxAmt",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Freight",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalDue",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "target_SalesOrderHeader"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/target_SalesOrderHeader')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdventureWorksLT2019",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Testing"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Status",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "SalesOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "PurchaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "AccountNumber",
						"type": "nvarchar"
					},
					{
						"name": "CustomerDescription",
						"type": "nvarchar"
					},
					{
						"name": "ShipToAddressDescription",
						"type": "nvarchar"
					},
					{
						"name": "BillToAddressDesciption",
						"type": "nvarchar"
					},
					{
						"name": "ShipMethod",
						"type": "nvarchar"
					},
					{
						"name": "SubTotal",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TaxAmt",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Freight",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalDue",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CreatedDate",
						"type": "smalldatetime",
						"precision": 16,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "target_SalesOrderHeader"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/target_SalesOrderHeader_wDate')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdventureWorksLT2019",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Testing"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Status",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "SalesOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "PurchaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "AccountNumber",
						"type": "nvarchar"
					},
					{
						"name": "CustomerDescription",
						"type": "nvarchar"
					},
					{
						"name": "ShipToAddressDescription",
						"type": "nvarchar"
					},
					{
						"name": "BillToAddressDesciption",
						"type": "nvarchar"
					},
					{
						"name": "ShipMethod",
						"type": "nvarchar"
					},
					{
						"name": "SubTotal",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TaxAmt",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Freight",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalDue",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CreatedDate",
						"type": "smalldatetime",
						"precision": 16,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "target_SalesOrderHeader_wDate"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgtDimEmployee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdventureWorksDW",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Testing"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "tgtDimEmployee"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/vwAddress')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CURAPD01",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Curam/Views"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ADDRESSID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "ADDRESS1",
						"type": "varchar"
					},
					{
						"name": "ADDRESS2",
						"type": "varchar"
					},
					{
						"name": "ADDRESS3",
						"type": "varchar"
					},
					{
						"name": "CITY",
						"type": "varchar"
					},
					{
						"name": "STATE",
						"type": "varchar"
					},
					{
						"name": "USCOUNTY",
						"type": "varchar"
					},
					{
						"name": "ZIP",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vw_Address"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/vwCodeTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CURAPD01",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Curam/Views"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TABLENAME",
						"type": "varchar"
					},
					{
						"name": "CODE",
						"type": "varchar"
					},
					{
						"name": "DESCRIPTION",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vw_CODETABLES"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/vwPersonPhoneNumber')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CURAPD01",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Curam/Views"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CONCERNROLEID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "HOMEPHONE",
						"type": "varchar"
					},
					{
						"name": "CELLPHONE",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vw_PersonPhoneNumber"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/vwProgramStatus')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CURAPD01",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Curam/Views"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "APPLICATIONID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "REFERENCE",
						"type": "char"
					},
					{
						"name": "PROGRAMAPPLICATIONID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "STATUS",
						"type": "char"
					},
					{
						"name": "DESCRIPTION",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vw_ProgramStatus"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/vwServiceSupplier')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CURAPD01",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Curam/Views"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ConcernRoleID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "SERVICESUPPLIERNAME",
						"type": "varchar"
					},
					{
						"name": "SERVICESUPPLIERSTATUSCODE",
						"type": "varchar"
					},
					{
						"name": "SERVICESUPPLIERCREATIONDATE",
						"type": "smalldatetime",
						"precision": 16,
						"scale": 0
					},
					{
						"name": "SERVICETYPECODE",
						"type": "varchar"
					},
					{
						"name": "SERVICESTATUSCODE",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "vw_ServiceSupplier"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Benefit')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Benefit Dimension\n",
				"folder": {
					"name": "Dimensions"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "vwCodeTable",
								"type": "DatasetReference"
							},
							"name": "vwCodeTables"
						},
						{
							"dataset": {
								"referenceName": "Benefit",
								"type": "DatasetReference"
							},
							"name": "srcBenefit"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimensionTargetTesting",
								"type": "DatasetReference"
							},
							"name": "tgtDimBenefit"
						}
					],
					"transformations": [
						{
							"name": "BenMethodOfDelivery"
						},
						{
							"name": "FrequencyCode"
						},
						{
							"name": "StateCodes"
						},
						{
							"name": "BenefitType"
						},
						{
							"name": "select1"
						},
						{
							"name": "drvTrimColumns"
						},
						{
							"name": "SelectTrimColumns"
						},
						{
							"name": "LookupBenefitType"
						},
						{
							"name": "SelectBenefitType"
						},
						{
							"name": "LookupStateCodes"
						},
						{
							"name": "SelectStateCode"
						},
						{
							"name": "LookupFrequency"
						},
						{
							"name": "SelectFrequency"
						},
						{
							"name": "LookupBenMethDelivery"
						},
						{
							"name": "SelectBenMethDelivery"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "SelectTgtColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TABLENAME as string,",
						"          CODE as string,",
						"          DESCRIPTION as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> vwCodeTables",
						"source(output(",
						"          EVIDENCEID as long,",
						"          CASEPARTICIPANTROLEID as long,",
						"          CASENUMBER as string,",
						"          DELIVERYTYPE as string,",
						"          STARTDATE as timestamp,",
						"          ENDDATE as timestamp,",
						"          BENEFITTYPE as string,",
						"          INDIANCOUNTRYIND as string,",
						"          AMOUNT as decimal(18,0),",
						"          FREQUENCYCODE as string,",
						"          BENEFITUSAGE as string,",
						"          LASTPAYMENTDATE as timestamp,",
						"          PUBLICOFFICEID as long,",
						"          PAYDAY as string,",
						"          DEDUCTIONAMOUNT as decimal(18,0),",
						"          AIDMOBILITYIND as string,",
						"          AIDPERSONALCAREIND as string,",
						"          COMMENTS as string,",
						"          STATE as string,",
						"          APPLICATIONDATE as timestamp,",
						"          RATEPAYABLE as decimal(18,0),",
						"          DEDUCTIONTYPE as string,",
						"          ENDREASON as string,",
						"          SDSERVICESUPPLIERCONCERNROLEID as long,",
						"          SDCALCULATIONRESULTSDTLSID as long,",
						"          SDCALCULATIONRULE as string,",
						"          SDCONTRACTAMOUNT as decimal(18,0),",
						"          SDEDITABLEATTRIBUTESIND as string,",
						"          SDNUMBEROFMONTHS as integer,",
						"          SDROOTENTITYID as long,",
						"          SDPLANNUMBER as string,",
						"          SDCOMPANYNAME as string,",
						"          SDCLAIMACCOUNTNUMBER as string,",
						"          SDINCOMEPROVIDEDBYSDX as string,",
						"          VERSIONNO as integer,",
						"          LASTWRITTEN as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcBenefit",
						"vwCodeTables filter(TABLENAME== 'BenMethodOfDelivery') ~> BenMethodOfDelivery",
						"vwCodeTables filter(TABLENAME=='FrequencyCode') ~> FrequencyCode",
						"vwCodeTables filter(TABLENAME== 'StateCodes') ~> StateCodes",
						"vwCodeTables filter(TABLENAME == 'BenefitType') ~> BenefitType",
						"srcBenefit select(mapColumn(",
						"          EVIDENCEID,",
						"          DELIVERYTYPE,",
						"          STARTDATE,",
						"          ENDDATE,",
						"          BENEFITTYPE,",
						"          AMOUNT,",
						"          FREQUENCYCODE,",
						"          STATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(each(match(type=='string'), $$+'_Trim' = trim($$))) ~> drvTrimColumns",
						"drvTrimColumns select(mapColumn(",
						"          EVIDENCEID,",
						"          STARTDATE,",
						"          ENDDATE,",
						"          AMOUNT,",
						"          DELIVERYTYPE_Trim,",
						"          BENEFITTYPE_Trim,",
						"          FREQUENCYCODE_Trim,",
						"          STATE_Trim",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTrimColumns",
						"SelectTrimColumns, BenefitType lookup(BENEFITTYPE_Trim == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupBenefitType",
						"LookupBenefitType select(mapColumn(",
						"          EVIDENCEID,",
						"          STARTDATE,",
						"          ENDDATE,",
						"          AMOUNT,",
						"          DELIVERYTYPE_Trim,",
						"          FREQUENCYCODE_Trim,",
						"          STATE_Trim,",
						"          BenefitType = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectBenefitType",
						"SelectBenefitType, StateCodes lookup(STATE_Trim == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupStateCodes",
						"LookupStateCodes select(mapColumn(",
						"          EVIDENCEID,",
						"          STARTDATE,",
						"          ENDDATE,",
						"          AMOUNT,",
						"          DELIVERYTYPE_Trim,",
						"          FREQUENCYCODE_Trim,",
						"          BenefitType,",
						"          BenefitState = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectStateCode",
						"SelectStateCode, FrequencyCode lookup(FREQUENCYCODE_Trim == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupFrequency",
						"LookupFrequency select(mapColumn(",
						"          EVIDENCEID,",
						"          STARTDATE,",
						"          ENDDATE,",
						"          AMOUNT,",
						"          DELIVERYTYPE_Trim,",
						"          BenefitType,",
						"          BenefitState,",
						"          BenefitFrequency = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFrequency",
						"SelectFrequency, BenMethodOfDelivery lookup(DELIVERYTYPE_Trim == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupBenMethDelivery",
						"LookupBenMethDelivery select(mapColumn(",
						"          EVIDENCEID,",
						"          STARTDATE,",
						"          ENDDATE,",
						"          AMOUNT,",
						"          BenefitType,",
						"          BenefitState,",
						"          BenefitFrequency,",
						"          BenefitDeliveryType = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectBenMethDelivery",
						"SelectBenMethDelivery derive(ModifiedDate = currentUTC(),",
						"          each(match(type=='string'), $$+'_null' = iifNull($$,'NA'))) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          EvidenceID = EVIDENCEID,",
						"          BenefitStartDate = STARTDATE,",
						"          BenefitEndDate = ENDDATE,",
						"          BenefitAmount = AMOUNT,",
						"          ModifiedDate,",
						"          BenefitType = BenefitType_null,",
						"          BenefitState = BenefitState_null,",
						"          BenefitFrequency = BenefitFrequency_null,",
						"          BenefitDeliveryType = BenefitDeliveryType_null",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTgtColumns",
						"SelectTgtColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string",
						"     ),",
						"     partitionFileNames:['DimBenefit.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> tgtDimBenefit"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/vwCodeTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_CaseHeader_Lookups_POC')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Final df POCs"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "vwCodeTable",
								"type": "DatasetReference"
							},
							"name": "vwCodeTables"
						},
						{
							"dataset": {
								"referenceName": "CaseHeader1",
								"type": "DatasetReference"
							},
							"name": "srcCaseHeader"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dummy1",
								"type": "DatasetReference"
							},
							"name": "DummyFile"
						}
					],
					"transformations": [
						{
							"name": "CaseObjective"
						},
						{
							"name": "CaseStatus"
						},
						{
							"name": "CasePriority"
						},
						{
							"name": "CaseOutcome"
						},
						{
							"name": "CaseCatTypeCode"
						},
						{
							"name": "CaseClassification"
						},
						{
							"name": "CaseTypeCode"
						},
						{
							"name": "SelectCaseColumns"
						},
						{
							"name": "LookupCaseObjective"
						},
						{
							"name": "SelectCaseObjective"
						},
						{
							"name": "LookupStatus"
						},
						{
							"name": "SelectCaseStatus"
						},
						{
							"name": "LookupCasePriority"
						},
						{
							"name": "SelectCasePriority"
						},
						{
							"name": "LookupCaseOutcome"
						},
						{
							"name": "SelectCaseOutcome"
						},
						{
							"name": "LookupTypeCode"
						},
						{
							"name": "SelectCaseCatTypeCode"
						},
						{
							"name": "LookupClassification"
						},
						{
							"name": "SelectClassification"
						},
						{
							"name": "LookupCaseTypeCode"
						},
						{
							"name": "SelectCaseTypeCode"
						},
						{
							"name": "TrimCodeFields"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TABLENAME as string,",
						"          CODE as string,",
						"          DESCRIPTION as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> vwCodeTables",
						"source(output(",
						"          APPEALINDICATOR as string,",
						"          CASEID as long,",
						"          INTEGRATEDCASEID as long,",
						"          CASEREFERENCE as string,",
						"          CASETYPECODE as string,",
						"          CLASSIFICATIONCODE as string,",
						"          EXPECTEDOUTCOME as long,",
						"          ACTUALOUTCOME as string,",
						"          OWNERORGOBJECTLINKID as long,",
						"          VERSIONNO as integer,",
						"          LASTWRITTEN as timestamp,",
						"          INTEGRATEDCASETYPE as string,",
						"          OBJECTIVECODE as string,",
						"          OUTCOMECODE as string,",
						"          PLANID as long,",
						"          PRIORITYCODE as string,",
						"          RECEIVEDDATE as date,",
						"          EFFECTIVEDATE as date,",
						"          STATUSCODE as string,",
						"          ENDDATE as date,",
						"          EXPECTEDENDDATE as date,",
						"          EXPECTEDSTARTDATE as date,",
						"          FIRSTREVIEWDATE as date,",
						"          COMMENTS as string,",
						"          CONCERNROLEID as long,",
						"          REGISTRATIONDATE as date,",
						"          STARTDATE as date,",
						"          DEFAULTCURRENCYTYPECODE as string,",
						"          DEFAULTDELIVERYMETHODTYPE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcCaseHeader",
						"vwCodeTables filter(TABLENAME=='CaseObjective') ~> CaseObjective",
						"vwCodeTables filter(TABLENAME=='CaseStatus') ~> CaseStatus",
						"vwCodeTables filter(TABLENAME=='CasePriority') ~> CasePriority",
						"vwCodeTables filter(TABLENAME=='CaseOutcome') ~> CaseOutcome",
						"vwCodeTables filter(TABLENAME=='CaseCatTypeCode') ~> CaseCatTypeCode",
						"vwCodeTables filter(TABLENAME=='CaseClassification') ~> CaseClassification",
						"vwCodeTables filter(TABLENAME=='CaseTypeCode') ~> CaseTypeCode",
						"TrimCodeFields select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          INTEGRATEDCASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          INTEGRATEDCASETYPE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCaseColumns",
						"SelectCaseColumns, CaseObjective lookup(OBJECTIVECODE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupCaseObjective",
						"LookupCaseObjective select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE,",
						"          INTEGRATEDCASETYPE,",
						"          CaseObj_DESCRIPTION = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCaseObjective",
						"SelectCaseObjective, CaseStatus lookup(STATUSCODE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupStatus",
						"LookupStatus select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE,",
						"          INTEGRATEDCASETYPE,",
						"          CaseObj_DESCRIPTION,",
						"          CaseStatus_DESCRIPTION = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCaseStatus",
						"SelectCaseStatus, CasePriority lookup(PRIORITYCODE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupCasePriority",
						"LookupCasePriority select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE,",
						"          INTEGRATEDCASETYPE,",
						"          CaseObj_DESCRIPTION,",
						"          CaseStatus_DESCRIPTION,",
						"          CasePriority_DESCRIPTION = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCasePriority",
						"SelectCasePriority, CaseOutcome lookup(OUTCOMECODE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupCaseOutcome",
						"LookupCaseOutcome select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE,",
						"          INTEGRATEDCASETYPE,",
						"          CaseObj_DESCRIPTION,",
						"          CaseStatus_DESCRIPTION,",
						"          CasePriority_DESCRIPTION,",
						"          CaseOutcome_DESCRIPTION = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCaseOutcome",
						"SelectCaseOutcome, CaseCatTypeCode lookup(INTEGRATEDCASETYPE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupTypeCode",
						"LookupTypeCode select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE,",
						"          INTEGRATEDCASETYPE,",
						"          CaseObj_DESCRIPTION,",
						"          CaseStatus_DESCRIPTION,",
						"          CasePriority_DESCRIPTION,",
						"          CaseOutcome_DESCRIPTION,",
						"          CaseCatType_DESCRIPTION = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCaseCatTypeCode",
						"SelectCaseCatTypeCode, CaseClassification lookup(CLASSIFICATIONCODE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupClassification",
						"LookupClassification select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE,",
						"          INTEGRATEDCASETYPE,",
						"          CaseObj_DESCRIPTION,",
						"          CaseStatus_DESCRIPTION,",
						"          CasePriority_DESCRIPTION,",
						"          CaseOutcome_DESCRIPTION,",
						"          CaseCatType_DESCRIPTION,",
						"          CaseClass_DESCRIPTION = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectClassification",
						"SelectClassification, CaseTypeCode lookup(CASETYPECODE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupCaseTypeCode",
						"LookupCaseTypeCode select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE,",
						"          INTEGRATEDCASETYPE,",
						"          CaseObj_DESCRIPTION,",
						"          CaseStatus_DESCRIPTION,",
						"          CasePriority_DESCRIPTION,",
						"          CaseOutcome_DESCRIPTION,",
						"          CaseCatType_DESCRIPTION,",
						"          CaseClass_DESCRIPTION,",
						"          CaseType_DESCRIPTION = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCaseTypeCode",
						"srcCaseHeader derive(OBJECTIVECODE = trim(OBJECTIVECODE),",
						"          CASETYPECODE = trim(CASETYPECODE),",
						"          CLASSIFICATIONCODE = trim(CLASSIFICATIONCODE),",
						"          INTEGRATEDCASETYPE = trim(INTEGRATEDCASETYPE),",
						"          PRIORITYCODE = trim(PRIORITYCODE),",
						"          STATUSCODE = trim(STATUSCODE),",
						"          OUTCOMECODE = trim(OUTCOMECODE)) ~> TrimCodeFields",
						"SelectCaseTypeCode sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:['CaseHeaderPOC'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> DummyFile"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/vwCodeTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_CodeTableItem')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Staging"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CodeTableItem",
								"type": "DatasetReference"
							},
							"name": "RptDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "stgCodeTableItem",
								"type": "DatasetReference"
							},
							"name": "StgDB"
						}
					],
					"transformations": [
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"parameters{",
						"     TableName as string ('CODETABLEITEM'),",
						"     SchemaName as string ('CURAPD01'),",
						"     UniqueID as string ('na')",
						"}",
						"source(output(",
						"          TABLENAME as string,",
						"          CODE as string,",
						"          DESCRIPTION as string,",
						"          ANNOTATION as string,",
						"          ISENABLED as string,",
						"          SORTORDER as integer,",
						"          LOCALEIDENTIFIER as string,",
						"          PARENTCODE as string,",
						"          COMMENTS as string,",
						"          VERSIONNO as integer,",
						"          LASTWRITTEN as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     waterMarkColumn: 'LastWritten',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     mode: 'read') ~> RptDB",
						"RptDB alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['TABLENAME','CODE','LOCALEIDENTIFIER'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> StgDB"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Column_Pattern_Matching_For_Trimming_POC')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Final df POCs"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CaseHeader",
								"type": "DatasetReference"
							},
							"name": "srcCaseHeader"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CaseHeader",
								"type": "DatasetReference"
							},
							"name": "tgtSimpleTest"
						}
					],
					"transformations": [
						{
							"name": "drvTrimStringFields"
						},
						{
							"name": "SelectColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          APPEALINDICATOR as string,",
						"          CASEID as long,",
						"          INTEGRATEDCASEID as long,",
						"          CASEREFERENCE as string,",
						"          CASETYPECODE as string,",
						"          CLASSIFICATIONCODE as string,",
						"          EXPECTEDOUTCOME as long,",
						"          ACTUALOUTCOME as string,",
						"          OWNERORGOBJECTLINKID as long,",
						"          VERSIONNO as integer,",
						"          LASTWRITTEN as timestamp,",
						"          INTEGRATEDCASETYPE as string,",
						"          OBJECTIVECODE as string,",
						"          OUTCOMECODE as string,",
						"          PLANID as long,",
						"          PRIORITYCODE as string,",
						"          RECEIVEDDATE as date,",
						"          EFFECTIVEDATE as date,",
						"          STATUSCODE as string,",
						"          ENDDATE as date,",
						"          EXPECTEDENDDATE as date,",
						"          EXPECTEDSTARTDATE as date,",
						"          FIRSTREVIEWDATE as date,",
						"          COMMENTS as string,",
						"          CONCERNROLEID as long,",
						"          REGISTRATIONDATE as date,",
						"          STARTDATE as date,",
						"          DEFAULTCURRENCYTYPECODE as string,",
						"          DEFAULTDELIVERYMETHODTYPE as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcCaseHeader",
						"srcCaseHeader derive(each(match(type=='string'), $$+'_trim' = trim($$))) ~> drvTrimStringFields",
						"drvTrimStringFields select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          INTEGRATEDCASEID,",
						"          CASEREFERENCE,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          EXPECTEDOUTCOME,",
						"          ACTUALOUTCOME,",
						"          OWNERORGOBJECTLINKID,",
						"          VERSIONNO,",
						"          LASTWRITTEN,",
						"          INTEGRATEDCASETYPE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PLANID,",
						"          PRIORITYCODE,",
						"          RECEIVEDDATE,",
						"          EFFECTIVEDATE,",
						"          STATUSCODE,",
						"          ENDDATE,",
						"          EXPECTEDENDDATE,",
						"          EXPECTEDSTARTDATE,",
						"          FIRSTREVIEWDATE,",
						"          COMMENTS,",
						"          CONCERNROLEID,",
						"          REGISTRATIONDATE,",
						"          STARTDATE,",
						"          DEFAULTCURRENCYTYPECODE,",
						"          DEFAULTDELIVERYMETHODTYPE,",
						"          APPEALINDICATOR_trim,",
						"          CASEREFERENCE_trim,",
						"          CASETYPECODE_trim,",
						"          CLASSIFICATIONCODE_trim,",
						"          ACTUALOUTCOME_trim,",
						"          INTEGRATEDCASETYPE_trim,",
						"          OBJECTIVECODE_trim,",
						"          OUTCOMECODE_trim,",
						"          PRIORITYCODE_trim,",
						"          STATUSCODE_trim,",
						"          COMMENTS_trim,",
						"          DEFAULTCURRENCYTYPECODE_trim,",
						"          DEFAULTDELIVERYMETHODTYPE_trim",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"SelectColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          APPEALINDICATOR as string,",
						"          CASEID as long,",
						"          INTEGRATEDCASEID as long,",
						"          CASEREFERENCE as string,",
						"          CASETYPECODE as string,",
						"          CLASSIFICATIONCODE as string,",
						"          EXPECTEDOUTCOME as long,",
						"          ACTUALOUTCOME as string,",
						"          OWNERORGOBJECTLINKID as long,",
						"          VERSIONNO as integer,",
						"          LASTWRITTEN as timestamp,",
						"          INTEGRATEDCASETYPE as string,",
						"          OBJECTIVECODE as string,",
						"          OUTCOMECODE as string,",
						"          PLANID as long,",
						"          PRIORITYCODE as string,",
						"          RECEIVEDDATE as date,",
						"          EFFECTIVEDATE as date,",
						"          STATUSCODE as string,",
						"          ENDDATE as date,",
						"          EXPECTEDENDDATE as date,",
						"          EXPECTEDSTARTDATE as date,",
						"          FIRSTREVIEWDATE as date,",
						"          COMMENTS as string,",
						"          CONCERNROLEID as long,",
						"          REGISTRATIONDATE as date,",
						"          STARTDATE as date,",
						"          DEFAULTCURRENCYTYPECODE as string,",
						"          DEFAULTDELIVERYMETHODTYPE as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('hash', 1)) ~> tgtSimpleTest"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_County')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "County Dimension",
				"folder": {
					"name": "Dimensions"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "vwCodeTable",
								"type": "DatasetReference"
							},
							"name": "vwCodeTable"
						},
						{
							"dataset": {
								"referenceName": "CountyDetails",
								"type": "DatasetReference"
							},
							"name": "srcCountyDetails"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimensionTargetTesting",
								"type": "DatasetReference"
							},
							"name": "tgtDimCounty"
						}
					],
					"transformations": [
						{
							"name": "UtahCounties"
						},
						{
							"name": "SelectSrcColumns"
						},
						{
							"name": "drvTrimColumns"
						},
						{
							"name": "LookupCounties"
						},
						{
							"name": "SelectTgtColumns"
						},
						{
							"name": "drvNullValues"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TABLENAME as string,",
						"          CODE as string,",
						"          DESCRIPTION as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> vwCodeTable",
						"source(output(",
						"          COUNTYDETAILSID as long,",
						"          COUNTYCODE as string,",
						"          STATECODE as string,",
						"          STATUSCODE as string,",
						"          VERSIONNO as integer,",
						"          LASTWRITTEN as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcCountyDetails",
						"vwCodeTable filter(TABLENAME=='UtahCounties') ~> UtahCounties",
						"srcCountyDetails select(mapColumn(",
						"          COUNTYDETAILSID,",
						"          COUNTYCODE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSrcColumns",
						"SelectSrcColumns derive(ModifiedDate = currentUTC(),",
						"          each(match(type=='string'), $$+'_Trim' = trim($$))) ~> drvTrimColumns",
						"drvTrimColumns, UtahCounties lookup(COUNTYCODE_Trim == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupCounties",
						"drvNullValues select(mapColumn(",
						"          CountyDetailsID = COUNTYDETAILSID,",
						"          ModifiedDate,",
						"          CountyName = DESCRIPTION_null",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTgtColumns",
						"LookupCounties derive(each(match(type=='string'), $$+'_null' = iifNull($$,'NA'))) ~> drvNullValues",
						"SelectTgtColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string",
						"     ),",
						"     partitionFileNames:['DimCounty.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> tgtDimCounty"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/vwCodeTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DimAidCategory')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Aid Category Dimension",
				"folder": {
					"name": "Dimensions"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "vwCodeTable",
								"type": "DatasetReference"
							},
							"name": "vwCodeTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimensionTargetTesting",
								"type": "DatasetReference"
							},
							"name": "tgtAidCategory"
						}
					],
					"transformations": [
						{
							"name": "SDMedAidPrgmCatClass"
						},
						{
							"name": "drvTrimColumns"
						},
						{
							"name": "SelectTgtColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TABLENAME as string,",
						"          CODE as string,",
						"          DESCRIPTION as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> vwCodeTable",
						"vwCodeTable filter(TABLENAME=='SDMedAidPrgmCatClass') ~> SDMedAidPrgmCatClass",
						"SDMedAidPrgmCatClass derive(ModifiedDate = currentUTC(),",
						"          each(match(type=='string'), $$+'_null' = iifNull($$,'NA'))) ~> drvTrimColumns",
						"drvTrimColumns select(mapColumn(",
						"          ModifiedDate,",
						"          AidCategoryCode = CODE_null,",
						"          { AidCategoryClass} = DESCRIPTION_null",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTgtColumns",
						"SelectTgtColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string",
						"     ),",
						"     partitionFileNames:['DimAidCategory.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> tgtAidCategory"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/vwCodeTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DimAppeals')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Dimensions"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "vwCodeTable",
								"type": "DatasetReference"
							},
							"name": "vwCodeTable"
						},
						{
							"dataset": {
								"referenceName": "Appeal",
								"type": "DatasetReference"
							},
							"name": "srcAppeal"
						},
						{
							"dataset": {
								"referenceName": "APPEALRELATIONSHIP",
								"type": "DatasetReference"
							},
							"name": "srcAppealRelationship"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimensionTargetTesting",
								"type": "DatasetReference"
							},
							"name": "tgtDimAppeals"
						}
					],
					"transformations": [
						{
							"name": "AppealRelationshipStatus"
						},
						{
							"name": "AppealType"
						},
						{
							"name": "SelectSrcColumns"
						},
						{
							"name": "SelectSrcAppRelColumns"
						},
						{
							"name": "drvTrimStatus"
						},
						{
							"name": "LookupCaseStatus"
						},
						{
							"name": "SelectLookupCaseStatus"
						},
						{
							"name": "drvTrimAppealCode"
						},
						{
							"name": "LookupAppealType"
						},
						{
							"name": "SelectAppealType"
						},
						{
							"name": "LookupAppealStatus"
						},
						{
							"name": "drvSelectAppealStatus"
						},
						{
							"name": "SelectTgtColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TABLENAME as string,",
						"          CODE as string,",
						"          DESCRIPTION as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> vwCodeTable",
						"source(output(",
						"          APPEALID as long,",
						"          CASEID as long,",
						"          DIFFICULTYCODE as string,",
						"          APPEALTYPECODE as string,",
						"          DEADLINEDATE as timestamp,",
						"          COMMENTS as string,",
						"          VERSIONNO as integer,",
						"          LASTWRITTEN as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcAppeal",
						"source(output(",
						"          APPEALRELATIONSHIPID as long,",
						"          APPEALCASEID as long,",
						"          CASEID as long,",
						"          PRIORAPPEALCASEID as long,",
						"          RECEIVEDDATE as timestamp,",
						"          RECEIPTMETHOD as string,",
						"          RECEIPTNOTICEINDICATOR as string,",
						"          APPEALEDDECISIONDATE as timestamp,",
						"          REASONCODE as string,",
						"          EMERGENCYCODE as string,",
						"          TIMELYINDICATOR as string,",
						"          REGISTRATIONDATE as timestamp,",
						"          CONTINUEBENEFITSINDICATOR as string,",
						"          DEADLINEDATE as timestamp,",
						"          RESOLUTIONCODE as string,",
						"          COMMENTS as string,",
						"          RECORDSTATUS as string,",
						"          STATUSCODE as string,",
						"          VERSIONNO as integer,",
						"          LASTWRITTEN as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcAppealRelationship",
						"vwCodeTable filter(TABLENAME=='AppealRelationshipStatus') ~> AppealRelationshipStatus",
						"vwCodeTable filter(TABLENAME=='AppealType') ~> AppealType",
						"srcAppeal select(mapColumn(",
						"          APPEALID,",
						"          CASEID,",
						"          APPEALTYPECODE,",
						"          CASEID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSrcColumns",
						"srcAppealRelationship select(mapColumn(",
						"          APPEALRELATIONSHIPID,",
						"          STATUSCODE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSrcAppRelColumns",
						"SelectSrcAppRelColumns derive(STATUSCODE = trim(STATUSCODE)) ~> drvTrimStatus",
						"drvTrimStatus, AppealRelationshipStatus lookup(STATUSCODE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupCaseStatus",
						"LookupCaseStatus select(mapColumn(",
						"          APPEALRELATIONSHIPID,",
						"          AppealCaseStatus = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectLookupCaseStatus",
						"SelectSrcColumns derive(APPEALTYPECODE = trim(APPEALTYPECODE)) ~> drvTrimAppealCode",
						"drvTrimAppealCode, AppealType lookup(APPEALTYPECODE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupAppealType",
						"LookupAppealType select(mapColumn(",
						"          APPEALID,",
						"          CASEID,",
						"          AppealTypeName = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAppealType",
						"SelectAppealType, SelectLookupCaseStatus lookup(APPEALID == APPEALRELATIONSHIPID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupAppealStatus",
						"LookupAppealStatus derive(each(match(type=='string'), $$+'_null' = iifNull($$,'NA')),",
						"          ModifiedDate = currentUTC()) ~> drvSelectAppealStatus",
						"drvSelectAppealStatus select(mapColumn(",
						"          AppealID = APPEALID,",
						"          CaseID = CASEID,",
						"          AppealTypeName = AppealTypeName_null,",
						"          AppealCaseStatus = AppealCaseStatus_null,",
						"          ModifiedDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTgtColumns",
						"SelectTgtColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string",
						"     ),",
						"     partitionFileNames:['DimAppeals'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> tgtDimAppeals"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/vwCodeTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DimApplication')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is not complete. Still need some flags\n\n",
				"folder": {
					"name": "Dimensions"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "vwCodeTable",
								"type": "DatasetReference"
							},
							"name": "vwCodeTable"
						},
						{
							"dataset": {
								"referenceName": "Application",
								"type": "DatasetReference"
							},
							"name": "srcApplication"
						},
						{
							"dataset": {
								"referenceName": "vwProgramStatus",
								"type": "DatasetReference"
							},
							"name": "vwProgramStatus"
						},
						{
							"dataset": {
								"referenceName": "CaseHeader",
								"type": "DatasetReference"
							},
							"name": "srcCaseHeader"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimensionTargetTesting",
								"type": "DatasetReference"
							},
							"name": "tgtDimApplication"
						}
					],
					"transformations": [
						{
							"name": "RecordStatus"
						},
						{
							"name": "ApplicationMethod"
						},
						{
							"name": "ApplicationType"
						},
						{
							"name": "SelectTrim"
						},
						{
							"name": "drvTrimColumns"
						},
						{
							"name": "LookupAppType"
						},
						{
							"name": "SelectAppType"
						},
						{
							"name": "LookAppMethod"
						},
						{
							"name": "SelectAppMethod"
						},
						{
							"name": "LookupAppStatus"
						},
						{
							"name": "SelectAppStatus"
						},
						{
							"name": "LookupProgramStatus"
						},
						{
							"name": "SelectProgramStatus"
						},
						{
							"name": "LookupCaseRefNumbr"
						},
						{
							"name": "drvCaseRef"
						},
						{
							"name": "SelectTgtColumns"
						},
						{
							"name": "SelectCase"
						},
						{
							"name": "drvNullColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TABLENAME as string,",
						"          CODE as string,",
						"          DESCRIPTION as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> vwCodeTable",
						"source(output(",
						"          APPLICATIONID as long,",
						"          SUBMITTEDDATETIME as timestamp,",
						"          FILINGDATE as date,",
						"          REFERENCE as string,",
						"          APPLICATIONMETHOD as string,",
						"          ROOTENTITYID as long,",
						"          ASSIGNEE as string,",
						"          VERSIONNO as integer,",
						"          LASTWRITTEN as timestamp,",
						"          CURRENTAPPLICATIONSTATUSID as long,",
						"          PDFID as long,",
						"          CASEID as long,",
						"          REFERENCEADDENDUM as string,",
						"          IEGEXECUTIONID as long,",
						"          RECORDSTATUS as string,",
						"          SCHEMANAME as string,",
						"          INTERPRETERREQIND as string,",
						"          INTERPRETERLANGUAGECODE as string,",
						"          SPECIALASSISTANCEIND as string,",
						"          SPECIALASSISTANCEREQUIREMENTS as string,",
						"          APPLICATIONTYPE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcApplication",
						"source(output(",
						"          APPLICATIONID as long,",
						"          REFERENCE as string,",
						"          PROGRAMAPPLICATIONID as long,",
						"          STATUS as string,",
						"          DESCRIPTION as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> vwProgramStatus",
						"source(output(",
						"          APPEALINDICATOR as string,",
						"          CASEID as long,",
						"          INTEGRATEDCASEID as long,",
						"          CASEREFERENCE as string,",
						"          CASETYPECODE as string,",
						"          CLASSIFICATIONCODE as string,",
						"          EXPECTEDOUTCOME as long,",
						"          ACTUALOUTCOME as string,",
						"          OWNERORGOBJECTLINKID as long,",
						"          VERSIONNO as integer,",
						"          LASTWRITTEN as timestamp,",
						"          INTEGRATEDCASETYPE as string,",
						"          OBJECTIVECODE as string,",
						"          OUTCOMECODE as string,",
						"          PLANID as long,",
						"          PRIORITYCODE as string,",
						"          RECEIVEDDATE as date,",
						"          EFFECTIVEDATE as date,",
						"          STATUSCODE as string,",
						"          ENDDATE as date,",
						"          EXPECTEDENDDATE as date,",
						"          EXPECTEDSTARTDATE as date,",
						"          FIRSTREVIEWDATE as date,",
						"          COMMENTS as string,",
						"          CONCERNROLEID as long,",
						"          REGISTRATIONDATE as date,",
						"          STARTDATE as date,",
						"          DEFAULTCURRENCYTYPECODE as string,",
						"          DEFAULTDELIVERYMETHODTYPE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcCaseHeader",
						"vwCodeTable filter(TABLENAME=='RecordStatus') ~> RecordStatus",
						"vwCodeTable filter(TABLENAME=='ApplicationMethod') ~> ApplicationMethod",
						"vwCodeTable filter(TABLENAME== 'ApplicationType') ~> ApplicationType",
						"drvTrimColumns select(mapColumn(",
						"          APPLICATIONID,",
						"          SUBMITTEDDATETIME,",
						"          FILINGDATE,",
						"          CURRENTAPPLICATIONSTATUSID,",
						"          CASEID,",
						"          RECORDSTATUS,",
						"          APPLICATIONTYPE,",
						"          REFERENCE_Trim,",
						"          APPLICATIONMETHOD_Trim,",
						"          ASSIGNEE_Trim,",
						"          RECORDSTATUS_Trim,",
						"          APPLICATIONTYPE_Trim",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTrim",
						"srcApplication derive(each(match(type=='string'), $$+'_Trim' = trim($$))) ~> drvTrimColumns",
						"SelectTrim, ApplicationType lookup(APPLICATIONTYPE_Trim == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupAppType",
						"LookupAppType select(mapColumn(",
						"          APPLICATIONID,",
						"          SUBMITTEDDATETIME,",
						"          FILINGDATE,",
						"          CURRENTAPPLICATIONSTATUSID,",
						"          CASEID,",
						"          RECORDSTATUS,",
						"          APPLICATIONTYPE,",
						"          REFERENCE_Trim,",
						"          APPLICATIONMETHOD_Trim,",
						"          ASSIGNEE_Trim,",
						"          RECORDSTATUS_Trim,",
						"          APPLICATIONTYPE_Trim,",
						"          ApplicationType = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAppType",
						"SelectAppType, ApplicationMethod lookup(APPLICATIONMETHOD_Trim == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookAppMethod",
						"LookAppMethod select(mapColumn(",
						"          APPLICATIONID,",
						"          SUBMITTEDDATETIME,",
						"          FILINGDATE,",
						"          CURRENTAPPLICATIONSTATUSID,",
						"          CASEID,",
						"          RECORDSTATUS,",
						"          APPLICATIONTYPE = SelectAppType@APPLICATIONTYPE,",
						"          REFERENCE_Trim,",
						"          ASSIGNEE_Trim,",
						"          RECORDSTATUS_Trim,",
						"          APPLICATIONTYPE_Trim,",
						"          ApplicationType = SelectAppType@ApplicationType,",
						"          ApplicationMethod = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAppMethod",
						"SelectAppMethod, RecordStatus lookup(RECORDSTATUS_Trim == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupAppStatus",
						"LookupAppStatus select(mapColumn(",
						"          APPLICATIONID,",
						"          SUBMITTEDDATETIME,",
						"          FILINGDATE,",
						"          CURRENTAPPLICATIONSTATUSID,",
						"          CASEID,",
						"          RECORDSTATUS,",
						"          REFERENCE_Trim,",
						"          ASSIGNEE_Trim,",
						"          ApplicationType = SelectAppMethod@ApplicationType,",
						"          ApplicationCurrentStatus = DESCRIPTION,",
						"          ApplicationMethod",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAppStatus",
						"SelectAppStatus, vwProgramStatus lookup(SelectAppStatus@APPLICATIONID == vwProgramStatus@APPLICATIONID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupProgramStatus",
						"LookupProgramStatus select(mapColumn(",
						"          ApplicationID = SelectAppStatus@APPLICATIONID,",
						"          ApplicationSubmittedDate = SUBMITTEDDATETIME,",
						"          ApplicationFilingDate = FILINGDATE,",
						"          CaseID = CASEID,",
						"          ApplicationType,",
						"          ApplicationCurrentStatus,",
						"          ApplicationMethod,",
						"          ApplicationProgramStatus = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectProgramStatus",
						"SelectProgramStatus, SelectCase lookup(SelectProgramStatus@CaseID == SelectCase@CaseID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupCaseRefNumbr",
						"srcCaseHeader derive(CASEREFERENCE = trim(CASEREFERENCE)) ~> drvCaseRef",
						"drvNullColumns select(mapColumn(",
						"          ApplicationID,",
						"          ApplicationSubmittedDate,",
						"          ApplicationFilingDate,",
						"          CaseID = SelectProgramStatus@CaseID,",
						"          ApplicationTypeName = ApplicationType_null,",
						"          ApplicationCurrentStatus = ApplicationCurrentStatus_null,",
						"          ApplicationMethodName = ApplicationMethod_null,",
						"          ApplicationProgramStatus = ApplicationProgramStatus_null,",
						"          ApplicationCaseReferenceNumber = ApplicationCaseReferenceNumber_null",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTgtColumns",
						"drvCaseRef select(mapColumn(",
						"          CaseID = CASEID,",
						"          ApplicationCaseReferenceNumber = CASEREFERENCE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCase",
						"LookupCaseRefNumbr derive(each(match(type=='string'), $$+'_null' = iifNull($$,'NA'))) ~> drvNullColumns",
						"SelectTgtColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string",
						"     ),",
						"     partitionFileNames:['DimApplication'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> tgtDimApplication"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/vwCodeTable')]",
				"[concat(variables('factoryId'), '/datasets/vwProgramStatus')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DimDisability')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Disability Dimension",
				"folder": {
					"name": "Dimensions"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "vwCodeTable",
								"type": "DatasetReference"
							},
							"name": "vwCodeTable"
						},
						{
							"dataset": {
								"referenceName": "Disability",
								"type": "DatasetReference"
							},
							"name": "srcDisability"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimensionTargetTesting",
								"type": "DatasetReference"
							},
							"name": "tgtDimDisability"
						}
					],
					"transformations": [
						{
							"name": "DisabilityType"
						},
						{
							"name": "DisabilityMode"
						},
						{
							"name": "CompetencyStatus"
						},
						{
							"name": "SelectSrcColumns"
						},
						{
							"name": "drvTrimColumns"
						},
						{
							"name": "SelectTrimColumns"
						},
						{
							"name": "LookupType"
						},
						{
							"name": "SelectType"
						},
						{
							"name": "LookupMode"
						},
						{
							"name": "SelectMode"
						},
						{
							"name": "LookupStatus"
						},
						{
							"name": "SelectStatus"
						},
						{
							"name": "drvNullValues"
						},
						{
							"name": "SelectNullValues"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TABLENAME as string,",
						"          CODE as string,",
						"          DESCRIPTION as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> vwCodeTable",
						"source(output(",
						"          EVIDENCEID as long,",
						"          CASEPARTICIPANTROLEID as long,",
						"          DISABILITYTYPE as string,",
						"          DISABILITYDURATION as string,",
						"          DISABILITYSTARTDATE as date,",
						"          DISABILITYENDDATE as date,",
						"          ESTABLISHEDDISABILITYMODE as string,",
						"          BLINDREGISTERIND as string,",
						"          BLINDREGISTERENDDATE as date,",
						"          COMMENTS as string,",
						"          PREVCHILDCRITERIAIND as string,",
						"          IS1619BRECIPIENTIND as string,",
						"          COMPETENCYSTATUS as string,",
						"          DATECOMPETENCYDETERMINED as date,",
						"          CATEGORIESOFBRAININJURY as string,",
						"          VERSIONNO as integer,",
						"          LASTWRITTEN as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcDisability",
						"vwCodeTable filter(TABLENAME=='DisabilityType') ~> DisabilityType",
						"vwCodeTable filter(TABLENAME=='DisabilityMode') ~> DisabilityMode",
						"vwCodeTable filter(TABLENAME=='CompetencyStatus') ~> CompetencyStatus",
						"srcDisability select(mapColumn(",
						"          EVIDENCEID,",
						"          CASEPARTICIPANTROLEID,",
						"          DISABILITYTYPE,",
						"          DISABILITYDURATION,",
						"          DISABILITYSTARTDATE,",
						"          DISABILITYENDDATE,",
						"          ESTABLISHEDDISABILITYMODE,",
						"          IS1619BRECIPIENTIND,",
						"          COMPETENCYSTATUS",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSrcColumns",
						"SelectSrcColumns derive(each(match(type=='string'), $$+'_Trim' = trim($$))) ~> drvTrimColumns",
						"drvTrimColumns select(mapColumn(",
						"          EVIDENCEID,",
						"          CASEPARTICIPANTROLEID,",
						"          DISABILITYSTARTDATE,",
						"          DISABILITYENDDATE,",
						"          DISABILITYTYPE_Trim,",
						"          DISABILITYDURATION_Trim,",
						"          ESTABLISHEDDISABILITYMODE_Trim,",
						"          IS1619BRECIPIENTIND_Trim,",
						"          COMPETENCYSTATUS_Trim",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTrimColumns",
						"SelectTrimColumns, DisabilityType lookup(DISABILITYTYPE_Trim == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupType",
						"LookupType select(mapColumn(",
						"          EVIDENCEID,",
						"          CASEPARTICIPANTROLEID,",
						"          DISABILITYSTARTDATE,",
						"          DISABILITYENDDATE,",
						"          DISABILITYDURATION_Trim,",
						"          ESTABLISHEDDISABILITYMODE_Trim,",
						"          IS1619BRECIPIENTIND_Trim,",
						"          COMPETENCYSTATUS_Trim,",
						"          DisablilityType = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectType",
						"SelectType, DisabilityMode lookup(ESTABLISHEDDISABILITYMODE_Trim == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupMode",
						"LookupMode select(mapColumn(",
						"          EVIDENCEID,",
						"          CASEPARTICIPANTROLEID,",
						"          DISABILITYSTARTDATE,",
						"          DISABILITYENDDATE,",
						"          DISABILITYDURATION_Trim,",
						"          IS1619BRECIPIENTIND_Trim,",
						"          COMPETENCYSTATUS_Trim,",
						"          DisablilityType,",
						"          DisabilityEstablishedMode = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectMode",
						"SelectMode, CompetencyStatus lookup(COMPETENCYSTATUS_Trim == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupStatus",
						"LookupStatus select(mapColumn(",
						"          EVIDENCEID,",
						"          CASEPARTICIPANTROLEID,",
						"          DISABILITYSTARTDATE,",
						"          DISABILITYENDDATE,",
						"          DISABILITYDURATION_Trim,",
						"          IS1619BRECIPIENTIND_Trim,",
						"          DisablilityType,",
						"          DisabilityEstablishedMode,",
						"          DisabilityCompetencyStatus = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectStatus",
						"SelectStatus derive(ModifiedDate = currentUTC(),",
						"          each(match(type=='string'), $$+'_null' = iifNull($$,'NA'))) ~> drvNullValues",
						"drvNullValues select(mapColumn(",
						"          EvidenceID = EVIDENCEID,",
						"          CaseParticipantRoleID = CASEPARTICIPANTROLEID,",
						"          DisabilityStartDate = DISABILITYSTARTDATE,",
						"          DisabilityEndDate = DISABILITYENDDATE,",
						"          ModifiedDate,",
						"          DisabilityDuration = DISABILITYDURATION_Trim_null,",
						"          Disability1619BFlag = IS1619BRECIPIENTIND_Trim_null,",
						"          DisablilityType = DisablilityType_null,",
						"          DisabilityEstablishedMode = DisabilityEstablishedMode_null,",
						"          DisabilityCompetencyStatus = DisabilityCompetencyStatus_null",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectNullValues",
						"SelectNullValues sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string",
						"     ),",
						"     partitionFileNames:['DimDisability.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> tgtDimDisability"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/vwCodeTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DimEmployer')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Dimensions"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Employer",
								"type": "DatasetReference"
							},
							"name": "srcEmployer"
						},
						{
							"dataset": {
								"referenceName": "ConcernRole",
								"type": "DatasetReference"
							},
							"name": "srcConcernRole"
						},
						{
							"dataset": {
								"referenceName": "vwAddress",
								"type": "DatasetReference"
							},
							"name": "srcAddress"
						},
						{
							"dataset": {
								"referenceName": "Location",
								"type": "DatasetReference"
							},
							"name": "srcLocation"
						},
						{
							"dataset": {
								"referenceName": "SDRegion",
								"type": "DatasetReference"
							},
							"name": "srcSDRegion"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimensionTargetTesting",
								"type": "DatasetReference"
							},
							"name": "tgtDimEmployer"
						}
					],
					"transformations": [
						{
							"name": "SelectSourceColumns"
						},
						{
							"name": "LookupPrimaryAddressID"
						},
						{
							"name": "SelectPrimaryAddressID"
						},
						{
							"name": "LookupAddress"
						},
						{
							"name": "SelectAddress"
						},
						{
							"name": "drvTrimColumns"
						},
						{
							"name": "LookupSDRegion"
						},
						{
							"name": "SelectRegion"
						},
						{
							"name": "SelectRegionLocation"
						},
						{
							"name": "LookupRegion"
						},
						{
							"name": "drvNullColumns"
						},
						{
							"name": "SelectNullColumns"
						},
						{
							"name": "SelectTrimColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CONCERNROLEID as long,",
						"          REGISTEREDNAME as string,",
						"          TRADINGNAME as string,",
						"          INDUSTRYTYPE as string,",
						"          COMPANYTYPE as string,",
						"          BUSINESSDESC as string,",
						"          UPPERTRADINGNAME as string,",
						"          UPPERREGISTEREDNAME as string,",
						"          VERSIONNO as integer,",
						"          LASTWRITTEN as timestamp,",
						"          NUMBERCASUALSTAFF as integer,",
						"          PINNUMBER as string,",
						"          PAYMENTFREQUENCY as string,",
						"          NEXTPAYMENTDATE as date,",
						"          CURRENCYTYPE as string,",
						"          METHODOFPMTCODE as string,",
						"          SPECIALINTERESTCODE as string,",
						"          EXEMPTIONIND as string,",
						"          STATUSCODE as string,",
						"          COMMENTS as string,",
						"          PRIMARYALTERNATEID as string,",
						"          NUMBERPERMANENTSTAFF as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcEmployer",
						"source(output(",
						"          CONCERNID as long,",
						"          CONCERNROLEID as long,",
						"          CONCERNROLETYPE as string,",
						"          CREATIONDATE as date,",
						"          REGISTRATIONDATE as date,",
						"          STARTDATE as date,",
						"          LASTWRITTEN as timestamp,",
						"          SENSITIVITY as string,",
						"          PREFCOMMMETHOD as string,",
						"          PREFCOMMFROMDATE as date,",
						"          PREFCOMMTODATE as date,",
						"          PRIMARYWEBADDRESSID as long,",
						"          VERSIONNO as integer,",
						"          PRIMARYPHONENUMBERID as long,",
						"          PRIMARYEMAILADDRESSID as long,",
						"          PRIMARYBANKACCOUNTID as long,",
						"          REGUSERNAME as string,",
						"          PREFPUBLICOFFICEID as long,",
						"          PREFERREDLANGUAGE as string,",
						"          ENDDATE as date,",
						"          STATUSCODE as string,",
						"          CONCERNROLENAME as string,",
						"          PRIMARYADDRESSID as long,",
						"          PRIMARYALTERNATEID as string,",
						"          COMMENTS as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcConcernRole",
						"source(output(",
						"          ADDRESSID as long,",
						"          ADDRESS1 as string,",
						"          ADDRESS2 as string,",
						"          ADDRESS3 as string,",
						"          CITY as string,",
						"          STATE as string,",
						"          USCOUNTY as string,",
						"          ZIP as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcAddress",
						"source(output(",
						"          LOCATIONID as long,",
						"          NAME as string,",
						"          ADDRESSID as long,",
						"          DESCRIPTION as string,",
						"          STATUSCODE as string,",
						"          LOCATIONSTATUS as string,",
						"          CREATIONDATE as date,",
						"          LOCATIONTYPE as string,",
						"          PARENTLOCATIONID as long,",
						"          ORGANISATIONID as long,",
						"          ADDRESSCOMMENTS as string,",
						"          CREATELOCATIONSID as string,",
						"          MAINTAINSID as string,",
						"          READSID as string,",
						"          LOCATIONSTRUCTUREID as long,",
						"          PUBLICOFFICEINDICATOR as string,",
						"          PHONENUMBERID as long,",
						"          FAXNUMBERID as long,",
						"          EMAILADDRESSID as long,",
						"          ROOTLOCATIONINDICATOR as string,",
						"          UPPERNAME as string,",
						"          VERSIONNO as integer,",
						"          LASTWRITTEN as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcLocation",
						"source(output(",
						"          SDREGIONID as long,",
						"          SDLOCATIONID as long,",
						"          SDREGIONNAME as string,",
						"          SDAPPLICATIONTYPE as string,",
						"          LASTWRITTEN as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcSDRegion",
						"srcEmployer select(mapColumn(",
						"          CONCERNROLEID,",
						"          COMPANYTYPE,",
						"          BUSINESSDESC,",
						"          UPPERREGISTEREDNAME,",
						"          PRIMARYALTERNATEID,",
						"          NUMBERPERMANENTSTAFF,",
						"          REGISTEREDNAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSourceColumns",
						"SelectSourceColumns, srcConcernRole lookup(SelectSourceColumns@CONCERNROLEID == srcConcernRole@CONCERNROLEID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupPrimaryAddressID",
						"LookupPrimaryAddressID select(mapColumn(",
						"          CONCERNROLEID = SelectSourceColumns@CONCERNROLEID,",
						"          COMPANYTYPE,",
						"          BUSINESSDESC,",
						"          UPPERREGISTEREDNAME,",
						"          PRIMARYADDRESSID,",
						"          REGISTEREDNAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPrimaryAddressID",
						"SelectPrimaryAddressID, srcAddress lookup(PRIMARYADDRESSID == ADDRESSID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupAddress",
						"LookupAddress select(mapColumn(",
						"          CONCERNROLEID,",
						"          COMPANYTYPE,",
						"          ADDRESSID,",
						"          BUSINESSDESC,",
						"          REGISTEREDNAME,",
						"          UPPERREGISTEREDNAME,",
						"          ADDRESS1,",
						"          ADDRESS2,",
						"          ADDRESS3,",
						"          CITY,",
						"          STATE,",
						"          USCOUNTY,",
						"          ZIP",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAddress",
						"SelectRegionLocation derive(each(match(type=='string'), $$+'_Trim' = trim($$)),",
						"          ModifiedDate = currentUTC()) ~> drvTrimColumns",
						"srcLocation, srcSDRegion lookup(LOCATIONID == SDLOCATIONID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupSDRegion",
						"LookupSDRegion select(mapColumn(",
						"          NAME,",
						"          ADDRESSID,",
						"          SDREGIONNAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRegion",
						"LookupRegion select(mapColumn(",
						"          CONCERNROLEID,",
						"          ADDRESSID = SelectAddress@ADDRESSID,",
						"          COMPANYTYPE,",
						"          BUSINESSDESC,",
						"          REGISTEREDNAME,",
						"          UPPERREGISTEREDNAME,",
						"          ADDRESS1,",
						"          ADDRESS2,",
						"          ADDRESS3,",
						"          CITY,",
						"          STATE,",
						"          USCOUNTY,",
						"          ZIP,",
						"          LOCATION = NAME,",
						"          SDREGIONNAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRegionLocation",
						"SelectAddress, SelectRegion lookup(SelectAddress@ADDRESSID == SelectRegion@ADDRESSID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupRegion",
						"SelectTrimColumns derive(each(match(type=='string'), $$+ '_null' = iifNull($$,'NA'))) ~> drvNullColumns",
						"drvNullColumns select(mapColumn(",
						"          CONCERNROLEID,",
						"          ADDRESSID,",
						"          ModifiedDate,",
						"          EmployerName = REGISTEREDNAME_Trim_null,",
						"          EmployerAddress1 = ADDRESS1_Trim_null,",
						"          EmployerAddress2 = ADDRESS2_Trim_null,",
						"          EmployerAddress3 = ADDRESS3_Trim_null,",
						"          EmployerCity = CITY_Trim_null,",
						"          EmployerState = STATE_Trim_null,",
						"          EmployerUSCounty = USCOUNTY_Trim_null,",
						"          EmployerZIP = ZIP_Trim_null,",
						"          EmployerLocation = LOCATION_Trim_null,",
						"          EmployerRegion = SDREGIONNAME_Trim_null",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectNullColumns",
						"drvTrimColumns select(mapColumn(",
						"          CONCERNROLEID,",
						"          ADDRESSID,",
						"          COMPANYTYPE_Trim,",
						"          BUSINESSDESC_Trim,",
						"          REGISTEREDNAME_Trim,",
						"          UPPERREGISTEREDNAME_Trim,",
						"          ADDRESS1_Trim,",
						"          ADDRESS2_Trim,",
						"          ADDRESS3_Trim,",
						"          CITY_Trim,",
						"          STATE_Trim,",
						"          USCOUNTY_Trim,",
						"          ZIP_Trim,",
						"          LOCATION_Trim,",
						"          SDREGIONNAME_Trim,",
						"          ModifiedDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTrimColumns",
						"SelectNullColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string",
						"     ),",
						"     partitionFileNames:['DimEmployer.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> tgtDimEmployer"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/vwAddress')]"
			]
		}
	]
}