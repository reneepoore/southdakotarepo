{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "RP-SouthDakota-POC"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dsTestTargetSelectTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TargetSandbox",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ptblTableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Testing"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "STG",
					"table": {
						"value": "@dataset().ptblTableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_DimCustomer_Target')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdventureWorksDW",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Testing/POCWork/AdventureWorksTarget"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "GeographyKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerAlternateKey",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "NameStyle",
						"type": "bit"
					},
					{
						"name": "BirthDate",
						"type": "date"
					},
					{
						"name": "MaritalStatus",
						"type": "nvarchar"
					},
					{
						"name": "Suffix",
						"type": "nvarchar"
					},
					{
						"name": "Gender",
						"type": "nvarchar"
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "YearlyIncome",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalChildren",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NumberChildrenAtHome",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EnglishEducation",
						"type": "nvarchar"
					},
					{
						"name": "SpanishEducation",
						"type": "nvarchar"
					},
					{
						"name": "FrenchEducation",
						"type": "nvarchar"
					},
					{
						"name": "EnglishOccupation",
						"type": "nvarchar"
					},
					{
						"name": "SpanishOccupation",
						"type": "nvarchar"
					},
					{
						"name": "FrenchOccupation",
						"type": "nvarchar"
					},
					{
						"name": "HouseOwnerFlag",
						"type": "nvarchar"
					},
					{
						"name": "NumberCarsOwned",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "AddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "Phone",
						"type": "nvarchar"
					},
					{
						"name": "DateFirstPurchase",
						"type": "date"
					},
					{
						"name": "CommuteDistance",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimCustomer_Target"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_DimCustomer_Target1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdventureWorksLT2019",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Testing/POCWork/Target AdWrks"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "GeographyKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerAlternateKey",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "NameStyle",
						"type": "bit"
					},
					{
						"name": "BirthDate",
						"type": "date"
					},
					{
						"name": "MaritalStatus",
						"type": "nvarchar"
					},
					{
						"name": "Suffix",
						"type": "nvarchar"
					},
					{
						"name": "Gender",
						"type": "nvarchar"
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "YearlyIncome",
						"type": "decimal",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalChildren",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NumberChildrenAtHome",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EnglishEducation",
						"type": "nvarchar"
					},
					{
						"name": "SpanishEducation",
						"type": "nvarchar"
					},
					{
						"name": "FrenchEducation",
						"type": "nvarchar"
					},
					{
						"name": "EnglishOccupation",
						"type": "nvarchar"
					},
					{
						"name": "SpanishOccupation",
						"type": "nvarchar"
					},
					{
						"name": "FrenchOccupation",
						"type": "nvarchar"
					},
					{
						"name": "HouseOwnerFlag",
						"type": "nvarchar"
					},
					{
						"name": "NumberCarsOwned",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "AddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "Phone",
						"type": "nvarchar"
					},
					{
						"name": "DateFirstPurchase",
						"type": "date"
					},
					{
						"name": "CommuteDistance",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimCustomer_Target"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Dummy_Lookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Testing"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "newcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/reportingSalesOrderHeader')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdventureWorksLT2019",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Staging"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "RevisionNumber",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "OrderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DueDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ShipDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Status",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "OnlineOrderFlag",
						"type": "bit"
					},
					{
						"name": "SalesOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "PurchaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "AccountNumber",
						"type": "nvarchar"
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ShipToAddressID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BillToAddressID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ShipMethod",
						"type": "nvarchar"
					},
					{
						"name": "CreditCardApprovalCode",
						"type": "varchar"
					},
					{
						"name": "SubTotal",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TaxAmt",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Freight",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalDue",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Comment",
						"type": "nvarchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "reporting_SalesOrderHeader"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/rowswritten')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Testing/POCWork"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "rowswritten.txt",
						"container": "newcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/stgCodeTableItem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TargetSandbox",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Staging"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "STG",
					"table": "CODETABLEITEM"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/stgDynamicTarget')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TargetSandbox",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Schema": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Staging"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/stgSourceEmployee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdventureWorksDW",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Testing"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleName",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "HireDate",
						"type": "date"
					},
					{
						"name": "BirthDate",
						"type": "date"
					},
					{
						"name": "Phone",
						"type": "nvarchar"
					},
					{
						"name": "MaritalStatus",
						"type": "nchar"
					},
					{
						"name": "EmergencyContactName",
						"type": "nvarchar"
					},
					{
						"name": "EmergencyContactPhone",
						"type": "nvarchar"
					},
					{
						"name": "SalariedFlag",
						"type": "bit"
					},
					{
						"name": "Gender",
						"type": "nchar"
					},
					{
						"name": "DepartmentName",
						"type": "nvarchar"
					},
					{
						"name": "StartDate",
						"type": "date"
					},
					{
						"name": "EndDate",
						"type": "date"
					},
					{
						"name": "Status",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "stgSourceEmployee"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/targetSalesOrderHeader')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdventureWorksLT2019",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Fact"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Status",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "SalesOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "PurchaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "AccountNumber",
						"type": "nvarchar"
					},
					{
						"name": "CustomerDescription",
						"type": "nvarchar"
					},
					{
						"name": "ShipToAddressDescription",
						"type": "nvarchar"
					},
					{
						"name": "BillToAddressDesciption",
						"type": "nvarchar"
					},
					{
						"name": "ShipMethod",
						"type": "nvarchar"
					},
					{
						"name": "SubTotal",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TaxAmt",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Freight",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalDue",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "target_SalesOrderHeader"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/target_SalesOrderHeader')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdventureWorksLT2019",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Testing"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Status",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "SalesOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "PurchaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "AccountNumber",
						"type": "nvarchar"
					},
					{
						"name": "CustomerDescription",
						"type": "nvarchar"
					},
					{
						"name": "ShipToAddressDescription",
						"type": "nvarchar"
					},
					{
						"name": "BillToAddressDesciption",
						"type": "nvarchar"
					},
					{
						"name": "ShipMethod",
						"type": "nvarchar"
					},
					{
						"name": "SubTotal",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TaxAmt",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Freight",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalDue",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CreatedDate",
						"type": "smalldatetime",
						"precision": 16,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "target_SalesOrderHeader"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/target_SalesOrderHeader_wDate')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdventureWorksLT2019",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Testing"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Status",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "SalesOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "PurchaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "AccountNumber",
						"type": "nvarchar"
					},
					{
						"name": "CustomerDescription",
						"type": "nvarchar"
					},
					{
						"name": "ShipToAddressDescription",
						"type": "nvarchar"
					},
					{
						"name": "BillToAddressDesciption",
						"type": "nvarchar"
					},
					{
						"name": "ShipMethod",
						"type": "nvarchar"
					},
					{
						"name": "SubTotal",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TaxAmt",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Freight",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalDue",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CreatedDate",
						"type": "smalldatetime",
						"precision": 16,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "target_SalesOrderHeader_wDate"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgtDimEmployee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdventureWorksDW",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Testing"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "tgtDimEmployee"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_CaseHeader_Lookups_POC')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Final df POCs"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CodeTables",
								"type": "DatasetReference"
							},
							"name": "vwCodeTables"
						},
						{
							"dataset": {
								"referenceName": "CaseHeader1",
								"type": "DatasetReference"
							},
							"name": "srcCaseHeader"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dummy1",
								"type": "DatasetReference"
							},
							"name": "DummyFile"
						}
					],
					"transformations": [
						{
							"name": "CaseObjective"
						},
						{
							"name": "CaseStatus"
						},
						{
							"name": "CasePriority"
						},
						{
							"name": "CaseOutcome"
						},
						{
							"name": "CaseCatTypeCode"
						},
						{
							"name": "CaseClassification"
						},
						{
							"name": "CaseTypeCode"
						},
						{
							"name": "SelectCaseColumns"
						},
						{
							"name": "LookupCaseObjective"
						},
						{
							"name": "SelectCaseObjective"
						},
						{
							"name": "LookupStatus"
						},
						{
							"name": "SelectCaseStatus"
						},
						{
							"name": "LookupCasePriority"
						},
						{
							"name": "SelectCasePriority"
						},
						{
							"name": "LookupCaseOutcome"
						},
						{
							"name": "SelectCaseOutcome"
						},
						{
							"name": "LookupTypeCode"
						},
						{
							"name": "SelectCaseCatTypeCode"
						},
						{
							"name": "LookupClassification"
						},
						{
							"name": "SelectClassification"
						},
						{
							"name": "LookupCaseTypeCode"
						},
						{
							"name": "SelectCaseTypeCode"
						},
						{
							"name": "TrimCodeFields"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TABLENAME as string,",
						"          CODE as string,",
						"          DESCRIPTION as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> vwCodeTables",
						"source(output(",
						"          APPEALINDICATOR as string,",
						"          CASEID as long,",
						"          INTEGRATEDCASEID as long,",
						"          CASEREFERENCE as string,",
						"          CASETYPECODE as string,",
						"          CLASSIFICATIONCODE as string,",
						"          EXPECTEDOUTCOME as long,",
						"          ACTUALOUTCOME as string,",
						"          OWNERORGOBJECTLINKID as long,",
						"          VERSIONNO as integer,",
						"          LASTWRITTEN as timestamp,",
						"          INTEGRATEDCASETYPE as string,",
						"          OBJECTIVECODE as string,",
						"          OUTCOMECODE as string,",
						"          PLANID as long,",
						"          PRIORITYCODE as string,",
						"          RECEIVEDDATE as date,",
						"          EFFECTIVEDATE as date,",
						"          STATUSCODE as string,",
						"          ENDDATE as date,",
						"          EXPECTEDENDDATE as date,",
						"          EXPECTEDSTARTDATE as date,",
						"          FIRSTREVIEWDATE as date,",
						"          COMMENTS as string,",
						"          CONCERNROLEID as long,",
						"          REGISTRATIONDATE as date,",
						"          STARTDATE as date,",
						"          DEFAULTCURRENCYTYPECODE as string,",
						"          DEFAULTDELIVERYMETHODTYPE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcCaseHeader",
						"vwCodeTables filter(TABLENAME=='CaseObjective') ~> CaseObjective",
						"vwCodeTables filter(TABLENAME=='CaseStatus') ~> CaseStatus",
						"vwCodeTables filter(TABLENAME=='CasePriority') ~> CasePriority",
						"vwCodeTables filter(TABLENAME=='CaseOutcome') ~> CaseOutcome",
						"vwCodeTables filter(TABLENAME=='CaseCatTypeCode') ~> CaseCatTypeCode",
						"vwCodeTables filter(TABLENAME=='CaseClassification') ~> CaseClassification",
						"vwCodeTables filter(TABLENAME=='CaseTypeCode') ~> CaseTypeCode",
						"TrimCodeFields select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          INTEGRATEDCASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          INTEGRATEDCASETYPE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCaseColumns",
						"SelectCaseColumns, CaseObjective lookup(OBJECTIVECODE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupCaseObjective",
						"LookupCaseObjective select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE,",
						"          INTEGRATEDCASETYPE,",
						"          CaseObj_DESCRIPTION = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCaseObjective",
						"SelectCaseObjective, CaseStatus lookup(STATUSCODE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupStatus",
						"LookupStatus select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE,",
						"          INTEGRATEDCASETYPE,",
						"          CaseObj_DESCRIPTION,",
						"          CaseStatus_DESCRIPTION = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCaseStatus",
						"SelectCaseStatus, CasePriority lookup(PRIORITYCODE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupCasePriority",
						"LookupCasePriority select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE,",
						"          INTEGRATEDCASETYPE,",
						"          CaseObj_DESCRIPTION,",
						"          CaseStatus_DESCRIPTION,",
						"          CasePriority_DESCRIPTION = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCasePriority",
						"SelectCasePriority, CaseOutcome lookup(OUTCOMECODE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupCaseOutcome",
						"LookupCaseOutcome select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE,",
						"          INTEGRATEDCASETYPE,",
						"          CaseObj_DESCRIPTION,",
						"          CaseStatus_DESCRIPTION,",
						"          CasePriority_DESCRIPTION,",
						"          CaseOutcome_DESCRIPTION = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCaseOutcome",
						"SelectCaseOutcome, CaseCatTypeCode lookup(INTEGRATEDCASETYPE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupTypeCode",
						"LookupTypeCode select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE,",
						"          INTEGRATEDCASETYPE,",
						"          CaseObj_DESCRIPTION,",
						"          CaseStatus_DESCRIPTION,",
						"          CasePriority_DESCRIPTION,",
						"          CaseOutcome_DESCRIPTION,",
						"          CaseCatType_DESCRIPTION = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCaseCatTypeCode",
						"SelectCaseCatTypeCode, CaseClassification lookup(CLASSIFICATIONCODE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupClassification",
						"LookupClassification select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE,",
						"          INTEGRATEDCASETYPE,",
						"          CaseObj_DESCRIPTION,",
						"          CaseStatus_DESCRIPTION,",
						"          CasePriority_DESCRIPTION,",
						"          CaseOutcome_DESCRIPTION,",
						"          CaseCatType_DESCRIPTION,",
						"          CaseClass_DESCRIPTION = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectClassification",
						"SelectClassification, CaseTypeCode lookup(CASETYPECODE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupCaseTypeCode",
						"LookupCaseTypeCode select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE,",
						"          INTEGRATEDCASETYPE,",
						"          CaseObj_DESCRIPTION,",
						"          CaseStatus_DESCRIPTION,",
						"          CasePriority_DESCRIPTION,",
						"          CaseOutcome_DESCRIPTION,",
						"          CaseCatType_DESCRIPTION,",
						"          CaseClass_DESCRIPTION,",
						"          CaseType_DESCRIPTION = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCaseTypeCode",
						"srcCaseHeader derive(OBJECTIVECODE = trim(OBJECTIVECODE),",
						"          CASETYPECODE = trim(CASETYPECODE),",
						"          CLASSIFICATIONCODE = trim(CLASSIFICATIONCODE),",
						"          INTEGRATEDCASETYPE = trim(INTEGRATEDCASETYPE),",
						"          PRIORITYCODE = trim(PRIORITYCODE),",
						"          STATUSCODE = trim(STATUSCODE),",
						"          OUTCOMECODE = trim(OUTCOMECODE)) ~> TrimCodeFields",
						"SelectCaseTypeCode sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:['CaseHeaderPOC'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> DummyFile"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_CodeTableItem')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Staging"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CodeTableItem",
								"type": "DatasetReference"
							},
							"name": "RptDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "stgCodeTableItem",
								"type": "DatasetReference"
							},
							"name": "StgDB"
						}
					],
					"transformations": [
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"parameters{",
						"     TableName as string ('CODETABLEITEM'),",
						"     SchemaName as string ('CURAPD01'),",
						"     UniqueID as string ('na')",
						"}",
						"source(output(",
						"          TABLENAME as string,",
						"          CODE as string,",
						"          DESCRIPTION as string,",
						"          ANNOTATION as string,",
						"          ISENABLED as string,",
						"          SORTORDER as integer,",
						"          LOCALEIDENTIFIER as string,",
						"          PARENTCODE as string,",
						"          COMMENTS as string,",
						"          VERSIONNO as integer,",
						"          LASTWRITTEN as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     waterMarkColumn: 'LastWritten',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     mode: 'read') ~> RptDB",
						"RptDB alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['TABLENAME','CODE','LOCALEIDENTIFIER'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> StgDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/stgCodeTableItem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Column_Pattern_Matching_For_Trimming_POC')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Final df POCs"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CaseHeader",
								"type": "DatasetReference"
							},
							"name": "srcCaseHeader"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CaseHeader",
								"type": "DatasetReference"
							},
							"name": "tgtSimpleTest"
						}
					],
					"transformations": [
						{
							"name": "drvTrimStringFields"
						},
						{
							"name": "SelectColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          APPEALINDICATOR as string,",
						"          CASEID as long,",
						"          INTEGRATEDCASEID as long,",
						"          CASEREFERENCE as string,",
						"          CASETYPECODE as string,",
						"          CLASSIFICATIONCODE as string,",
						"          EXPECTEDOUTCOME as long,",
						"          ACTUALOUTCOME as string,",
						"          OWNERORGOBJECTLINKID as long,",
						"          VERSIONNO as integer,",
						"          LASTWRITTEN as timestamp,",
						"          INTEGRATEDCASETYPE as string,",
						"          OBJECTIVECODE as string,",
						"          OUTCOMECODE as string,",
						"          PLANID as long,",
						"          PRIORITYCODE as string,",
						"          RECEIVEDDATE as date,",
						"          EFFECTIVEDATE as date,",
						"          STATUSCODE as string,",
						"          ENDDATE as date,",
						"          EXPECTEDENDDATE as date,",
						"          EXPECTEDSTARTDATE as date,",
						"          FIRSTREVIEWDATE as date,",
						"          COMMENTS as string,",
						"          CONCERNROLEID as long,",
						"          REGISTRATIONDATE as date,",
						"          STARTDATE as date,",
						"          DEFAULTCURRENCYTYPECODE as string,",
						"          DEFAULTDELIVERYMETHODTYPE as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcCaseHeader",
						"srcCaseHeader derive(each(match(type=='string'), $$+'_trim' = trim($$))) ~> drvTrimStringFields",
						"drvTrimStringFields select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          INTEGRATEDCASEID,",
						"          CASEREFERENCE,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          EXPECTEDOUTCOME,",
						"          ACTUALOUTCOME,",
						"          OWNERORGOBJECTLINKID,",
						"          VERSIONNO,",
						"          LASTWRITTEN,",
						"          INTEGRATEDCASETYPE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PLANID,",
						"          PRIORITYCODE,",
						"          RECEIVEDDATE,",
						"          EFFECTIVEDATE,",
						"          STATUSCODE,",
						"          ENDDATE,",
						"          EXPECTEDENDDATE,",
						"          EXPECTEDSTARTDATE,",
						"          FIRSTREVIEWDATE,",
						"          COMMENTS,",
						"          CONCERNROLEID,",
						"          REGISTRATIONDATE,",
						"          STARTDATE,",
						"          DEFAULTCURRENCYTYPECODE,",
						"          DEFAULTDELIVERYMETHODTYPE,",
						"          APPEALINDICATOR_trim,",
						"          CASEREFERENCE_trim,",
						"          CASETYPECODE_trim,",
						"          CLASSIFICATIONCODE_trim,",
						"          ACTUALOUTCOME_trim,",
						"          INTEGRATEDCASETYPE_trim,",
						"          OBJECTIVECODE_trim,",
						"          OUTCOMECODE_trim,",
						"          PRIORITYCODE_trim,",
						"          STATUSCODE_trim,",
						"          COMMENTS_trim,",
						"          DEFAULTCURRENCYTYPECODE_trim,",
						"          DEFAULTDELIVERYMETHODTYPE_trim",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"SelectColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          APPEALINDICATOR as string,",
						"          CASEID as long,",
						"          INTEGRATEDCASEID as long,",
						"          CASEREFERENCE as string,",
						"          CASETYPECODE as string,",
						"          CLASSIFICATIONCODE as string,",
						"          EXPECTEDOUTCOME as long,",
						"          ACTUALOUTCOME as string,",
						"          OWNERORGOBJECTLINKID as long,",
						"          VERSIONNO as integer,",
						"          LASTWRITTEN as timestamp,",
						"          INTEGRATEDCASETYPE as string,",
						"          OBJECTIVECODE as string,",
						"          OUTCOMECODE as string,",
						"          PLANID as long,",
						"          PRIORITYCODE as string,",
						"          RECEIVEDDATE as date,",
						"          EFFECTIVEDATE as date,",
						"          STATUSCODE as string,",
						"          ENDDATE as date,",
						"          EXPECTEDENDDATE as date,",
						"          EXPECTEDSTARTDATE as date,",
						"          FIRSTREVIEWDATE as date,",
						"          COMMENTS as string,",
						"          CONCERNROLEID as long,",
						"          REGISTRATIONDATE as date,",
						"          STARTDATE as date,",
						"          DEFAULTCURRENCYTYPECODE as string,",
						"          DEFAULTDELIVERYMETHODTYPE as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('hash', 1)) ~> tgtSimpleTest"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DimEmployer')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Dimensions"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Employer",
								"type": "DatasetReference"
							},
							"name": "srcEmployer"
						},
						{
							"dataset": {
								"referenceName": "ConcernRole",
								"type": "DatasetReference"
							},
							"name": "srcConcernRole"
						},
						{
							"dataset": {
								"referenceName": "Address",
								"type": "DatasetReference"
							},
							"name": "srcAddress"
						},
						{
							"dataset": {
								"referenceName": "Location",
								"type": "DatasetReference"
							},
							"name": "srcLocation"
						},
						{
							"dataset": {
								"referenceName": "SDRegion",
								"type": "DatasetReference"
							},
							"name": "srcSDRegion"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimensionTargetTesting",
								"type": "DatasetReference"
							},
							"name": "tgtDimEmployer"
						}
					],
					"transformations": [
						{
							"name": "SelectSourceColumns"
						},
						{
							"name": "LookupPrimaryAddressID"
						},
						{
							"name": "SelectPrimaryAddressID"
						},
						{
							"name": "LookupAddress"
						},
						{
							"name": "SelectAddress"
						},
						{
							"name": "drvTrimColumns"
						},
						{
							"name": "SelectTgtColumns"
						},
						{
							"name": "LookupSDRegion"
						},
						{
							"name": "SelectRegion"
						},
						{
							"name": "SelectRegionLocation"
						},
						{
							"name": "LookupRegion"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CONCERNROLEID as long,",
						"          REGISTEREDNAME as string,",
						"          TRADINGNAME as string,",
						"          INDUSTRYTYPE as string,",
						"          COMPANYTYPE as string,",
						"          BUSINESSDESC as string,",
						"          UPPERTRADINGNAME as string,",
						"          UPPERREGISTEREDNAME as string,",
						"          VERSIONNO as integer,",
						"          LASTWRITTEN as timestamp,",
						"          NUMBERCASUALSTAFF as integer,",
						"          PINNUMBER as string,",
						"          PAYMENTFREQUENCY as string,",
						"          NEXTPAYMENTDATE as date,",
						"          CURRENCYTYPE as string,",
						"          METHODOFPMTCODE as string,",
						"          SPECIALINTERESTCODE as string,",
						"          EXEMPTIONIND as string,",
						"          STATUSCODE as string,",
						"          COMMENTS as string,",
						"          PRIMARYALTERNATEID as string,",
						"          NUMBERPERMANENTSTAFF as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcEmployer",
						"source(output(",
						"          CONCERNID as long,",
						"          CONCERNROLEID as long,",
						"          CONCERNROLETYPE as string,",
						"          CREATIONDATE as date,",
						"          REGISTRATIONDATE as date,",
						"          STARTDATE as date,",
						"          LASTWRITTEN as timestamp,",
						"          SENSITIVITY as string,",
						"          PREFCOMMMETHOD as string,",
						"          PREFCOMMFROMDATE as date,",
						"          PREFCOMMTODATE as date,",
						"          PRIMARYWEBADDRESSID as long,",
						"          VERSIONNO as integer,",
						"          PRIMARYPHONENUMBERID as long,",
						"          PRIMARYEMAILADDRESSID as long,",
						"          PRIMARYBANKACCOUNTID as long,",
						"          REGUSERNAME as string,",
						"          PREFPUBLICOFFICEID as long,",
						"          PREFERREDLANGUAGE as string,",
						"          ENDDATE as date,",
						"          STATUSCODE as string,",
						"          CONCERNROLENAME as string,",
						"          PRIMARYADDRESSID as long,",
						"          PRIMARYALTERNATEID as string,",
						"          COMMENTS as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcConcernRole",
						"source(output(",
						"          ADDRESSID as long,",
						"          ADDRESS1 as string,",
						"          ADDRESS2 as string,",
						"          ADDRESS3 as string,",
						"          CITY as string,",
						"          STATE as string,",
						"          USCOUNTY as string,",
						"          ZIP as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcAddress",
						"source(output(",
						"          LOCATIONID as long,",
						"          NAME as string,",
						"          ADDRESSID as long,",
						"          DESCRIPTION as string,",
						"          STATUSCODE as string,",
						"          LOCATIONSTATUS as string,",
						"          CREATIONDATE as date,",
						"          LOCATIONTYPE as string,",
						"          PARENTLOCATIONID as long,",
						"          ORGANISATIONID as long,",
						"          ADDRESSCOMMENTS as string,",
						"          CREATELOCATIONSID as string,",
						"          MAINTAINSID as string,",
						"          READSID as string,",
						"          LOCATIONSTRUCTUREID as long,",
						"          PUBLICOFFICEINDICATOR as string,",
						"          PHONENUMBERID as long,",
						"          FAXNUMBERID as long,",
						"          EMAILADDRESSID as long,",
						"          ROOTLOCATIONINDICATOR as string,",
						"          UPPERNAME as string,",
						"          VERSIONNO as integer,",
						"          LASTWRITTEN as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcLocation",
						"source(output(",
						"          SDREGIONID as long,",
						"          SDLOCATIONID as long,",
						"          SDREGIONNAME as string,",
						"          SDAPPLICATIONTYPE as string,",
						"          LASTWRITTEN as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcSDRegion",
						"srcEmployer select(mapColumn(",
						"          CONCERNROLEID,",
						"          COMPANYTYPE,",
						"          BUSINESSDESC,",
						"          UPPERREGISTEREDNAME,",
						"          PRIMARYALTERNATEID,",
						"          NUMBERPERMANENTSTAFF,",
						"          REGISTEREDNAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSourceColumns",
						"SelectSourceColumns, srcConcernRole lookup(SelectSourceColumns@CONCERNROLEID == srcConcernRole@CONCERNROLEID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupPrimaryAddressID",
						"LookupPrimaryAddressID select(mapColumn(",
						"          CONCERNROLEID = SelectSourceColumns@CONCERNROLEID,",
						"          COMPANYTYPE,",
						"          BUSINESSDESC,",
						"          UPPERREGISTEREDNAME,",
						"          PRIMARYADDRESSID,",
						"          REGISTEREDNAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPrimaryAddressID",
						"SelectPrimaryAddressID, srcAddress lookup(PRIMARYADDRESSID == ADDRESSID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupAddress",
						"LookupAddress select(mapColumn(",
						"          CONCERNROLEID,",
						"          COMPANYTYPE,",
						"          ADDRESSID,",
						"          BUSINESSDESC,",
						"          REGISTEREDNAME,",
						"          UPPERREGISTEREDNAME,",
						"          ADDRESS1,",
						"          ADDRESS2,",
						"          ADDRESS3,",
						"          CITY,",
						"          STATE,",
						"          USCOUNTY,",
						"          ZIP",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAddress",
						"SelectRegionLocation derive(each(match(type=='string'), $$+'_Trim_Null' = iifNull(trim($$),'NA')),",
						"          ModifiedDate = currentUTC()) ~> drvTrimColumns",
						"drvTrimColumns select(mapColumn(",
						"          ConcernRoleID = CONCERNROLEID,",
						"          AddressID = ADDRESSID,",
						"          EmployerName = REGISTEREDNAME_Trim_Null,",
						"          EmployerAddress1 = ADDRESS1_Trim_Null,",
						"          EmployerAddress2 = ADDRESS2_Trim_Null,",
						"          EmployerCity = CITY_Trim_Null,",
						"          EmployerState = STATE_Trim_Null,",
						"          EmployerUSCounty = USCOUNTY_Trim_Null,",
						"          EmployerZip = ZIP_Trim_Null,",
						"          EmployerLocation = LOCATION_Trim_Null,",
						"          EmployerRegion = SDREGIONNAME_Trim_Null,",
						"          ModifiedDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTgtColumns",
						"srcLocation, srcSDRegion lookup(LOCATIONID == SDLOCATIONID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupSDRegion",
						"LookupSDRegion select(mapColumn(",
						"          NAME,",
						"          ADDRESSID,",
						"          SDREGIONNAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRegion",
						"LookupRegion select(mapColumn(",
						"          CONCERNROLEID,",
						"          ADDRESSID = SelectAddress@ADDRESSID,",
						"          COMPANYTYPE,",
						"          BUSINESSDESC,",
						"          REGISTEREDNAME,",
						"          UPPERREGISTEREDNAME,",
						"          ADDRESS1,",
						"          ADDRESS2,",
						"          ADDRESS3,",
						"          CITY,",
						"          STATE,",
						"          USCOUNTY,",
						"          ZIP,",
						"          LOCATION = NAME,",
						"          SDREGIONNAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRegionLocation",
						"SelectAddress, SelectRegion lookup(SelectAddress@ADDRESSID == SelectRegion@ADDRESSID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupRegion",
						"SelectTgtColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string",
						"     ),",
						"     partitionFileNames:['DimEmployer.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> tgtDimEmployer"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DimPlaceHolder')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Final df POCs"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "reportingSalesOrderHeader",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dummy",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/reportingSalesOrderHeader')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DimSanction')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Dimensions"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CodeTables",
								"type": "DatasetReference"
							},
							"name": "vwCodeTables"
						},
						{
							"dataset": {
								"referenceName": "Sanction",
								"type": "DatasetReference"
							},
							"name": "srcSantion"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimensionTargetTesting",
								"type": "DatasetReference"
							},
							"name": "tgtDimSanction"
						}
					],
					"transformations": [
						{
							"name": "SanctionReason"
						},
						{
							"name": "SanctionLevel"
						},
						{
							"name": "RecordStatus"
						},
						{
							"name": "SanctionProgram"
						},
						{
							"name": "SelectSrcColumns"
						},
						{
							"name": "drvTrimFields"
						},
						{
							"name": "SelectTrimColumns"
						},
						{
							"name": "LookupProgram"
						},
						{
							"name": "SelectProgram"
						},
						{
							"name": "LookupRecordStatus"
						},
						{
							"name": "SelectRecordStatus"
						},
						{
							"name": "LookupLevel"
						},
						{
							"name": "SelectLevel"
						},
						{
							"name": "LookupReason"
						},
						{
							"name": "SelectReason"
						},
						{
							"name": "drvNullValues"
						},
						{
							"name": "SelectNullValues"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TABLENAME as string,",
						"          CODE as string,",
						"          DESCRIPTION as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> vwCodeTables",
						"source(output(",
						"          SANCTIONID as long,",
						"          CONCERNROLEID as long,",
						"          SANCTIONREASON as string,",
						"          SANCTIONLEVEL as string,",
						"          SANCTIONSTARTDATE as timestamp,",
						"          SANCTIONENDDATE as timestamp,",
						"          COMMENTS as string,",
						"          STATUSCODE as string,",
						"          PROGRAM as string,",
						"          NUMBEROFMONTHS as integer,",
						"          CASEID as long,",
						"          NONCOMPLIANTCONCERNROLEID as long,",
						"          CONCILIATIONPROCIND as string,",
						"          CREATEDBY as string,",
						"          CREATEDON as timestamp,",
						"          VERSIONNO as integer,",
						"          LASTWRITTEN as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcSantion",
						"vwCodeTables filter(TABLENAME=='SanctionReason') ~> SanctionReason",
						"vwCodeTables filter(TABLENAME=='SanctionLevel') ~> SanctionLevel",
						"vwCodeTables filter(TABLENAME=='RecordStatus') ~> RecordStatus",
						"vwCodeTables filter(TABLENAME=='SanctionProgram') ~> SanctionProgram",
						"srcSantion select(mapColumn(",
						"          SANCTIONID,",
						"          CONCERNROLEID,",
						"          SANCTIONREASON,",
						"          SANCTIONLEVEL,",
						"          SANCTIONSTARTDATE,",
						"          SANCTIONENDDATE,",
						"          STATUSCODE,",
						"          PROGRAM,",
						"          SanctionConciliationFlag = CONCILIATIONPROCIND",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSrcColumns",
						"SelectSrcColumns derive(each(match(type=='string'), $$+'_Trim' = trim($$))) ~> drvTrimFields",
						"drvTrimFields select(mapColumn(",
						"          SANCTIONID,",
						"          CONCERNROLEID,",
						"          SanctionConciliationFlag,",
						"          SANCTIONSTARTDATE,",
						"          SANCTIONENDDATE,",
						"          SANCTIONREASON_Trim,",
						"          SANCTIONLEVEL_Trim,",
						"          STATUSCODE_Trim,",
						"          PROGRAM_Trim",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTrimColumns",
						"SelectTrimColumns, SanctionProgram lookup(PROGRAM_Trim == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupProgram",
						"LookupProgram select(mapColumn(",
						"          SANCTIONID,",
						"          CONCERNROLEID,",
						"          SanctionConciliationFlag,",
						"          SANCTIONSTARTDATE,",
						"          SANCTIONENDDATE,",
						"          SANCTIONREASON_Trim,",
						"          SANCTIONLEVEL_Trim,",
						"          STATUSCODE_Trim,",
						"          SanctionProgramType = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectProgram",
						"SelectProgram, RecordStatus lookup(STATUSCODE_Trim == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupRecordStatus",
						"LookupRecordStatus select(mapColumn(",
						"          SANCTIONID,",
						"          CONCERNROLEID,",
						"          SanctionConciliationFlag,",
						"          SANCTIONSTARTDATE,",
						"          SANCTIONENDDATE,",
						"          SANCTIONREASON_Trim,",
						"          SANCTIONLEVEL_Trim,",
						"          STATUSCODE_Trim,",
						"          SanctionProgramType,",
						"          SanctionRecordStatus = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRecordStatus",
						"SelectRecordStatus, SanctionLevel lookup(SANCTIONLEVEL_Trim == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupLevel",
						"LookupLevel select(mapColumn(",
						"          SANCTIONID,",
						"          CONCERNROLEID,",
						"          SanctionConciliationFlag,",
						"          SANCTIONSTARTDATE,",
						"          SANCTIONENDDATE,",
						"          SANCTIONREASON_Trim,",
						"          SANCTIONLEVEL_Trim,",
						"          STATUSCODE_Trim,",
						"          SanctionProgramType,",
						"          SanctionRecordStatus,",
						"          SanctionLevel = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectLevel",
						"SelectLevel, SanctionReason lookup(SANCTIONREASON_Trim == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupReason",
						"LookupReason select(mapColumn(",
						"          SANCTIONID,",
						"          CONCERNROLEID,",
						"          SanctionConciliationFlag,",
						"          SANCTIONSTARTDATE,",
						"          SANCTIONENDDATE,",
						"          SANCTIONREASON_Trim,",
						"          SANCTIONLEVEL_Trim,",
						"          STATUSCODE_Trim,",
						"          SanctionProgramType,",
						"          SanctionRecordStatus,",
						"          SanctionLevel,",
						"          SanctionReason = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectReason",
						"SelectReason derive(ModifiedDate = currentUTC(),",
						"          each(match(type=='string'), $$+'_null' = iifNull($$,'NA'))) ~> drvNullValues",
						"drvNullValues select(mapColumn(",
						"          SanctionID = SANCTIONID,",
						"          ConcernRoleID = CONCERNROLEID,",
						"          SanctionConciliationFlag,",
						"          SanctionStartDate = SANCTIONSTARTDATE,",
						"          SanctionEndDate = SANCTIONENDDATE,",
						"          ModifiedDate,",
						"          SanctionProgramType = SanctionProgramType_null,",
						"          SanctionRecordStatus = SanctionRecordStatus_null,",
						"          SanctionLevel = SanctionLevel_null,",
						"          SanctionReason = SanctionReason_null",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectNullValues",
						"SelectNullValues sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string",
						"     ),",
						"     partitionFileNames:['DimSanction.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> tgtDimSanction"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DimSuspension')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Dimensions"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CodeTableItem",
								"type": "DatasetReference"
							},
							"name": "vwCodeTables"
						},
						{
							"dataset": {
								"referenceName": "SDSuspension",
								"type": "DatasetReference"
							},
							"name": "srcSuspension"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimensionTargetTesting",
								"type": "DatasetReference"
							},
							"name": "tgtDimSuspension"
						}
					],
					"transformations": [
						{
							"name": "POIProgram"
						},
						{
							"name": "SelectSrcColumns"
						},
						{
							"name": "LookupReason"
						},
						{
							"name": "SelectReason"
						},
						{
							"name": "LookupProgram"
						},
						{
							"name": "SelectProgram"
						},
						{
							"name": "SDSuspensionReason"
						},
						{
							"name": "drvTrimColumns"
						},
						{
							"name": "SelectDrvColumns"
						},
						{
							"name": "drvNullValues"
						},
						{
							"name": "SelectNullColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TABLENAME as string,",
						"          CODE as string,",
						"          DESCRIPTION as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> vwCodeTables",
						"source(output(",
						"          SDSUSPENSIONID as long,",
						"          COMMENTS as string,",
						"          CONCERNROLEID as long,",
						"          CREATEDBY as string,",
						"          ENDDATE as date,",
						"          STARTDATE as date,",
						"          STATUSCODE as string,",
						"          REASON as string,",
						"          PROGRAM as string,",
						"          CASEID as long,",
						"          LASTWRITTEN as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcSuspension",
						"vwCodeTables filter(TABLENAME=='POIProgram') ~> POIProgram",
						"srcSuspension select(mapColumn(",
						"          SDSUSPENSIONID,",
						"          ENDDATE,",
						"          STARTDATE,",
						"          STATUSCODE,",
						"          REASON,",
						"          PROGRAM",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSrcColumns",
						"SelectDrvColumns, SDSuspensionReason lookup(REASON_Trim == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupReason",
						"LookupReason select(mapColumn(",
						"          SDSUSPENSIONID,",
						"          ENDDATE,",
						"          STARTDATE,",
						"          STATUSCODE,",
						"          REASON,",
						"          PROGRAM,",
						"          STATUSCODE_Trim,",
						"          REASON_Trim,",
						"          PROGRAM_Trim,",
						"          ReasonDescription = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectReason",
						"SelectReason, POIProgram lookup(PROGRAM_Trim == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupProgram",
						"LookupProgram select(mapColumn(",
						"          SuspensionID = SDSUSPENSIONID,",
						"          SuspensionEndDate = ENDDATE,",
						"          SuspensionStartDate = STARTDATE,",
						"          SuspensionReason = ReasonDescription,",
						"          SuspensionProgramType = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectProgram",
						"vwCodeTables filter(TABLENAME=='SDSuspensionReason') ~> SDSuspensionReason",
						"SelectSrcColumns derive(each(match(type=='string'), $$+'_Trim' = trim($$))) ~> drvTrimColumns",
						"drvTrimColumns select(mapColumn(",
						"          SDSUSPENSIONID,",
						"          ENDDATE,",
						"          STARTDATE,",
						"          STATUSCODE,",
						"          REASON,",
						"          PROGRAM,",
						"          STATUSCODE_Trim,",
						"          REASON_Trim,",
						"          PROGRAM_Trim",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectDrvColumns",
						"SelectProgram derive(each(match(type=='string'), $$+'_null' = iifNull($$,'NA')),",
						"          ModifiedDate = currentUTC()) ~> drvNullValues",
						"drvNullValues select(mapColumn(",
						"          SuspensionID,",
						"          SuspensionEndDate,",
						"          SuspensionStartDate,",
						"          SuspensionReason = SuspensionReason_null,",
						"          SuspensionProgramType = SuspensionProgramType_null,",
						"          ModifiedDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectNullColumns",
						"SelectNullColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string",
						"     ),",
						"     partitionFileNames:['DimSuspension'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> tgtDimSuspension"
					]
				}
			},
			"dependsOn": []
		}
	]
}