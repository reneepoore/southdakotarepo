{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "RP-SouthDakota-POC"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/stgDynamicTarget')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TargetSandbox",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Schema": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Staging"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/stgSourceEmployee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdventureWorksDW",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Testing"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleName",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "HireDate",
						"type": "date"
					},
					{
						"name": "BirthDate",
						"type": "date"
					},
					{
						"name": "Phone",
						"type": "nvarchar"
					},
					{
						"name": "MaritalStatus",
						"type": "nchar"
					},
					{
						"name": "EmergencyContactName",
						"type": "nvarchar"
					},
					{
						"name": "EmergencyContactPhone",
						"type": "nvarchar"
					},
					{
						"name": "SalariedFlag",
						"type": "bit"
					},
					{
						"name": "Gender",
						"type": "nchar"
					},
					{
						"name": "DepartmentName",
						"type": "nvarchar"
					},
					{
						"name": "StartDate",
						"type": "date"
					},
					{
						"name": "EndDate",
						"type": "date"
					},
					{
						"name": "Status",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "stgSourceEmployee"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/targetSalesOrderHeader')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdventureWorksLT2019",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Fact"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Status",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "SalesOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "PurchaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "AccountNumber",
						"type": "nvarchar"
					},
					{
						"name": "CustomerDescription",
						"type": "nvarchar"
					},
					{
						"name": "ShipToAddressDescription",
						"type": "nvarchar"
					},
					{
						"name": "BillToAddressDesciption",
						"type": "nvarchar"
					},
					{
						"name": "ShipMethod",
						"type": "nvarchar"
					},
					{
						"name": "SubTotal",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TaxAmt",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Freight",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalDue",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "target_SalesOrderHeader"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/target_SalesOrderHeader')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdventureWorksLT2019",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Testing"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Status",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "SalesOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "PurchaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "AccountNumber",
						"type": "nvarchar"
					},
					{
						"name": "CustomerDescription",
						"type": "nvarchar"
					},
					{
						"name": "ShipToAddressDescription",
						"type": "nvarchar"
					},
					{
						"name": "BillToAddressDesciption",
						"type": "nvarchar"
					},
					{
						"name": "ShipMethod",
						"type": "nvarchar"
					},
					{
						"name": "SubTotal",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TaxAmt",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Freight",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalDue",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CreatedDate",
						"type": "smalldatetime",
						"precision": 16,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "target_SalesOrderHeader"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/target_SalesOrderHeader_wDate')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdventureWorksLT2019",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Testing"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Status",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "SalesOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "PurchaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "AccountNumber",
						"type": "nvarchar"
					},
					{
						"name": "CustomerDescription",
						"type": "nvarchar"
					},
					{
						"name": "ShipToAddressDescription",
						"type": "nvarchar"
					},
					{
						"name": "BillToAddressDesciption",
						"type": "nvarchar"
					},
					{
						"name": "ShipMethod",
						"type": "nvarchar"
					},
					{
						"name": "SubTotal",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TaxAmt",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Freight",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "TotalDue",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CreatedDate",
						"type": "smalldatetime",
						"precision": 16,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "target_SalesOrderHeader_wDate"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgtDimEmployee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdventureWorksDW",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Testing"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "tgtDimEmployee"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_CaseHeader_Lookups_POC')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Final df POCs"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CodeTables",
								"type": "DatasetReference"
							},
							"name": "vwCodeTables"
						},
						{
							"dataset": {
								"referenceName": "CaseHeader1",
								"type": "DatasetReference"
							},
							"name": "srcCaseHeader"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dummy1",
								"type": "DatasetReference"
							},
							"name": "DummyFile"
						}
					],
					"transformations": [
						{
							"name": "CaseObjective"
						},
						{
							"name": "CaseStatus"
						},
						{
							"name": "CasePriority"
						},
						{
							"name": "CaseOutcome"
						},
						{
							"name": "CaseCatTypeCode"
						},
						{
							"name": "CaseClassification"
						},
						{
							"name": "CaseTypeCode"
						},
						{
							"name": "SelectCaseColumns"
						},
						{
							"name": "LookupCaseObjective"
						},
						{
							"name": "SelectCaseObjective"
						},
						{
							"name": "LookupStatus"
						},
						{
							"name": "SelectCaseStatus"
						},
						{
							"name": "LookupCasePriority"
						},
						{
							"name": "SelectCasePriority"
						},
						{
							"name": "LookupCaseOutcome"
						},
						{
							"name": "SelectCaseOutcome"
						},
						{
							"name": "LookupTypeCode"
						},
						{
							"name": "SelectCaseCatTypeCode"
						},
						{
							"name": "LookupClassification"
						},
						{
							"name": "SelectClassification"
						},
						{
							"name": "LookupCaseTypeCode"
						},
						{
							"name": "SelectCaseTypeCode"
						},
						{
							"name": "TrimCodeFields"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TABLENAME as string,",
						"          CODE as string,",
						"          DESCRIPTION as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> vwCodeTables",
						"source(output(",
						"          APPEALINDICATOR as string,",
						"          CASEID as long,",
						"          INTEGRATEDCASEID as long,",
						"          CASEREFERENCE as string,",
						"          CASETYPECODE as string,",
						"          CLASSIFICATIONCODE as string,",
						"          EXPECTEDOUTCOME as long,",
						"          ACTUALOUTCOME as string,",
						"          OWNERORGOBJECTLINKID as long,",
						"          VERSIONNO as integer,",
						"          LASTWRITTEN as timestamp,",
						"          INTEGRATEDCASETYPE as string,",
						"          OBJECTIVECODE as string,",
						"          OUTCOMECODE as string,",
						"          PLANID as long,",
						"          PRIORITYCODE as string,",
						"          RECEIVEDDATE as date,",
						"          EFFECTIVEDATE as date,",
						"          STATUSCODE as string,",
						"          ENDDATE as date,",
						"          EXPECTEDENDDATE as date,",
						"          EXPECTEDSTARTDATE as date,",
						"          FIRSTREVIEWDATE as date,",
						"          COMMENTS as string,",
						"          CONCERNROLEID as long,",
						"          REGISTRATIONDATE as date,",
						"          STARTDATE as date,",
						"          DEFAULTCURRENCYTYPECODE as string,",
						"          DEFAULTDELIVERYMETHODTYPE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcCaseHeader",
						"vwCodeTables filter(TABLENAME=='CaseObjective') ~> CaseObjective",
						"vwCodeTables filter(TABLENAME=='CaseStatus') ~> CaseStatus",
						"vwCodeTables filter(TABLENAME=='CasePriority') ~> CasePriority",
						"vwCodeTables filter(TABLENAME=='CaseOutcome') ~> CaseOutcome",
						"vwCodeTables filter(TABLENAME=='CaseCatTypeCode') ~> CaseCatTypeCode",
						"vwCodeTables filter(TABLENAME=='CaseClassification') ~> CaseClassification",
						"vwCodeTables filter(TABLENAME=='CaseTypeCode') ~> CaseTypeCode",
						"TrimCodeFields select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          INTEGRATEDCASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          INTEGRATEDCASETYPE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCaseColumns",
						"SelectCaseColumns, CaseObjective lookup(OBJECTIVECODE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupCaseObjective",
						"LookupCaseObjective select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE,",
						"          INTEGRATEDCASETYPE,",
						"          CaseObj_DESCRIPTION = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCaseObjective",
						"SelectCaseObjective, CaseStatus lookup(STATUSCODE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupStatus",
						"LookupStatus select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE,",
						"          INTEGRATEDCASETYPE,",
						"          CaseObj_DESCRIPTION,",
						"          CaseStatus_DESCRIPTION = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCaseStatus",
						"SelectCaseStatus, CasePriority lookup(PRIORITYCODE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupCasePriority",
						"LookupCasePriority select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE,",
						"          INTEGRATEDCASETYPE,",
						"          CaseObj_DESCRIPTION,",
						"          CaseStatus_DESCRIPTION,",
						"          CasePriority_DESCRIPTION = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCasePriority",
						"SelectCasePriority, CaseOutcome lookup(OUTCOMECODE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupCaseOutcome",
						"LookupCaseOutcome select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE,",
						"          INTEGRATEDCASETYPE,",
						"          CaseObj_DESCRIPTION,",
						"          CaseStatus_DESCRIPTION,",
						"          CasePriority_DESCRIPTION,",
						"          CaseOutcome_DESCRIPTION = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCaseOutcome",
						"SelectCaseOutcome, CaseCatTypeCode lookup(INTEGRATEDCASETYPE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupTypeCode",
						"LookupTypeCode select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE,",
						"          INTEGRATEDCASETYPE,",
						"          CaseObj_DESCRIPTION,",
						"          CaseStatus_DESCRIPTION,",
						"          CasePriority_DESCRIPTION,",
						"          CaseOutcome_DESCRIPTION,",
						"          CaseCatType_DESCRIPTION = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCaseCatTypeCode",
						"SelectCaseCatTypeCode, CaseClassification lookup(CLASSIFICATIONCODE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupClassification",
						"LookupClassification select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE,",
						"          INTEGRATEDCASETYPE,",
						"          CaseObj_DESCRIPTION,",
						"          CaseStatus_DESCRIPTION,",
						"          CasePriority_DESCRIPTION,",
						"          CaseOutcome_DESCRIPTION,",
						"          CaseCatType_DESCRIPTION,",
						"          CaseClass_DESCRIPTION = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectClassification",
						"SelectClassification, CaseTypeCode lookup(CASETYPECODE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupCaseTypeCode",
						"LookupCaseTypeCode select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE,",
						"          INTEGRATEDCASETYPE,",
						"          CaseObj_DESCRIPTION,",
						"          CaseStatus_DESCRIPTION,",
						"          CasePriority_DESCRIPTION,",
						"          CaseOutcome_DESCRIPTION,",
						"          CaseCatType_DESCRIPTION,",
						"          CaseClass_DESCRIPTION,",
						"          CaseType_DESCRIPTION = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCaseTypeCode",
						"srcCaseHeader derive(OBJECTIVECODE = trim(OBJECTIVECODE),",
						"          CASETYPECODE = trim(CASETYPECODE),",
						"          CLASSIFICATIONCODE = trim(CLASSIFICATIONCODE),",
						"          INTEGRATEDCASETYPE = trim(INTEGRATEDCASETYPE),",
						"          PRIORITYCODE = trim(PRIORITYCODE),",
						"          STATUSCODE = trim(STATUSCODE),",
						"          OUTCOMECODE = trim(OUTCOMECODE)) ~> TrimCodeFields",
						"SelectCaseTypeCode sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:['CaseHeaderPOC'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> DummyFile"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_CodeTableItem')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Staging"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CodeTableItem",
								"type": "DatasetReference"
							},
							"name": "RptDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "stgCodeTableItem",
								"type": "DatasetReference"
							},
							"name": "StgDB"
						}
					],
					"transformations": [
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"parameters{",
						"     TableName as string ('CODETABLEITEM'),",
						"     SchemaName as string ('CURAPD01'),",
						"     UniqueID as string ('na')",
						"}",
						"source(output(",
						"          TABLENAME as string,",
						"          CODE as string,",
						"          DESCRIPTION as string,",
						"          ANNOTATION as string,",
						"          ISENABLED as string,",
						"          SORTORDER as integer,",
						"          LOCALEIDENTIFIER as string,",
						"          PARENTCODE as string,",
						"          COMMENTS as string,",
						"          VERSIONNO as integer,",
						"          LASTWRITTEN as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     waterMarkColumn: 'LastWritten',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     mode: 'read') ~> RptDB",
						"RptDB alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['TABLENAME','CODE','LOCALEIDENTIFIER'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> StgDB"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Column_Pattern_Matching_For_Trimming_POC')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Final df POCs"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CaseHeader",
								"type": "DatasetReference"
							},
							"name": "srcCaseHeader"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "CaseHeader",
								"type": "DatasetReference"
							},
							"name": "tgtSimpleTest"
						}
					],
					"transformations": [
						{
							"name": "drvTrimStringFields"
						},
						{
							"name": "SelectColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          APPEALINDICATOR as string,",
						"          CASEID as long,",
						"          INTEGRATEDCASEID as long,",
						"          CASEREFERENCE as string,",
						"          CASETYPECODE as string,",
						"          CLASSIFICATIONCODE as string,",
						"          EXPECTEDOUTCOME as long,",
						"          ACTUALOUTCOME as string,",
						"          OWNERORGOBJECTLINKID as long,",
						"          VERSIONNO as integer,",
						"          LASTWRITTEN as timestamp,",
						"          INTEGRATEDCASETYPE as string,",
						"          OBJECTIVECODE as string,",
						"          OUTCOMECODE as string,",
						"          PLANID as long,",
						"          PRIORITYCODE as string,",
						"          RECEIVEDDATE as date,",
						"          EFFECTIVEDATE as date,",
						"          STATUSCODE as string,",
						"          ENDDATE as date,",
						"          EXPECTEDENDDATE as date,",
						"          EXPECTEDSTARTDATE as date,",
						"          FIRSTREVIEWDATE as date,",
						"          COMMENTS as string,",
						"          CONCERNROLEID as long,",
						"          REGISTRATIONDATE as date,",
						"          STARTDATE as date,",
						"          DEFAULTCURRENCYTYPECODE as string,",
						"          DEFAULTDELIVERYMETHODTYPE as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcCaseHeader",
						"srcCaseHeader derive(each(match(type=='string'), $$+'_trim' = trim($$))) ~> drvTrimStringFields",
						"drvTrimStringFields select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          INTEGRATEDCASEID,",
						"          CASEREFERENCE,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          EXPECTEDOUTCOME,",
						"          ACTUALOUTCOME,",
						"          OWNERORGOBJECTLINKID,",
						"          VERSIONNO,",
						"          LASTWRITTEN,",
						"          INTEGRATEDCASETYPE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PLANID,",
						"          PRIORITYCODE,",
						"          RECEIVEDDATE,",
						"          EFFECTIVEDATE,",
						"          STATUSCODE,",
						"          ENDDATE,",
						"          EXPECTEDENDDATE,",
						"          EXPECTEDSTARTDATE,",
						"          FIRSTREVIEWDATE,",
						"          COMMENTS,",
						"          CONCERNROLEID,",
						"          REGISTRATIONDATE,",
						"          STARTDATE,",
						"          DEFAULTCURRENCYTYPECODE,",
						"          DEFAULTDELIVERYMETHODTYPE,",
						"          APPEALINDICATOR_trim,",
						"          CASEREFERENCE_trim,",
						"          CASETYPECODE_trim,",
						"          CLASSIFICATIONCODE_trim,",
						"          ACTUALOUTCOME_trim,",
						"          INTEGRATEDCASETYPE_trim,",
						"          OBJECTIVECODE_trim,",
						"          OUTCOMECODE_trim,",
						"          PRIORITYCODE_trim,",
						"          STATUSCODE_trim,",
						"          COMMENTS_trim,",
						"          DEFAULTCURRENCYTYPECODE_trim,",
						"          DEFAULTDELIVERYMETHODTYPE_trim",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"SelectColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          APPEALINDICATOR as string,",
						"          CASEID as long,",
						"          INTEGRATEDCASEID as long,",
						"          CASEREFERENCE as string,",
						"          CASETYPECODE as string,",
						"          CLASSIFICATIONCODE as string,",
						"          EXPECTEDOUTCOME as long,",
						"          ACTUALOUTCOME as string,",
						"          OWNERORGOBJECTLINKID as long,",
						"          VERSIONNO as integer,",
						"          LASTWRITTEN as timestamp,",
						"          INTEGRATEDCASETYPE as string,",
						"          OBJECTIVECODE as string,",
						"          OUTCOMECODE as string,",
						"          PLANID as long,",
						"          PRIORITYCODE as string,",
						"          RECEIVEDDATE as date,",
						"          EFFECTIVEDATE as date,",
						"          STATUSCODE as string,",
						"          ENDDATE as date,",
						"          EXPECTEDENDDATE as date,",
						"          EXPECTEDSTARTDATE as date,",
						"          FIRSTREVIEWDATE as date,",
						"          COMMENTS as string,",
						"          CONCERNROLEID as long,",
						"          REGISTRATIONDATE as date,",
						"          STARTDATE as date,",
						"          DEFAULTCURRENCYTYPECODE as string,",
						"          DEFAULTDELIVERYMETHODTYPE as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('hash', 1)) ~> tgtSimpleTest"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DimPlaceHolder')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Dimensions"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "reportingSalesOrderHeader",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dummy",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DimTask')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Final df POCs"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CodeTables",
								"type": "DatasetReference"
							},
							"name": "vwCodeTables"
						},
						{
							"dataset": {
								"referenceName": "Task",
								"type": "DatasetReference"
							},
							"name": "srcTask"
						},
						{
							"dataset": {
								"referenceName": "TaskDefinition",
								"type": "DatasetReference"
							},
							"name": "srcTaskDefinition"
						},
						{
							"dataset": {
								"referenceName": "TaskAssignment",
								"type": "DatasetReference"
							},
							"name": "srcTaskAssignment"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimensionTargetTesting",
								"type": "DatasetReference"
							},
							"name": "trgDimTask"
						}
					],
					"transformations": [
						{
							"name": "TargetItemType"
						},
						{
							"name": "TaskCategoryCode"
						},
						{
							"name": "TaskChangeType"
						},
						{
							"name": "TaskPriority"
						},
						{
							"name": "TaskStatus"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "drvTrimStringFields"
						},
						{
							"name": "LookupStatus",
							"description": "Lookup Status Code"
						},
						{
							"name": "LookupPriority"
						},
						{
							"name": "SelectStatus"
						},
						{
							"name": "SelectPriority"
						},
						{
							"name": "LookupCategory"
						},
						{
							"name": "SelectCategory"
						},
						{
							"name": "LookupAssignment"
						},
						{
							"name": "SelectAssignment"
						},
						{
							"name": "LookupTaskAllocation"
						},
						{
							"name": "SelectTaskAllocation"
						},
						{
							"name": "drvNullValues"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TABLENAME as string,",
						"          CODE as string,",
						"          DESCRIPTION as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> vwCodeTables",
						"source(output(",
						"          TASKID as long,",
						"          WDOSNAPSHOT as string,",
						"          CREATIONTIME as timestamp,",
						"          ASSIGNEDDATETIME as timestamp,",
						"          TOTALTIMEWORKED as integer,",
						"          RESTARTTIME as timestamp,",
						"          RESERVEDBY as string,",
						"          STATUS as string,",
						"          PRIORITY as string,",
						"          CATEGORY as string,",
						"          DEADTIMEOVERIND as string,",
						"          ALLOWFORWARDIND as string,",
						"          ADMINISTRATIONSID as string,",
						"          OVERFLOWIND as string,",
						"          VERSIONNO as integer,",
						"          LASTWRITTEN as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcTask",
						"source(output(",
						"          TASKDEFINITIONID as string,",
						"          NAME as string,",
						"          CATEGORYCODE as string,",
						"          ALLOCATIONSTRATEGYCODE as string,",
						"          ALLOCATIONITEMID as long,",
						"          WORKALLOCATIONRULESETID as string,",
						"          DEADLINEFUNCTIONID as long,",
						"          DEADLINETIMEOUTINTERVAL as long,",
						"          ALLOWFORWARDIND as string,",
						"          ACTIONPAGENAME as string,",
						"          CASEIDPARAMETERNAME as string,",
						"          PARTICIPANTIDPARAMETERNAME as string,",
						"          ADMINISTRATIONSID as string,",
						"          COMMENTS as string,",
						"          ACTIONPAGENAMECODE as string,",
						"          DEADLINETIMEOVERRIDEIND as string,",
						"          VERSIONNO as integer,",
						"          LASTWRITTEN as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcTaskDefinition",
						"source(output(",
						"          TASKASSIGNMENTID as long,",
						"          TASKID as long,",
						"          ASSIGNEETYPE as string,",
						"          RELATEDID as long,",
						"          RELATEDNAME as string,",
						"          LASTWRITTEN as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcTaskAssignment",
						"vwCodeTables filter(TABLENAME=='TargetItemType') ~> TargetItemType",
						"vwCodeTables filter(TABLENAME=='TaskCategoryCode') ~> TaskCategoryCode",
						"vwCodeTables filter(TABLENAME=='TaskChangeType') ~> TaskChangeType",
						"vwCodeTables filter(TABLENAME=='TaskPriority') ~> TaskPriority",
						"vwCodeTables filter(TABLENAME=='TaskStatus') ~> TaskStatus",
						"srcTask select(mapColumn(",
						"          TASKID,",
						"          CREATIONTIME,",
						"          TOTALTIMEWORKED,",
						"          STATUS,",
						"          PRIORITY,",
						"          CATEGORY,",
						"          LASTWRITTEN",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"SelectColumns derive(each(match(type=='string'), $$+'_Trim' = trim($$))) ~> drvTrimStringFields",
						"drvTrimStringFields, TaskStatus lookup(STATUS_Trim == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupStatus",
						"SelectStatus, TaskPriority lookup(PRIORITY_Trim == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupPriority",
						"LookupStatus select(mapColumn(",
						"          TASKID,",
						"          CREATIONTIME,",
						"          TOTALTIMEWORKED,",
						"          STATUS,",
						"          PRIORITY,",
						"          CATEGORY,",
						"          LASTWRITTEN,",
						"          STATUS_Trim,",
						"          PRIORITY_Trim,",
						"          CATEGORY_Trim,",
						"          StatusDescription = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectStatus",
						"LookupPriority select(mapColumn(",
						"          TASKID,",
						"          CREATIONTIME,",
						"          TOTALTIMEWORKED,",
						"          STATUS,",
						"          PRIORITY,",
						"          CATEGORY,",
						"          LASTWRITTEN,",
						"          STATUS_Trim,",
						"          PRIORITY_Trim,",
						"          CATEGORY_Trim,",
						"          StatusDescription,",
						"          PriorityDescription = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPriority",
						"SelectPriority, TaskCategoryCode lookup(CATEGORY_Trim == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupCategory",
						"LookupCategory select(mapColumn(",
						"          TASKID,",
						"          CREATIONTIME,",
						"          TOTALTIMEWORKED,",
						"          STATUS,",
						"          PRIORITY,",
						"          CATEGORY,",
						"          LASTWRITTEN,",
						"          STATUS_Trim,",
						"          PRIORITY_Trim,",
						"          CATEGORY_Trim,",
						"          StatusDescription,",
						"          PriorityDescription,",
						"          CategoryDescription = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCategory",
						"SelectCategory, srcTaskAssignment lookup(SelectCategory@TASKID == srcTaskAssignment@TASKID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupAssignment",
						"LookupAssignment select(mapColumn(",
						"          TASKID = SelectCategory@TASKID,",
						"          CREATIONTIME,",
						"          TOTALTIMEWORKED,",
						"          STATUS,",
						"          PRIORITY,",
						"          CATEGORY,",
						"          LASTWRITTEN = SelectCategory@LASTWRITTEN,",
						"          STATUS_Trim,",
						"          PRIORITY_Trim,",
						"          CATEGORY_Trim,",
						"          StatusDescription,",
						"          PriorityDescription,",
						"          CategoryDescription,",
						"          ASSIGNEETYPE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAssignment",
						"SelectAssignment, TargetItemType lookup(trim(ASSIGNEETYPE) == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupTaskAllocation",
						"LookupTaskAllocation select(mapColumn(",
						"          TASKID,",
						"          CREATIONTIME,",
						"          TOTALTIMEWORKED,",
						"          LASTWRITTEN,",
						"          StatusDescription,",
						"          PriorityDescription,",
						"          CategoryDescription,",
						"          TaskAllocationTargetDescription = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectTaskAllocation",
						"SelectTaskAllocation derive(StatusDescription = iifNull(StatusDescription, 'NA'),",
						"          PriorityDescription = iifNull(PriorityDescription, 'NA'),",
						"          CategoryDescription = iifNull(CategoryDescription, 'NA'),",
						"          TaskAllocationTargetDescription = iifNull(TaskAllocationTargetDescription, 'NA'),",
						"          ModifiedDate = currentUTC(),",
						"          each(match(regexMatch(name,'Description')), $$+'_null' = iifNull($$,'na'))) ~> drvNullValues",
						"drvNullValues sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string",
						"     ),",
						"     partitionFileNames:['DimTask'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> trgDimTask"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DynamicSelect')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Staging"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "db2DynamicSource",
								"type": "DatasetReference"
							},
							"name": "RptDBTEST"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "stgDynamicTarget",
								"type": "DatasetReference"
							},
							"name": "StgDBTEST"
						}
					],
					"transformations": [
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ptblTableName as string,",
						"     ptblLastWritten as string,",
						"     ptblPrimaryKeyColumn as string,",
						"     ptblSchema as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     waterMarkColumn: 'LastWritten',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"SELECT * FROM CURAPD01.\"+$ptblTableName+\" where Lastwritten>='\"+$ptblLastWritten+\"'\"                    ),",
						"     format: 'query',",
						"     mode: 'read') ~> RptDBTEST",
						"RptDBTEST alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:[($ptblPrimaryKeyColumn)],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> StgDBTEST"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/stgDynamicTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_FactSalesOrderHeader')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Dimensions"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "reportingSalesOrderHeader",
								"type": "DatasetReference"
							},
							"name": "reportingSalesOrderHeader"
						},
						{
							"dataset": {
								"referenceName": "DimAddress",
								"type": "DatasetReference"
							},
							"name": "DimAddress"
						},
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "DimCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "targetSalesOrderHeader",
								"type": "DatasetReference"
							},
							"name": "targetSalesOrderHeader"
						}
					],
					"transformations": [
						{
							"name": "LkpShipToAddress",
							"description": "Add second stream to the Lookup from settings. Lookup ShipTo Address"
						},
						{
							"name": "LkpBillToAddress",
							"description": "Add second stream to the Lookup from settings. Lookup BillTo Address"
						},
						{
							"name": "SelectColumnsWShipToDescription"
						},
						{
							"name": "SelectColumnsWBillToAddress"
						},
						{
							"name": "LkpCustomerDescription",
							"description": "Add second stream to the Lookup from settings. Lookup Customer Description"
						},
						{
							"name": "SelectColumnsWCustomerDescription"
						},
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     waterMarkColumn: 'ModifiedDate',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     mode: 'read') ~> reportingSalesOrderHeader",
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimAddress",
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimCustomer",
						"reportingSalesOrderHeader, DimAddress lookup(ShipToAddressID == AddressID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LkpShipToAddress",
						"SelectColumnsWShipToDescription, DimAddress lookup(BillToAddressID == AddressID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LkpBillToAddress",
						"LkpShipToAddress select(mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          CustomerID,",
						"          ShipToAddressID,",
						"          BillToAddressID,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          Comment,",
						"          rowguid = reportingSalesOrderHeader@rowguid,",
						"          ModifiedDate = reportingSalesOrderHeader@ModifiedDate,",
						"          ShipToAddressLine1 = AddressLine1",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsWShipToDescription",
						"LkpBillToAddress select(mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          CustomerID,",
						"          ShipToAddressID,",
						"          BillToAddressID,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate = SelectColumnsWShipToDescription@ModifiedDate,",
						"          ShipToAddressLine1,",
						"          BillToAddressLine1 = AddressLine1",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsWBillToAddress",
						"SelectColumnsWBillToAddress, DimCustomer lookup(SelectColumnsWBillToAddress@CustomerID == DimCustomer@CustomerID,",
						"     multiple: false,",
						"     pickup: 'first',",
						"     asc(DimCustomer@CustomerID, true),",
						"     broadcast: 'auto')~> LkpCustomerDescription",
						"LkpCustomerDescription select(mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate = SelectColumnsWBillToAddress@ModifiedDate,",
						"          ShipToAddressDescription = ShipToAddressLine1,",
						"          BillToAddressDesciption = BillToAddressLine1,",
						"          CustomerDescription = CompanyName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsWCustomerDescription",
						"SelectColumnsWCustomerDescription alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          SalesOrderID as integer,",
						"          OrderDate as timestamp,",
						"          Status as integer,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerDescription as string,",
						"          ShipToAddressDescription as string,",
						"          BillToAddressDesciption as string,",
						"          ShipMethod as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['SalesOrderID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          CustomerDescription,",
						"          ShipToAddressDescription,",
						"          BillToAddressDesciption,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate",
						"     )) ~> targetSalesOrderHeader"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/targetSalesOrderHeader')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_FactSalesOrderHeader_wo_CDC')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Dimensions"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "reportingSalesOrderHeader",
								"type": "DatasetReference"
							},
							"name": "reportingSalesOrderHeader"
						},
						{
							"dataset": {
								"referenceName": "DimAddress",
								"type": "DatasetReference"
							},
							"name": "DimAddress"
						},
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "DimCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "targetSalesOrderHeader",
								"type": "DatasetReference"
							},
							"name": "targetSalesOrderHeader"
						}
					],
					"transformations": [
						{
							"name": "LkpShipToAddress",
							"description": "Add second stream to the Lookup from settings. Lookup ShipTo Address"
						},
						{
							"name": "LkpBillToAddress",
							"description": "Add second stream to the Lookup from settings. Lookup BillTo Address"
						},
						{
							"name": "SelectColumnsWShipToDescription"
						},
						{
							"name": "SelectColumnsWBillToAddress"
						},
						{
							"name": "LkpCustomerDescription",
							"description": "Add second stream to the Lookup from settings. Lookup Customer Description"
						},
						{
							"name": "SelectColumnsWCustomerDescription"
						},
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     waterMarkColumn: 'ModifiedDate',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     mode: 'read') ~> reportingSalesOrderHeader",
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimAddress",
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimCustomer",
						"reportingSalesOrderHeader, DimAddress lookup(ShipToAddressID == AddressID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LkpShipToAddress",
						"SelectColumnsWShipToDescription, DimAddress lookup(BillToAddressID == AddressID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LkpBillToAddress",
						"LkpShipToAddress select(mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          CustomerID,",
						"          ShipToAddressID,",
						"          BillToAddressID,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          Comment,",
						"          rowguid = reportingSalesOrderHeader@rowguid,",
						"          ModifiedDate = reportingSalesOrderHeader@ModifiedDate,",
						"          ShipToAddressLine1 = AddressLine1",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsWShipToDescription",
						"LkpBillToAddress select(mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          CustomerID,",
						"          ShipToAddressID,",
						"          BillToAddressID,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate = SelectColumnsWShipToDescription@ModifiedDate,",
						"          ShipToAddressLine1,",
						"          BillToAddressLine1 = AddressLine1",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsWBillToAddress",
						"SelectColumnsWBillToAddress, DimCustomer lookup(SelectColumnsWBillToAddress@CustomerID == DimCustomer@CustomerID,",
						"     multiple: false,",
						"     pickup: 'first',",
						"     asc(DimCustomer@CustomerID, true),",
						"     broadcast: 'auto')~> LkpCustomerDescription",
						"LkpCustomerDescription select(mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate = SelectColumnsWBillToAddress@ModifiedDate,",
						"          ShipToAddressDescription = ShipToAddressLine1,",
						"          BillToAddressDesciption = BillToAddressLine1,",
						"          CustomerDescription = CompanyName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsWCustomerDescription",
						"SelectColumnsWCustomerDescription alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          SalesOrderID as integer,",
						"          OrderDate as timestamp,",
						"          Status as integer,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerDescription as string,",
						"          ShipToAddressDescription as string,",
						"          BillToAddressDesciption as string,",
						"          ShipMethod as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['SalesOrderID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          CustomerDescription,",
						"          ShipToAddressDescription,",
						"          BillToAddressDesciption,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate",
						"     )) ~> targetSalesOrderHeader"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/targetSalesOrderHeader')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Fixed_Width_Test')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Final df POCs"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DimCustomerAWDW",
								"type": "DatasetReference"
							},
							"name": "srcDimCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmailFile",
								"type": "DatasetReference"
							},
							"name": "tgtEmailFile"
						},
						{
							"dataset": {
								"referenceName": "SFTPFixedWidthFile",
								"type": "DatasetReference"
							},
							"name": "tgtSFTPServer"
						}
					],
					"transformations": [
						{
							"name": "SelectColumns"
						},
						{
							"name": "ConcatFields"
						},
						{
							"name": "SelectConcatString"
						},
						{
							"name": "IffNullTrim"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerKey as integer,",
						"          GeographyKey as integer,",
						"          CustomerAlternateKey as string,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          NameStyle as boolean,",
						"          BirthDate as date,",
						"          MaritalStatus as string,",
						"          Suffix as string,",
						"          Gender as string,",
						"          EmailAddress as string,",
						"          YearlyIncome as decimal(19,4),",
						"          TotalChildren as integer,",
						"          NumberChildrenAtHome as integer,",
						"          EnglishEducation as string,",
						"          SpanishEducation as string,",
						"          FrenchEducation as string,",
						"          EnglishOccupation as string,",
						"          SpanishOccupation as string,",
						"          FrenchOccupation as string,",
						"          HouseOwnerFlag as string,",
						"          NumberCarsOwned as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          Phone as string,",
						"          DateFirstPurchase as date,",
						"          CommuteDistance as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcDimCustomer",
						"srcDimCustomer select(mapColumn(",
						"          CustomerAlternateKey,",
						"          Title,",
						"          FirstName,",
						"          MiddleName,",
						"          LastName,",
						"          BirthDate,",
						"          MaritalStatus,",
						"          Suffix,",
						"          Gender,",
						"          TotalChildren,",
						"          EnglishEducation,",
						"          EnglishOccupation,",
						"          HouseOwnerFlag,",
						"          AddressLine1,",
						"          Phone",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"IffNullTrim derive(drvConcatAll = concat(rpad(FirstName,15,' '),rpad(MiddleName, 1, ' '),rpad(LastName, 20, ' '),rpad(AddressLine1, 45, ' '),rpad(EnglishEducation, 10, ' '))) ~> ConcatFields",
						"ConcatFields select(mapColumn(",
						"          ConcatAll = drvConcatAll",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectConcatString",
						"SelectColumns derive(FirstName = iifNull(trim(FirstName) ,'' ),",
						"          LastName = iifNull(trim(LastName) ,'' ),",
						"          MiddleName = iifNull(trim(MiddleName) ,'' ),",
						"          AddressLine1 = iifNull(trim(AddressLine1) ,'' ),",
						"          EnglishEducation = iifNull(trim(EnglishEducation) ,'' )) ~> IffNullTrim",
						"SelectConcatString sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmailFile'],",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> tgtEmailFile",
						"SelectConcatString sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:['FixedWidth.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> tgtSFTPServer"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Fixed_Width_Test_No_SMTP')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Final df POCs"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DimCustomerAWDW",
								"type": "DatasetReference"
							},
							"name": "srcDimCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dummy",
								"type": "DatasetReference"
							},
							"name": "tgtDummyOutput"
						},
						{
							"dataset": {
								"referenceName": "EmailFile",
								"type": "DatasetReference"
							},
							"name": "tgtEmailFile"
						}
					],
					"transformations": [
						{
							"name": "SelectColumns"
						},
						{
							"name": "ConcatFields"
						},
						{
							"name": "SelectConcatString"
						},
						{
							"name": "IffNullTrim"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerKey as integer,",
						"          GeographyKey as integer,",
						"          CustomerAlternateKey as string,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          NameStyle as boolean,",
						"          BirthDate as date,",
						"          MaritalStatus as string,",
						"          Suffix as string,",
						"          Gender as string,",
						"          EmailAddress as string,",
						"          YearlyIncome as decimal(19,4),",
						"          TotalChildren as integer,",
						"          NumberChildrenAtHome as integer,",
						"          EnglishEducation as string,",
						"          SpanishEducation as string,",
						"          FrenchEducation as string,",
						"          EnglishOccupation as string,",
						"          SpanishOccupation as string,",
						"          FrenchOccupation as string,",
						"          HouseOwnerFlag as string,",
						"          NumberCarsOwned as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          Phone as string,",
						"          DateFirstPurchase as date,",
						"          CommuteDistance as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcDimCustomer",
						"srcDimCustomer select(mapColumn(",
						"          CustomerAlternateKey,",
						"          Title,",
						"          FirstName,",
						"          MiddleName,",
						"          LastName,",
						"          BirthDate,",
						"          MaritalStatus,",
						"          Suffix,",
						"          Gender,",
						"          TotalChildren,",
						"          EnglishEducation,",
						"          EnglishOccupation,",
						"          HouseOwnerFlag,",
						"          AddressLine1,",
						"          Phone",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"IffNullTrim derive(drvConcatAll = concat(rpad(FirstName,15,' '),rpad(MiddleName, 1, ' '),rpad(LastName, 20, ' '),rpad(AddressLine1, 45, ' '),rpad(EnglishEducation, 10, ' '))) ~> ConcatFields",
						"ConcatFields select(mapColumn(",
						"          ConcatAll = drvConcatAll",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectConcatString",
						"SelectColumns derive(FirstName = iifNull(trim(FirstName) ,'' ),",
						"          LastName = iifNull(trim(LastName) ,'' ),",
						"          MiddleName = iifNull(trim(MiddleName) ,'' ),",
						"          AddressLine1 = iifNull(trim(AddressLine1) ,'' ),",
						"          EnglishEducation = iifNull(trim(EnglishEducation) ,'' )) ~> IffNullTrim",
						"SelectConcatString sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:['FixedWidthTest.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> tgtDummyOutput",
						"SelectConcatString sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmailFile'],",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> tgtEmailFile"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Lookup_Template_Case')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Final df POCs"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CodeTables",
								"type": "DatasetReference"
							},
							"name": "vwCodeTables"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dummy1",
								"type": "DatasetReference"
							},
							"name": "DummyFile"
						}
					],
					"transformations": [
						{
							"name": "CaseObjective"
						},
						{
							"name": "CaseStatus"
						},
						{
							"name": "CasePriority"
						},
						{
							"name": "CaseOutcome"
						},
						{
							"name": "CaseClassification"
						},
						{
							"name": "CaseTypeCode"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TABLENAME as string,",
						"          CODE as string,",
						"          DESCRIPTION as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> vwCodeTables",
						"vwCodeTables filter(TABLENAME=='CaseObjective') ~> CaseObjective",
						"vwCodeTables filter(TABLENAME=='CaseStatus') ~> CaseStatus",
						"vwCodeTables filter(TABLENAME=='CasePriority') ~> CasePriority",
						"vwCodeTables filter(TABLENAME=='CaseOutcome') ~> CaseOutcome",
						"vwCodeTables filter(TABLENAME=='CaseClassification') ~> CaseClassification",
						"vwCodeTables filter(TABLENAME=='CaseTypeCode') ~> CaseTypeCode",
						"CaseObjective sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:['CaseHeaderPOC'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> DummyFile"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Lookup_Template_POC')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Final df POCs"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CodeTables",
								"type": "DatasetReference"
							},
							"name": "vwCodeTables"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Dummy_Lookup",
								"type": "DatasetReference"
							},
							"name": "tgtDummyFile"
						}
					],
					"transformations": [
						{
							"name": "ActionPageNameCode"
						},
						{
							"name": "ActivityCategory"
						},
						{
							"name": "AddressCountry"
						},
						{
							"name": "AddressLayoutType"
						},
						{
							"name": "AddressState"
						},
						{
							"name": "AddressType"
						},
						{
							"name": "AddressUSCounty"
						},
						{
							"name": "AdviceParameterType"
						},
						{
							"name": "AESShareSetStatus"
						},
						{
							"name": "AESShareSetType"
						},
						{
							"name": "AllocationStrategyCode"
						},
						{
							"name": "AlternateNameType"
						},
						{
							"name": "ApplicantRole"
						},
						{
							"name": "ApplicantStatus"
						},
						{
							"name": "APPLICATIONCODE"
						},
						{
							"name": "ApplicationCaseStatus"
						},
						{
							"name": "ApplicationChannel"
						},
						{
							"name": "ApplicationFiledByType"
						},
						{
							"name": "ApplicationMethod"
						},
						{
							"name": "ApplicationReassignReason"
						},
						{
							"name": "ApplicationRoleStatus"
						},
						{
							"name": "ApplicationRoleType"
						},
						{
							"name": "ApplicationStatus"
						},
						{
							"name": "ApplicationType"
						},
						{
							"name": "AssessmentDateListType"
						},
						{
							"name": "BranchOfService"
						},
						{
							"name": "CaseAssessmentDetReason"
						},
						{
							"name": "CaseCatTypeCode"
						},
						{
							"name": "CaseClassification"
						},
						{
							"name": "CaseDecisionStatusCode"
						},
						{
							"name": "CaseDeterminationStatus"
						},
						{
							"name": "CaseDeterminationType"
						},
						{
							"name": "CaseDetEvidenceUsed"
						},
						{
							"name": "CaseObjective"
						},
						{
							"name": "CaseOutcome"
						},
						{
							"name": "CaseParticipantRoleType"
						},
						{
							"name": "CasePriority"
						},
						{
							"name": "CaseSnapshoDetReason"
						},
						{
							"name": "CaseStatus"
						},
						{
							"name": "CaseTypeCode"
						},
						{
							"name": "CategoryActionState"
						},
						{
							"name": "CategoryName"
						},
						{
							"name": "CategoryTitle"
						},
						{
							"name": "CIPreferredContact"
						},
						{
							"name": "CIReferralResason"
						},
						{
							"name": "ClassDivisionType"
						},
						{
							"name": "ClientRegistration"
						},
						{
							"name": "CommunicationMethod"
						},
						{
							"name": "CommunicationType"
						},
						{
							"name": "CompanyType"
						},
						{
							"name": "ConcernRoleAlternateID"
						},
						{
							"name": "ConcernRoleStatus"
						},
						{
							"name": "ConcernRoleType"
						},
						{
							"name": "ConstraintType"
						},
						{
							"name": "ContractType"
						},
						{
							"name": "CopayCap"
						},
						{
							"name": "Country"
						},
						{
							"name": "CountyDetailsLinkedType"
						},
						{
							"name": "CoverageEndReason"
						},
						{
							"name": "CoverageType"
						},
						{
							"name": "CreoleValueState"
						},
						{
							"name": "Currency"
						},
						{
							"name": "DADisabilityConditionType"
						},
						{
							"name": "DeterminationCompStrategy"
						},
						{
							"name": "DetIntSummarizerStrategy"
						},
						{
							"name": "DETVersionStatus"
						},
						{
							"name": "EmailType"
						},
						{
							"name": "EthnicOrigin"
						},
						{
							"name": "EvidenceChangeReason"
						},
						{
							"name": "EvidenceDescriptorStatus"
						},
						{
							"name": "EvidenceType"
						},
						{
							"name": "EvMaintenancePattern"
						},
						{
							"name": "ExpectedLengthOfStay"
						},
						{
							"name": "ExpiryDateFrom"
						},
						{
							"name": "FrequencyCode"
						},
						{
							"name": "Gender"
						},
						{
							"name": "GrantorType"
						},
						{
							"name": "IndustryType"
						},
						{
							"name": "IntakeClientType"
						},
						{
							"name": "IntakeProcessDefntnState"
						},
						{
							"name": "IntakeProgApplDenyReason"
						},
						{
							"name": "IntakeProgApplStatus"
						},
						{
							"name": "Language"
						},
						{
							"name": "LevelOfCareType"
						},
						{
							"name": "LiabilityReassessmentType"
						},
						{
							"name": "Locale"
						},
						{
							"name": "LocationStatus"
						},
						{
							"name": "LocationType"
						},
						{
							"name": "MaritalStatus"
						},
						{
							"name": "MedicalInstitutionType"
						},
						{
							"name": "MethodOfApplication"
						},
						{
							"name": "MethodOfDelivery"
						},
						{
							"name": "MilitaryRank"
						},
						{
							"name": "Nationality"
						},
						{
							"name": "OccupationType"
						},
						{
							"name": "OutcomeAchieved"
						},
						{
							"name": "OverUnderPmntProcessing"
						},
						{
							"name": "ParticipantRoleEndReason"
						},
						{
							"name": "PersonTitle"
						},
						{
							"name": "PersonType"
						},
						{
							"name": "PhoneType"
						},
						{
							"name": "PlacedByFiledBy"
						},
						{
							"name": "PlacedByType"
						},
						{
							"name": "POIProgram"
						},
						{
							"name": "PreferredSEMethod"
						},
						{
							"name": "ProductAdminCategory"
						},
						{
							"name": "ProductCategory"
						},
						{
							"name": "ProductCoverPeriod"
						},
						{
							"name": "ProductDeliveryCategory"
						},
						{
							"name": "ProductName"
						},
						{
							"name": "ProductReassessmentStrat"
						},
						{
							"name": "ProductRoundType"
						},
						{
							"name": "ProductType"
						},
						{
							"name": "ProgAppStatusTransReason"
						},
						{
							"name": "ProgGrpDeterminationType"
						},
						{
							"name": "ProgramActionType"
						},
						{
							"name": "ProgramName"
						},
						{
							"name": "ProgramStatus"
						},
						{
							"name": "ProgramStatusReason"
						},
						{
							"name": "ProgramType"
						},
						{
							"name": "ProgRecEligibilityStatus"
						},
						{
							"name": "ProgRecEligibStartDate"
						},
						{
							"name": "ProgRecEvidenceUsed"
						},
						{
							"name": "ProgRecExecutionStatus"
						},
						{
							"name": "PropertyCategory"
						},
						{
							"name": "PropertyType"
						},
						{
							"name": "ProviderCategory"
						},
						{
							"name": "ProviderCategoryEndReason"
						},
						{
							"name": "ProviderStatus"
						},
						{
							"name": "RateCellType"
						},
						{
							"name": "RateColumnType"
						},
						{
							"name": "RateRowType"
						},
						{
							"name": "RateStatus"
						},
						{
							"name": "RateTableType"
						},
						{
							"name": "RecordStatus"
						},
						{
							"name": "ReferralSource"
						},
						{
							"name": "ReimbursementType"
						},
						{
							"name": "RelationshipEndReason"
						},
						{
							"name": "RelationshipTypeCode"
						},
						{
							"name": "RepresentativeType"
						},
						{
							"name": "ReverificationMode"
						},
						{
							"name": "RshipToPolicyholder"
						},
						{
							"name": "SDAssessmentMethod"
						},
						{
							"name": "SDAssessmentReason"
						},
						{
							"name": "SDCalculationRule"
						},
						{
							"name": "SDCREOLECaseDetAction"
						},
						{
							"name": "SDCREOLECaseDetRecStatus"
						},
						{
							"name": "SDCREOLECaseDetStatus"
						},
						{
							"name": "SDIHSCoPayInd"
						},
						{
							"name": "SDMAForcedEligReason"
						},
						{
							"name": "SDMedAidPrgmCatClass"
						},
						{
							"name": "SDPolicyholderRole"
						},
						{
							"name": "SDProdHeirarchyCat"
						},
						{
							"name": "SDRecertificationStatus"
						},
						{
							"name": "SDRegionApplicationType"
						},
						{
							"name": "SDSuspensionReason"
						},
						{
							"name": "SDTribalEnrollmentInd"
						},
						{
							"name": "SDTribeCode"
						},
						{
							"name": "SecretQuestionType"
						},
						{
							"name": "Sensitivity"
						},
						{
							"name": "ServCessReason"
						},
						{
							"name": "ServiceType"
						},
						{
							"name": "SourceOfFund"
						},
						{
							"name": "SpecialInterest"
						},
						{
							"name": "StateCodes"
						},
						{
							"name": "TargetItemType"
						},
						{
							"name": "TaskCategoryCode"
						},
						{
							"name": "TaskChangeType"
						},
						{
							"name": "TaskPriority"
						},
						{
							"name": "TaskStatus"
						},
						{
							"name": "TemplateIDCode"
						},
						{
							"name": "ThirdPartyProductType"
						},
						{
							"name": "TrustCategory"
						},
						{
							"name": "TrusteeType"
						},
						{
							"name": "TrustIncomeType"
						},
						{
							"name": "TrustType"
						},
						{
							"name": "UndueHardshipReason"
						},
						{
							"name": "UnearnedIncomeType"
						},
						{
							"name": "UnearnedRentIncExpType"
						},
						{
							"name": "URATypeAction"
						},
						{
							"name": "UserGrade"
						},
						{
							"name": "UserRecentActionType"
						},
						{
							"name": "UserSearchType"
						},
						{
							"name": "UtahCounties"
						},
						{
							"name": "UtilityExpenseType"
						},
						{
							"name": "UtilityType"
						},
						{
							"name": "VehicleMake"
						},
						{
							"name": "VehicleUsageCode"
						},
						{
							"name": "VerifiableItemName"
						},
						{
							"name": "VerificationCatName"
						},
						{
							"name": "VerificationDueDateFrom"
						},
						{
							"name": "VerificationItemName"
						},
						{
							"name": "VerificationItemType"
						},
						{
							"name": "VerificationItemUsageType"
						},
						{
							"name": "VerificationLevel"
						},
						{
							"name": "VerificationSkippedReason"
						},
						{
							"name": "VerificationStatus"
						},
						{
							"name": "VerificationType"
						},
						{
							"name": "VerReqName"
						},
						{
							"name": "VerReqUsageName"
						},
						{
							"name": "WaiverType"
						},
						{
							"name": "WebAddressType"
						},
						{
							"name": "WorkAllocationFunction"
						},
						{
							"name": "WorkflowDeadlineType"
						},
						{
							"name": "WorkflowHistoryEvent"
						},
						{
							"name": "WorkQueueSubsOrgObjType"
						},
						{
							"name": "XSLTemplateType"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TABLENAME as string,",
						"          CODE as string,",
						"          DESCRIPTION as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> vwCodeTables",
						"vwCodeTables filter(TABLENAME=='ActionPageNameCode') ~> ActionPageNameCode",
						"vwCodeTables filter(TABLENAME=='ActivityCategory') ~> ActivityCategory",
						"vwCodeTables filter(TABLENAME=='AddressCountry') ~> AddressCountry",
						"vwCodeTables filter(TABLENAME=='AddressLayoutType') ~> AddressLayoutType",
						"vwCodeTables filter(TABLENAME=='AddressState') ~> AddressState",
						"vwCodeTables filter(TABLENAME=='AddressType') ~> AddressType",
						"vwCodeTables filter(TABLENAME=='AddressUSCounty') ~> AddressUSCounty",
						"vwCodeTables filter(TABLENAME=='AdviceParameterType') ~> AdviceParameterType",
						"vwCodeTables filter(TABLENAME=='AESShareSetStatus') ~> AESShareSetStatus",
						"vwCodeTables filter(TABLENAME=='AESShareSetType') ~> AESShareSetType",
						"vwCodeTables filter(TABLENAME=='AllocationStrategyCode') ~> AllocationStrategyCode",
						"vwCodeTables filter(TABLENAME=='AlternateNameType') ~> AlternateNameType",
						"vwCodeTables filter(TABLENAME=='ApplicantRole') ~> ApplicantRole",
						"vwCodeTables filter(TABLENAME=='ApplicantStatus') ~> ApplicantStatus",
						"vwCodeTables filter(TABLENAME=='APPLICATION_CODE') ~> APPLICATIONCODE",
						"vwCodeTables filter(TABLENAME=='ApplicationCaseStatus') ~> ApplicationCaseStatus",
						"vwCodeTables filter(TABLENAME=='ApplicationChannel') ~> ApplicationChannel",
						"vwCodeTables filter(TABLENAME=='ApplicationFiledByType') ~> ApplicationFiledByType",
						"vwCodeTables filter(TABLENAME=='ApplicationMethod') ~> ApplicationMethod",
						"vwCodeTables filter(TABLENAME=='ApplicationReassignReason') ~> ApplicationReassignReason",
						"vwCodeTables filter(TABLENAME=='ApplicationRoleStatus') ~> ApplicationRoleStatus",
						"vwCodeTables filter(TABLENAME=='ApplicationRoleType') ~> ApplicationRoleType",
						"vwCodeTables filter(TABLENAME=='ApplicationStatus') ~> ApplicationStatus",
						"vwCodeTables filter(TABLENAME=='ApplicationType') ~> ApplicationType",
						"vwCodeTables filter(TABLENAME=='AssessmentDateListType') ~> AssessmentDateListType",
						"vwCodeTables filter(TABLENAME=='BranchOfService') ~> BranchOfService",
						"vwCodeTables filter(TABLENAME=='CaseAssessmentDetReason') ~> CaseAssessmentDetReason",
						"vwCodeTables filter(TABLENAME=='CaseCatTypeCode') ~> CaseCatTypeCode",
						"vwCodeTables filter(TABLENAME=='CaseClassification') ~> CaseClassification",
						"vwCodeTables filter(TABLENAME=='CaseDecisionStatusCode') ~> CaseDecisionStatusCode",
						"vwCodeTables filter(TABLENAME=='CaseDeterminationStatus') ~> CaseDeterminationStatus",
						"vwCodeTables filter(TABLENAME=='CaseDeterminationType') ~> CaseDeterminationType",
						"vwCodeTables filter(TABLENAME=='CaseDetEvidenceUsed') ~> CaseDetEvidenceUsed",
						"vwCodeTables filter(TABLENAME=='CaseObjective') ~> CaseObjective",
						"vwCodeTables filter(TABLENAME=='CaseOutcome') ~> CaseOutcome",
						"vwCodeTables filter(TABLENAME=='CaseParticipantRoleType') ~> CaseParticipantRoleType",
						"vwCodeTables filter(TABLENAME=='CasePriority') ~> CasePriority",
						"vwCodeTables filter(TABLENAME=='CaseSnapshoDetReason') ~> CaseSnapshoDetReason",
						"vwCodeTables filter(TABLENAME=='CaseStatus') ~> CaseStatus",
						"vwCodeTables filter(TABLENAME=='CaseTypeCode') ~> CaseTypeCode",
						"vwCodeTables filter(TABLENAME=='CategoryActionState') ~> CategoryActionState",
						"vwCodeTables filter(TABLENAME=='CategoryName') ~> CategoryName",
						"vwCodeTables filter(TABLENAME=='CategoryTitle') ~> CategoryTitle",
						"vwCodeTables filter(TABLENAME=='CIPreferredContact') ~> CIPreferredContact",
						"vwCodeTables filter(TABLENAME=='CIReferralResason') ~> CIReferralResason",
						"vwCodeTables filter(TABLENAME=='ClassDivisionType') ~> ClassDivisionType",
						"vwCodeTables filter(TABLENAME=='ClientRegistration') ~> ClientRegistration",
						"vwCodeTables filter(TABLENAME=='CommunicationMethod') ~> CommunicationMethod",
						"vwCodeTables filter(TABLENAME=='CommunicationType') ~> CommunicationType",
						"vwCodeTables filter(TABLENAME=='CompanyType') ~> CompanyType",
						"vwCodeTables filter(TABLENAME=='ConcernRoleAlternateID') ~> ConcernRoleAlternateID",
						"vwCodeTables filter(TABLENAME=='ConcernRoleStatus') ~> ConcernRoleStatus",
						"vwCodeTables filter(TABLENAME=='ConcernRoleType') ~> ConcernRoleType",
						"vwCodeTables filter(TABLENAME=='ConstraintType') ~> ConstraintType",
						"vwCodeTables filter(TABLENAME=='ContractType') ~> ContractType",
						"vwCodeTables filter(TABLENAME=='CopayCap') ~> CopayCap",
						"vwCodeTables filter(TABLENAME=='Country') ~> Country",
						"vwCodeTables filter(TABLENAME=='CountyDetailsLinkedType') ~> CountyDetailsLinkedType",
						"vwCodeTables filter(TABLENAME=='CoverageEndReason') ~> CoverageEndReason",
						"vwCodeTables filter(TABLENAME=='CoverageType') ~> CoverageType",
						"vwCodeTables filter(TABLENAME=='CreoleValueState') ~> CreoleValueState",
						"vwCodeTables filter(TABLENAME=='Currency') ~> Currency",
						"vwCodeTables filter(TABLENAME=='DADisabilityConditionType') ~> DADisabilityConditionType",
						"vwCodeTables filter(TABLENAME=='DeterminationCompStrategy') ~> DeterminationCompStrategy",
						"vwCodeTables filter(TABLENAME=='DetIntSummarizerStrategy') ~> DetIntSummarizerStrategy",
						"vwCodeTables filter(TABLENAME=='DETVersionStatus') ~> DETVersionStatus",
						"vwCodeTables filter(TABLENAME=='EmailType') ~> EmailType",
						"vwCodeTables filter(TABLENAME=='EthnicOrigin') ~> EthnicOrigin",
						"vwCodeTables filter(TABLENAME=='EvidenceChangeReason') ~> EvidenceChangeReason",
						"vwCodeTables filter(TABLENAME=='EvidenceDescriptorStatus') ~> EvidenceDescriptorStatus",
						"vwCodeTables filter(TABLENAME=='EvidenceType') ~> EvidenceType",
						"vwCodeTables filter(TABLENAME=='EvMaintenancePattern') ~> EvMaintenancePattern",
						"vwCodeTables filter(TABLENAME=='ExpectedLengthOfStay') ~> ExpectedLengthOfStay",
						"vwCodeTables filter(TABLENAME=='ExpiryDateFrom') ~> ExpiryDateFrom",
						"vwCodeTables filter(TABLENAME=='FrequencyCode') ~> FrequencyCode",
						"vwCodeTables filter(TABLENAME=='Gender') ~> Gender",
						"vwCodeTables filter(TABLENAME=='GrantorType') ~> GrantorType",
						"vwCodeTables filter(TABLENAME=='IndustryType') ~> IndustryType",
						"vwCodeTables filter(TABLENAME=='IntakeClientType') ~> IntakeClientType",
						"vwCodeTables filter(TABLENAME=='IntakeProcessDefntnState') ~> IntakeProcessDefntnState",
						"vwCodeTables filter(TABLENAME=='IntakeProgApplDenyReason') ~> IntakeProgApplDenyReason",
						"vwCodeTables filter(TABLENAME=='IntakeProgApplStatus') ~> IntakeProgApplStatus",
						"vwCodeTables filter(TABLENAME=='Language') ~> Language",
						"vwCodeTables filter(TABLENAME=='LevelOfCareType') ~> LevelOfCareType",
						"vwCodeTables filter(TABLENAME=='LiabilityReassessmentType') ~> LiabilityReassessmentType",
						"vwCodeTables filter(TABLENAME=='Locale') ~> Locale",
						"vwCodeTables filter(TABLENAME=='LocationStatus') ~> LocationStatus",
						"vwCodeTables filter(TABLENAME=='LocationType') ~> LocationType",
						"vwCodeTables filter(TABLENAME=='MaritalStatus') ~> MaritalStatus",
						"vwCodeTables filter(TABLENAME=='MedicalInstitutionType') ~> MedicalInstitutionType",
						"vwCodeTables filter(TABLENAME=='MethodOfApplication') ~> MethodOfApplication",
						"vwCodeTables filter(TABLENAME=='MethodOfDelivery') ~> MethodOfDelivery",
						"vwCodeTables filter(TABLENAME=='MilitaryRank') ~> MilitaryRank",
						"vwCodeTables filter(TABLENAME=='Nationality') ~> Nationality",
						"vwCodeTables filter(TABLENAME=='OccupationType') ~> OccupationType",
						"vwCodeTables filter(TABLENAME=='OutcomeAchieved') ~> OutcomeAchieved",
						"vwCodeTables filter(TABLENAME=='OverUnderPmntProcessing') ~> OverUnderPmntProcessing",
						"vwCodeTables filter(TABLENAME=='ParticipantRoleEndReason') ~> ParticipantRoleEndReason",
						"vwCodeTables filter(TABLENAME=='PersonTitle') ~> PersonTitle",
						"vwCodeTables filter(TABLENAME=='PersonType') ~> PersonType",
						"vwCodeTables filter(TABLENAME=='PhoneType') ~> PhoneType",
						"vwCodeTables filter(TABLENAME=='PlacedByFiledBy') ~> PlacedByFiledBy",
						"vwCodeTables filter(TABLENAME=='PlacedByType') ~> PlacedByType",
						"vwCodeTables filter(TABLENAME=='POIProgram') ~> POIProgram",
						"vwCodeTables filter(TABLENAME=='PreferredSEMethod') ~> PreferredSEMethod",
						"vwCodeTables filter(TABLENAME=='ProductAdminCategory') ~> ProductAdminCategory",
						"vwCodeTables filter(TABLENAME=='ProductCategory') ~> ProductCategory",
						"vwCodeTables filter(TABLENAME=='ProductCoverPeriod') ~> ProductCoverPeriod",
						"vwCodeTables filter(TABLENAME=='ProductDeliveryCategory') ~> ProductDeliveryCategory",
						"vwCodeTables filter(TABLENAME=='ProductName') ~> ProductName",
						"vwCodeTables filter(TABLENAME=='ProductReassessmentStrat') ~> ProductReassessmentStrat",
						"vwCodeTables filter(TABLENAME=='ProductRoundType') ~> ProductRoundType",
						"vwCodeTables filter(TABLENAME=='ProductType') ~> ProductType",
						"vwCodeTables filter(TABLENAME=='ProgAppStatusTransReason') ~> ProgAppStatusTransReason",
						"vwCodeTables filter(TABLENAME=='ProgGrpDeterminationType') ~> ProgGrpDeterminationType",
						"vwCodeTables filter(TABLENAME=='ProgramActionType') ~> ProgramActionType",
						"vwCodeTables filter(TABLENAME=='ProgramName') ~> ProgramName",
						"vwCodeTables filter(TABLENAME=='ProgramStatus') ~> ProgramStatus",
						"vwCodeTables filter(TABLENAME=='ProgramStatusReason') ~> ProgramStatusReason",
						"vwCodeTables filter(TABLENAME=='ProgramType') ~> ProgramType",
						"vwCodeTables filter(TABLENAME=='ProgRecEligibilityStatus') ~> ProgRecEligibilityStatus",
						"vwCodeTables filter(TABLENAME=='ProgRecEligibStartDate') ~> ProgRecEligibStartDate",
						"vwCodeTables filter(TABLENAME=='ProgRecEvidenceUsed') ~> ProgRecEvidenceUsed",
						"vwCodeTables filter(TABLENAME=='ProgRecExecutionStatus') ~> ProgRecExecutionStatus",
						"vwCodeTables filter(TABLENAME=='PropertyCategory') ~> PropertyCategory",
						"vwCodeTables filter(TABLENAME=='PropertyType') ~> PropertyType",
						"vwCodeTables filter(TABLENAME=='ProviderCategory') ~> ProviderCategory",
						"vwCodeTables filter(TABLENAME=='ProviderCategoryEndReason') ~> ProviderCategoryEndReason",
						"vwCodeTables filter(TABLENAME=='ProviderStatus') ~> ProviderStatus",
						"vwCodeTables filter(TABLENAME=='RateCellType') ~> RateCellType",
						"vwCodeTables filter(TABLENAME=='RateColumnType') ~> RateColumnType",
						"vwCodeTables filter(TABLENAME=='RateRowType') ~> RateRowType",
						"vwCodeTables filter(TABLENAME=='RateStatus') ~> RateStatus",
						"vwCodeTables filter(TABLENAME=='RateTableType') ~> RateTableType",
						"vwCodeTables filter(TABLENAME=='RecordStatus') ~> RecordStatus",
						"vwCodeTables filter(TABLENAME=='ReferralSource') ~> ReferralSource",
						"vwCodeTables filter(TABLENAME=='ReimbursementType') ~> ReimbursementType",
						"vwCodeTables filter(TABLENAME=='RelationshipEndReason') ~> RelationshipEndReason",
						"vwCodeTables filter(TABLENAME=='RelationshipTypeCode') ~> RelationshipTypeCode",
						"vwCodeTables filter(TABLENAME=='RepresentativeType') ~> RepresentativeType",
						"vwCodeTables filter(TABLENAME=='ReverificationMode') ~> ReverificationMode",
						"vwCodeTables filter(TABLENAME=='RshipToPolicyholder') ~> RshipToPolicyholder",
						"vwCodeTables filter(TABLENAME=='SDAssessmentMethod') ~> SDAssessmentMethod",
						"vwCodeTables filter(TABLENAME=='SDAssessmentReason') ~> SDAssessmentReason",
						"vwCodeTables filter(TABLENAME=='SDCalculationRule') ~> SDCalculationRule",
						"vwCodeTables filter(TABLENAME=='SDCREOLECaseDetAction') ~> SDCREOLECaseDetAction",
						"vwCodeTables filter(TABLENAME=='SDCREOLECaseDetRecStatus') ~> SDCREOLECaseDetRecStatus",
						"vwCodeTables filter(TABLENAME=='SDCREOLECaseDetStatus') ~> SDCREOLECaseDetStatus",
						"vwCodeTables filter(TABLENAME=='SDIHSCoPayInd') ~> SDIHSCoPayInd",
						"vwCodeTables filter(TABLENAME=='SDMAForcedEligReason') ~> SDMAForcedEligReason",
						"vwCodeTables filter(TABLENAME=='SDMedAidPrgmCatClass') ~> SDMedAidPrgmCatClass",
						"vwCodeTables filter(TABLENAME=='SDPolicyholderRole') ~> SDPolicyholderRole",
						"vwCodeTables filter(TABLENAME=='SDProdHeirarchyCat') ~> SDProdHeirarchyCat",
						"vwCodeTables filter(TABLENAME=='SDRecertificationStatus') ~> SDRecertificationStatus",
						"vwCodeTables filter(TABLENAME=='SDRegionApplicationType') ~> SDRegionApplicationType",
						"vwCodeTables filter(TABLENAME=='SDSuspensionReason') ~> SDSuspensionReason",
						"vwCodeTables filter(TABLENAME=='SDTribalEnrollmentInd') ~> SDTribalEnrollmentInd",
						"vwCodeTables filter(TABLENAME=='SDTribeCode') ~> SDTribeCode",
						"vwCodeTables filter(TABLENAME=='SecretQuestionType') ~> SecretQuestionType",
						"vwCodeTables filter(TABLENAME=='Sensitivity') ~> Sensitivity",
						"vwCodeTables filter(TABLENAME=='ServCessReason') ~> ServCessReason",
						"vwCodeTables filter(TABLENAME=='ServiceType') ~> ServiceType",
						"vwCodeTables filter(TABLENAME=='SourceOfFund') ~> SourceOfFund",
						"vwCodeTables filter(TABLENAME=='SpecialInterest') ~> SpecialInterest",
						"vwCodeTables filter(TABLENAME=='StateCodes') ~> StateCodes",
						"vwCodeTables filter(TABLENAME=='TargetItemType') ~> TargetItemType",
						"vwCodeTables filter(TABLENAME=='TaskCategoryCode') ~> TaskCategoryCode",
						"vwCodeTables filter(TABLENAME=='TaskChangeType') ~> TaskChangeType",
						"vwCodeTables filter(TABLENAME=='TaskPriority') ~> TaskPriority",
						"vwCodeTables filter(TABLENAME=='TaskStatus') ~> TaskStatus",
						"vwCodeTables filter(TABLENAME=='TemplateIDCode') ~> TemplateIDCode",
						"vwCodeTables filter(TABLENAME=='ThirdPartyProductType') ~> ThirdPartyProductType",
						"vwCodeTables filter(TABLENAME=='TrustCategory') ~> TrustCategory",
						"vwCodeTables filter(TABLENAME=='TrusteeType') ~> TrusteeType",
						"vwCodeTables filter(TABLENAME=='TrustIncomeType') ~> TrustIncomeType",
						"vwCodeTables filter(TABLENAME=='TrustType') ~> TrustType",
						"vwCodeTables filter(TABLENAME=='UndueHardshipReason') ~> UndueHardshipReason",
						"vwCodeTables filter(TABLENAME=='UnearnedIncomeType') ~> UnearnedIncomeType",
						"vwCodeTables filter(TABLENAME=='UnearnedRentIncExpType') ~> UnearnedRentIncExpType",
						"vwCodeTables filter(TABLENAME=='URATypeAction') ~> URATypeAction",
						"vwCodeTables filter(TABLENAME=='UserGrade') ~> UserGrade",
						"vwCodeTables filter(TABLENAME=='UserRecentActionType') ~> UserRecentActionType",
						"vwCodeTables filter(TABLENAME=='UserSearchType') ~> UserSearchType",
						"vwCodeTables filter(TABLENAME=='UtahCounties') ~> UtahCounties",
						"vwCodeTables filter(TABLENAME=='UtilityExpenseType') ~> UtilityExpenseType",
						"vwCodeTables filter(TABLENAME=='UtilityType') ~> UtilityType",
						"vwCodeTables filter(TABLENAME=='VehicleMake') ~> VehicleMake",
						"vwCodeTables filter(TABLENAME=='VehicleUsageCode') ~> VehicleUsageCode",
						"vwCodeTables filter(TABLENAME=='VerifiableItemName') ~> VerifiableItemName",
						"vwCodeTables filter(TABLENAME=='VerificationCatName') ~> VerificationCatName",
						"vwCodeTables filter(TABLENAME=='VerificationDueDateFrom') ~> VerificationDueDateFrom",
						"vwCodeTables filter(TABLENAME=='VerificationItemName') ~> VerificationItemName",
						"vwCodeTables filter(TABLENAME=='VerificationItemType') ~> VerificationItemType",
						"vwCodeTables filter(TABLENAME=='VerificationItemUsageType') ~> VerificationItemUsageType",
						"vwCodeTables filter(TABLENAME=='VerificationLevel') ~> VerificationLevel",
						"vwCodeTables filter(TABLENAME=='VerificationSkippedReason') ~> VerificationSkippedReason",
						"vwCodeTables filter(TABLENAME=='VerificationStatus') ~> VerificationStatus",
						"vwCodeTables filter(TABLENAME=='VerificationType') ~> VerificationType",
						"vwCodeTables filter(TABLENAME=='VerReqName') ~> VerReqName",
						"vwCodeTables filter(TABLENAME=='VerReqUsageName') ~> VerReqUsageName",
						"vwCodeTables filter(TABLENAME=='WaiverType') ~> WaiverType",
						"vwCodeTables filter(TABLENAME=='WebAddressType') ~> WebAddressType",
						"vwCodeTables filter(TABLENAME=='WorkAllocationFunction') ~> WorkAllocationFunction",
						"vwCodeTables filter(TABLENAME=='WorkflowDeadlineType') ~> WorkflowDeadlineType",
						"vwCodeTables filter(TABLENAME=='WorkflowHistoryEvent') ~> WorkflowHistoryEvent",
						"vwCodeTables filter(TABLENAME=='WorkQueueSubsOrgObjType') ~> WorkQueueSubsOrgObjType",
						"vwCodeTables filter(TABLENAME=='XSLTemplateType') ~> XSLTemplateType",
						"ActionPageNameCode sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> tgtDummyFile"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_RptToStage')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Staging"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "db2DynamicSource",
								"type": "DatasetReference"
							},
							"name": "RptDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "stgDynamicTarget",
								"type": "DatasetReference"
							},
							"name": "StgDB"
						}
					],
					"transformations": [
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"parameters{",
						"     TableName as string,",
						"     SchemaName as string,",
						"     UniqueID as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     waterMarkColumn: 'LastWritten',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     mode: 'read') ~> RptDB",
						"RptDB alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:[($UniqueID)],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> StgDB"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/stgDynamicTarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_SCD1_Example')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Facts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "reportingSalesOrderHeader",
								"type": "DatasetReference"
							},
							"name": "reportingSalesOrderHeader"
						},
						{
							"dataset": {
								"referenceName": "DimAddress",
								"type": "DatasetReference"
							},
							"name": "DimAddress"
						},
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "DimCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "target_SalesOrderHeader_wDate",
								"type": "DatasetReference"
							},
							"name": "targetSalesOrders"
						}
					],
					"transformations": [
						{
							"name": "SelectColumnsWShipToDescription"
						},
						{
							"name": "LkpShipToAddress"
						},
						{
							"name": "Upsert"
						},
						{
							"name": "LkpCustomerDescip"
						},
						{
							"name": "SelectColumnWCustDescrip"
						},
						{
							"name": "LkpBillToAddressDescr"
						},
						{
							"name": "SelectColumnsWBillToDescr"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     waterMarkColumn: 'ModifiedDate',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     mode: 'read') ~> reportingSalesOrderHeader",
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimAddress",
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimCustomer",
						"LkpShipToAddress select(mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate = reportingSalesOrderHeader@ModifiedDate,",
						"          ShipToAddressDesscription = AddressLine1,",
						"          CustomerID,",
						"          BillToAddressID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsWShipToDescription",
						"reportingSalesOrderHeader, DimAddress lookup(ShipToAddressID == AddressID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LkpShipToAddress",
						"SelectColumnsWBillToDescr alterRow(upsertIf(true())) ~> Upsert",
						"SelectColumnsWShipToDescription, DimCustomer lookup(SelectColumnsWShipToDescription@CustomerID == DimCustomer@CustomerID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LkpCustomerDescip",
						"LkpCustomerDescip select(mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate = SelectColumnsWShipToDescription@ModifiedDate,",
						"          ShipToAddressDesscription,",
						"          CustomerDescription = CompanyName,",
						"          ModifiedDate = DimCustomer@ModifiedDate,",
						"          BillToAddressID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnWCustDescrip",
						"SelectColumnWCustDescrip, DimAddress lookup(BillToAddressID == AddressID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LkpBillToAddressDescr",
						"LkpBillToAddressDescr select(mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate = SelectColumnWCustDescrip@ModifiedDate,",
						"          ShipToAddressDesscription,",
						"          BillToAddressDesciption = AddressLine1,",
						"          CustomerDescription",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsWBillToDescr",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SalesOrderID as integer,",
						"          OrderDate as timestamp,",
						"          Status as integer,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerDescription as string,",
						"          ShipToAddressDescription as string,",
						"          BillToAddressDesciption as string,",
						"          ShipMethod as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          ModifiedDate as timestamp,",
						"          CreatedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['SalesOrderID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate,",
						"          ShipToAddressDescription = ShipToAddressDesscription,",
						"          CustomerDescription,",
						"          BillToAddressDesciption",
						"     )) ~> targetSalesOrders"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/target_SalesOrderHeader_wDate')]"
			]
		}
	]
}