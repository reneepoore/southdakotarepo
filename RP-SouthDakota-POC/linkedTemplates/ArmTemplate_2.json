{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "RP-SouthDakota-POC"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/tgtDimEmployee')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AdventureWorksDW",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Testing"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "tgtDimEmployee"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Facts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "reportingSalesOrderHeader",
								"type": "DatasetReference"
							},
							"name": "reportingSalesOrderHeader"
						},
						{
							"dataset": {
								"referenceName": "DimAddress",
								"type": "DatasetReference"
							},
							"name": "DimAddress"
						},
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "DimCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "target_SalesOrderHeader_wDate",
								"type": "DatasetReference"
							},
							"name": "targetSalesOrders"
						}
					],
					"transformations": [
						{
							"name": "SelectColumnsWShipToDescription"
						},
						{
							"name": "LkpShipToAddress"
						},
						{
							"name": "Upsert"
						},
						{
							"name": "LkpCustomerDescip"
						},
						{
							"name": "SelectColumnWCustDescrip"
						},
						{
							"name": "LkpBillToAddressDescr"
						},
						{
							"name": "SelectColumnsWBillToDescr"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: true,",
						"     waterMarkColumn: 'ModifiedDate',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> reportingSalesOrderHeader",
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimAddress",
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimCustomer",
						"LkpShipToAddress select(mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate = reportingSalesOrderHeader@ModifiedDate,",
						"          ShipToAddressDesscription = AddressLine1,",
						"          CustomerID,",
						"          BillToAddressID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsWShipToDescription",
						"reportingSalesOrderHeader, DimAddress lookup(ShipToAddressID == AddressID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LkpShipToAddress",
						"SelectColumnsWBillToDescr alterRow(upsertIf(true())) ~> Upsert",
						"SelectColumnsWShipToDescription, DimCustomer lookup(SelectColumnsWShipToDescription@CustomerID == DimCustomer@CustomerID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LkpCustomerDescip",
						"LkpCustomerDescip select(mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate = SelectColumnsWShipToDescription@ModifiedDate,",
						"          ShipToAddressDesscription,",
						"          CustomerDescription = CompanyName,",
						"          ModifiedDate = DimCustomer@ModifiedDate,",
						"          BillToAddressID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnWCustDescrip",
						"SelectColumnWCustDescrip, DimAddress lookup(BillToAddressID == AddressID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LkpBillToAddressDescr",
						"LkpBillToAddressDescr select(mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate = SelectColumnWCustDescrip@ModifiedDate,",
						"          ShipToAddressDesscription,",
						"          BillToAddressDesciption = AddressLine1,",
						"          CustomerDescription",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsWBillToDescr",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SalesOrderID as integer,",
						"          OrderDate as timestamp,",
						"          Status as integer,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerDescription as string,",
						"          ShipToAddressDescription as string,",
						"          BillToAddressDesciption as string,",
						"          ShipMethod as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          ModifiedDate as timestamp,",
						"          CreatedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['SalesOrderID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate,",
						"          ShipToAddressDescription = ShipToAddressDesscription,",
						"          CustomerDescription,",
						"          BillToAddressDesciption",
						"     )) ~> targetSalesOrders"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_CaseHeader_Lookups_POC')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Final df POCs"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CodeTables",
								"type": "DatasetReference"
							},
							"name": "vwCodeTables"
						},
						{
							"dataset": {
								"referenceName": "CaseHeader1",
								"type": "DatasetReference"
							},
							"name": "srcCaseHeader"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dummy1",
								"type": "DatasetReference"
							},
							"name": "DummyFile"
						}
					],
					"transformations": [
						{
							"name": "CaseObjective"
						},
						{
							"name": "CaseStatus"
						},
						{
							"name": "CasePriority"
						},
						{
							"name": "CaseOutcome"
						},
						{
							"name": "CaseCatTypeCode"
						},
						{
							"name": "CaseClassification"
						},
						{
							"name": "CaseTypeCode"
						},
						{
							"name": "SelectCaseColumns"
						},
						{
							"name": "LookupCaseObjective"
						},
						{
							"name": "SelectCaseObjective"
						},
						{
							"name": "LookupStatus"
						},
						{
							"name": "SelectCaseStatus"
						},
						{
							"name": "LookupCasePriority"
						},
						{
							"name": "SelectCasePriority"
						},
						{
							"name": "LookupCaseOutcome"
						},
						{
							"name": "SelectCaseOutcome"
						},
						{
							"name": "LookupTypeCode"
						},
						{
							"name": "SelectCaseCatTypeCode"
						},
						{
							"name": "LookupClassification"
						},
						{
							"name": "SelectClassification"
						},
						{
							"name": "LookupCaseTypeCode"
						},
						{
							"name": "SelectCaseTypeCode"
						},
						{
							"name": "TrimCodeFields"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TABLENAME as string,",
						"          CODE as string,",
						"          DESCRIPTION as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> vwCodeTables",
						"source(output(",
						"          APPEALINDICATOR as string,",
						"          CASEID as long,",
						"          INTEGRATEDCASEID as long,",
						"          CASEREFERENCE as string,",
						"          CASETYPECODE as string,",
						"          CLASSIFICATIONCODE as string,",
						"          EXPECTEDOUTCOME as long,",
						"          ACTUALOUTCOME as string,",
						"          OWNERORGOBJECTLINKID as long,",
						"          VERSIONNO as integer,",
						"          LASTWRITTEN as timestamp,",
						"          INTEGRATEDCASETYPE as string,",
						"          OBJECTIVECODE as string,",
						"          OUTCOMECODE as string,",
						"          PLANID as long,",
						"          PRIORITYCODE as string,",
						"          RECEIVEDDATE as date,",
						"          EFFECTIVEDATE as date,",
						"          STATUSCODE as string,",
						"          ENDDATE as date,",
						"          EXPECTEDENDDATE as date,",
						"          EXPECTEDSTARTDATE as date,",
						"          FIRSTREVIEWDATE as date,",
						"          COMMENTS as string,",
						"          CONCERNROLEID as long,",
						"          REGISTRATIONDATE as date,",
						"          STARTDATE as date,",
						"          DEFAULTCURRENCYTYPECODE as string,",
						"          DEFAULTDELIVERYMETHODTYPE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcCaseHeader",
						"vwCodeTables filter(TABLENAME=='CaseObjective') ~> CaseObjective",
						"vwCodeTables filter(TABLENAME=='CaseStatus') ~> CaseStatus",
						"vwCodeTables filter(TABLENAME=='CasePriority') ~> CasePriority",
						"vwCodeTables filter(TABLENAME=='CaseOutcome') ~> CaseOutcome",
						"vwCodeTables filter(TABLENAME=='CaseCatTypeCode') ~> CaseCatTypeCode",
						"vwCodeTables filter(TABLENAME=='CaseClassification') ~> CaseClassification",
						"vwCodeTables filter(TABLENAME=='CaseTypeCode') ~> CaseTypeCode",
						"TrimCodeFields select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          INTEGRATEDCASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          INTEGRATEDCASETYPE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCaseColumns",
						"SelectCaseColumns, CaseObjective lookup(OBJECTIVECODE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupCaseObjective",
						"LookupCaseObjective select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE,",
						"          INTEGRATEDCASETYPE,",
						"          CaseObj_DESCRIPTION = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCaseObjective",
						"SelectCaseObjective, CaseStatus lookup(STATUSCODE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupStatus",
						"LookupStatus select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE,",
						"          INTEGRATEDCASETYPE,",
						"          CaseObj_DESCRIPTION,",
						"          CaseStatus_DESCRIPTION = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCaseStatus",
						"SelectCaseStatus, CasePriority lookup(PRIORITYCODE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupCasePriority",
						"LookupCasePriority select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE,",
						"          INTEGRATEDCASETYPE,",
						"          CaseObj_DESCRIPTION,",
						"          CaseStatus_DESCRIPTION,",
						"          CasePriority_DESCRIPTION = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCasePriority",
						"SelectCasePriority, CaseOutcome lookup(OUTCOMECODE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupCaseOutcome",
						"LookupCaseOutcome select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE,",
						"          INTEGRATEDCASETYPE,",
						"          CaseObj_DESCRIPTION,",
						"          CaseStatus_DESCRIPTION,",
						"          CasePriority_DESCRIPTION,",
						"          CaseOutcome_DESCRIPTION = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCaseOutcome",
						"SelectCaseOutcome, CaseCatTypeCode lookup(INTEGRATEDCASETYPE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupTypeCode",
						"LookupTypeCode select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE,",
						"          INTEGRATEDCASETYPE,",
						"          CaseObj_DESCRIPTION,",
						"          CaseStatus_DESCRIPTION,",
						"          CasePriority_DESCRIPTION,",
						"          CaseOutcome_DESCRIPTION,",
						"          CaseCatType_DESCRIPTION = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCaseCatTypeCode",
						"SelectCaseCatTypeCode, CaseClassification lookup(CLASSIFICATIONCODE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupClassification",
						"LookupClassification select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE,",
						"          INTEGRATEDCASETYPE,",
						"          CaseObj_DESCRIPTION,",
						"          CaseStatus_DESCRIPTION,",
						"          CasePriority_DESCRIPTION,",
						"          CaseOutcome_DESCRIPTION,",
						"          CaseCatType_DESCRIPTION,",
						"          CaseClass_DESCRIPTION = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectClassification",
						"SelectClassification, CaseTypeCode lookup(CASETYPECODE == CODE,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupCaseTypeCode",
						"LookupCaseTypeCode select(mapColumn(",
						"          APPEALINDICATOR,",
						"          CASEID,",
						"          CASETYPECODE,",
						"          CLASSIFICATIONCODE,",
						"          OBJECTIVECODE,",
						"          OUTCOMECODE,",
						"          PRIORITYCODE,",
						"          STATUSCODE,",
						"          INTEGRATEDCASETYPE,",
						"          CaseObj_DESCRIPTION,",
						"          CaseStatus_DESCRIPTION,",
						"          CasePriority_DESCRIPTION,",
						"          CaseOutcome_DESCRIPTION,",
						"          CaseCatType_DESCRIPTION,",
						"          CaseClass_DESCRIPTION,",
						"          CaseType_DESCRIPTION = DESCRIPTION",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCaseTypeCode",
						"srcCaseHeader derive(OBJECTIVECODE = trim(OBJECTIVECODE),",
						"          CASETYPECODE = trim(CASETYPECODE),",
						"          CLASSIFICATIONCODE = trim(CLASSIFICATIONCODE),",
						"          INTEGRATEDCASETYPE = trim(INTEGRATEDCASETYPE),",
						"          PRIORITYCODE = trim(PRIORITYCODE),",
						"          STATUSCODE = trim(STATUSCODE),",
						"          OUTCOMECODE = trim(OUTCOMECODE)) ~> TrimCodeFields",
						"SelectCaseTypeCode sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:['CaseHeaderPOC'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> DummyFile"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_CodeTableItem')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Staging"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "db2CodeTableItem",
								"type": "DatasetReference"
							},
							"name": "RptDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "stgCodeTableItem",
								"type": "DatasetReference"
							},
							"name": "StgDB"
						}
					],
					"transformations": [
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"parameters{",
						"     TableName as string ('CODETABLEITEM'),",
						"     SchemaName as string ('CURAPD01'),",
						"     UniqueID as string ('na')",
						"}",
						"source(output(",
						"          TABLENAME as string,",
						"          CODE as string,",
						"          DESCRIPTION as string,",
						"          ANNOTATION as string,",
						"          ISENABLED as string,",
						"          SORTORDER as integer,",
						"          LOCALEIDENTIFIER as string,",
						"          PARENTCODE as string,",
						"          COMMENTS as string,",
						"          VERSIONNO as integer,",
						"          LASTWRITTEN as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     waterMarkColumn: 'LastWritten',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     mode: 'read') ~> RptDB",
						"RptDB alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['TABLENAME','CODE','LOCALEIDENTIFIER'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> StgDB"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DimPlaceHolder')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Dimensions"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "reportingSalesOrderHeader",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dummy",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DynamicSelect')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Staging"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "db2DynamicSource",
								"type": "DatasetReference"
							},
							"name": "RptDBTEST"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "stgDynamicTarget",
								"type": "DatasetReference"
							},
							"name": "StgDBTEST"
						}
					],
					"transformations": [
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ptblTableName as string,",
						"     ptblLastWritten as string,",
						"     ptblPrimaryKeyColumn as string,",
						"     ptblSchema as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     waterMarkColumn: 'LastWritten',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"SELECT * FROM CURAPD01.\"+$ptblTableName+\" where Lastwritten>='\"+$ptblLastWritten+\"'\"                    ),",
						"     format: 'query',",
						"     mode: 'read') ~> RptDBTEST",
						"RptDBTEST alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:[($ptblPrimaryKeyColumn)],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> StgDBTEST"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_FactSalesOrderHeader')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Dimensions"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "reportingSalesOrderHeader",
								"type": "DatasetReference"
							},
							"name": "reportingSalesOrderHeader"
						},
						{
							"dataset": {
								"referenceName": "DimAddress",
								"type": "DatasetReference"
							},
							"name": "DimAddress"
						},
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "DimCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "targetSalesOrderHeader",
								"type": "DatasetReference"
							},
							"name": "targetSalesOrderHeader"
						}
					],
					"transformations": [
						{
							"name": "LkpShipToAddress",
							"description": "Add second stream to the Lookup from settings. Lookup ShipTo Address"
						},
						{
							"name": "LkpBillToAddress",
							"description": "Add second stream to the Lookup from settings. Lookup BillTo Address"
						},
						{
							"name": "SelectColumnsWShipToDescription"
						},
						{
							"name": "SelectColumnsWBillToAddress"
						},
						{
							"name": "LkpCustomerDescription",
							"description": "Add second stream to the Lookup from settings. Lookup Customer Description"
						},
						{
							"name": "SelectColumnsWCustomerDescription"
						},
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     waterMarkColumn: 'ModifiedDate',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     mode: 'read') ~> reportingSalesOrderHeader",
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimAddress",
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimCustomer",
						"reportingSalesOrderHeader, DimAddress lookup(ShipToAddressID == AddressID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LkpShipToAddress",
						"SelectColumnsWShipToDescription, DimAddress lookup(BillToAddressID == AddressID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LkpBillToAddress",
						"LkpShipToAddress select(mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          CustomerID,",
						"          ShipToAddressID,",
						"          BillToAddressID,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          Comment,",
						"          rowguid = reportingSalesOrderHeader@rowguid,",
						"          ModifiedDate = reportingSalesOrderHeader@ModifiedDate,",
						"          ShipToAddressLine1 = AddressLine1",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsWShipToDescription",
						"LkpBillToAddress select(mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          CustomerID,",
						"          ShipToAddressID,",
						"          BillToAddressID,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate = SelectColumnsWShipToDescription@ModifiedDate,",
						"          ShipToAddressLine1,",
						"          BillToAddressLine1 = AddressLine1",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsWBillToAddress",
						"SelectColumnsWBillToAddress, DimCustomer lookup(SelectColumnsWBillToAddress@CustomerID == DimCustomer@CustomerID,",
						"     multiple: false,",
						"     pickup: 'first',",
						"     asc(DimCustomer@CustomerID, true),",
						"     broadcast: 'auto')~> LkpCustomerDescription",
						"LkpCustomerDescription select(mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate = SelectColumnsWBillToAddress@ModifiedDate,",
						"          ShipToAddressDescription = ShipToAddressLine1,",
						"          BillToAddressDesciption = BillToAddressLine1,",
						"          CustomerDescription = CompanyName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsWCustomerDescription",
						"SelectColumnsWCustomerDescription alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          SalesOrderID as integer,",
						"          OrderDate as timestamp,",
						"          Status as integer,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerDescription as string,",
						"          ShipToAddressDescription as string,",
						"          BillToAddressDesciption as string,",
						"          ShipMethod as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['SalesOrderID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          CustomerDescription,",
						"          ShipToAddressDescription,",
						"          BillToAddressDesciption,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate",
						"     )) ~> targetSalesOrderHeader"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_FactSalesOrderHeader_wo_CDC')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Dimensions"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "reportingSalesOrderHeader",
								"type": "DatasetReference"
							},
							"name": "reportingSalesOrderHeader"
						},
						{
							"dataset": {
								"referenceName": "DimAddress",
								"type": "DatasetReference"
							},
							"name": "DimAddress"
						},
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "DimCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "targetSalesOrderHeader",
								"type": "DatasetReference"
							},
							"name": "targetSalesOrderHeader"
						}
					],
					"transformations": [
						{
							"name": "LkpShipToAddress",
							"description": "Add second stream to the Lookup from settings. Lookup ShipTo Address"
						},
						{
							"name": "LkpBillToAddress",
							"description": "Add second stream to the Lookup from settings. Lookup BillTo Address"
						},
						{
							"name": "SelectColumnsWShipToDescription"
						},
						{
							"name": "SelectColumnsWBillToAddress"
						},
						{
							"name": "LkpCustomerDescription",
							"description": "Add second stream to the Lookup from settings. Lookup Customer Description"
						},
						{
							"name": "SelectColumnsWCustomerDescription"
						},
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     waterMarkColumn: 'ModifiedDate',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     mode: 'read') ~> reportingSalesOrderHeader",
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimAddress",
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimCustomer",
						"reportingSalesOrderHeader, DimAddress lookup(ShipToAddressID == AddressID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LkpShipToAddress",
						"SelectColumnsWShipToDescription, DimAddress lookup(BillToAddressID == AddressID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LkpBillToAddress",
						"LkpShipToAddress select(mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          CustomerID,",
						"          ShipToAddressID,",
						"          BillToAddressID,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          Comment,",
						"          rowguid = reportingSalesOrderHeader@rowguid,",
						"          ModifiedDate = reportingSalesOrderHeader@ModifiedDate,",
						"          ShipToAddressLine1 = AddressLine1",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsWShipToDescription",
						"LkpBillToAddress select(mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          CustomerID,",
						"          ShipToAddressID,",
						"          BillToAddressID,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate = SelectColumnsWShipToDescription@ModifiedDate,",
						"          ShipToAddressLine1,",
						"          BillToAddressLine1 = AddressLine1",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsWBillToAddress",
						"SelectColumnsWBillToAddress, DimCustomer lookup(SelectColumnsWBillToAddress@CustomerID == DimCustomer@CustomerID,",
						"     multiple: false,",
						"     pickup: 'first',",
						"     asc(DimCustomer@CustomerID, true),",
						"     broadcast: 'auto')~> LkpCustomerDescription",
						"LkpCustomerDescription select(mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate = SelectColumnsWBillToAddress@ModifiedDate,",
						"          ShipToAddressDescription = ShipToAddressLine1,",
						"          BillToAddressDesciption = BillToAddressLine1,",
						"          CustomerDescription = CompanyName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsWCustomerDescription",
						"SelectColumnsWCustomerDescription alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          SalesOrderID as integer,",
						"          OrderDate as timestamp,",
						"          Status as integer,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerDescription as string,",
						"          ShipToAddressDescription as string,",
						"          BillToAddressDesciption as string,",
						"          ShipMethod as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['SalesOrderID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          CustomerDescription,",
						"          ShipToAddressDescription,",
						"          BillToAddressDesciption,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate",
						"     )) ~> targetSalesOrderHeader"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Fixed_Width_Test')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DimCustomerAWDW",
								"type": "DatasetReference"
							},
							"name": "srcDimCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmailFile",
								"type": "DatasetReference"
							},
							"name": "tgtEmailFile"
						},
						{
							"dataset": {
								"referenceName": "SFTPFixedWidthFile",
								"type": "DatasetReference"
							},
							"name": "tgtSFTPServer"
						}
					],
					"transformations": [
						{
							"name": "SelectColumns"
						},
						{
							"name": "ConcatFields"
						},
						{
							"name": "SelectConcatString"
						},
						{
							"name": "IffNullTrim"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerKey as integer,",
						"          GeographyKey as integer,",
						"          CustomerAlternateKey as string,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          NameStyle as boolean,",
						"          BirthDate as date,",
						"          MaritalStatus as string,",
						"          Suffix as string,",
						"          Gender as string,",
						"          EmailAddress as string,",
						"          YearlyIncome as decimal(19,4),",
						"          TotalChildren as integer,",
						"          NumberChildrenAtHome as integer,",
						"          EnglishEducation as string,",
						"          SpanishEducation as string,",
						"          FrenchEducation as string,",
						"          EnglishOccupation as string,",
						"          SpanishOccupation as string,",
						"          FrenchOccupation as string,",
						"          HouseOwnerFlag as string,",
						"          NumberCarsOwned as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          Phone as string,",
						"          DateFirstPurchase as date,",
						"          CommuteDistance as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcDimCustomer",
						"srcDimCustomer select(mapColumn(",
						"          CustomerAlternateKey,",
						"          Title,",
						"          FirstName,",
						"          MiddleName,",
						"          LastName,",
						"          BirthDate,",
						"          MaritalStatus,",
						"          Suffix,",
						"          Gender,",
						"          TotalChildren,",
						"          EnglishEducation,",
						"          EnglishOccupation,",
						"          HouseOwnerFlag,",
						"          AddressLine1,",
						"          Phone",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"IffNullTrim derive(drvConcatAll = concat(rpad(FirstName,15,' '),rpad(MiddleName, 1, ' '),rpad(LastName, 20, ' '),rpad(AddressLine1, 45, ' '),rpad(EnglishEducation, 10, ' '))) ~> ConcatFields",
						"ConcatFields select(mapColumn(",
						"          ConcatAll = drvConcatAll",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectConcatString",
						"SelectColumns derive(FirstName = iifNull(trim(FirstName) ,'' ),",
						"          LastName = iifNull(trim(LastName) ,'' ),",
						"          MiddleName = iifNull(trim(MiddleName) ,'' ),",
						"          AddressLine1 = iifNull(trim(AddressLine1) ,'' ),",
						"          EnglishEducation = iifNull(trim(EnglishEducation) ,'' )) ~> IffNullTrim",
						"SelectConcatString sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmailFile'],",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> tgtEmailFile",
						"SelectConcatString sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:['FixedWidth.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> tgtSFTPServer"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Fixed_Width_Test_No_SMTP')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DimCustomerAWDW",
								"type": "DatasetReference"
							},
							"name": "srcDimCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dummy",
								"type": "DatasetReference"
							},
							"name": "tgtDummyOutput"
						},
						{
							"dataset": {
								"referenceName": "EmailFile",
								"type": "DatasetReference"
							},
							"name": "tgtEmailFile"
						}
					],
					"transformations": [
						{
							"name": "SelectColumns"
						},
						{
							"name": "ConcatFields"
						},
						{
							"name": "SelectConcatString"
						},
						{
							"name": "IffNullTrim"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerKey as integer,",
						"          GeographyKey as integer,",
						"          CustomerAlternateKey as string,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          NameStyle as boolean,",
						"          BirthDate as date,",
						"          MaritalStatus as string,",
						"          Suffix as string,",
						"          Gender as string,",
						"          EmailAddress as string,",
						"          YearlyIncome as decimal(19,4),",
						"          TotalChildren as integer,",
						"          NumberChildrenAtHome as integer,",
						"          EnglishEducation as string,",
						"          SpanishEducation as string,",
						"          FrenchEducation as string,",
						"          EnglishOccupation as string,",
						"          SpanishOccupation as string,",
						"          FrenchOccupation as string,",
						"          HouseOwnerFlag as string,",
						"          NumberCarsOwned as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          Phone as string,",
						"          DateFirstPurchase as date,",
						"          CommuteDistance as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> srcDimCustomer",
						"srcDimCustomer select(mapColumn(",
						"          CustomerAlternateKey,",
						"          Title,",
						"          FirstName,",
						"          MiddleName,",
						"          LastName,",
						"          BirthDate,",
						"          MaritalStatus,",
						"          Suffix,",
						"          Gender,",
						"          TotalChildren,",
						"          EnglishEducation,",
						"          EnglishOccupation,",
						"          HouseOwnerFlag,",
						"          AddressLine1,",
						"          Phone",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"IffNullTrim derive(drvConcatAll = concat(rpad(FirstName,15,' '),rpad(MiddleName, 1, ' '),rpad(LastName, 20, ' '),rpad(AddressLine1, 45, ' '),rpad(EnglishEducation, 10, ' '))) ~> ConcatFields",
						"ConcatFields select(mapColumn(",
						"          ConcatAll = drvConcatAll",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectConcatString",
						"SelectColumns derive(FirstName = iifNull(trim(FirstName) ,'' ),",
						"          LastName = iifNull(trim(LastName) ,'' ),",
						"          MiddleName = iifNull(trim(MiddleName) ,'' ),",
						"          AddressLine1 = iifNull(trim(AddressLine1) ,'' ),",
						"          EnglishEducation = iifNull(trim(EnglishEducation) ,'' )) ~> IffNullTrim",
						"SelectConcatString sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     partitionFileNames:['FixedWidthTest.txt'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> tgtDummyOutput",
						"SelectConcatString sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmailFile'],",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> tgtEmailFile"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_RptToStage')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Staging"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "db2DynamicSource",
								"type": "DatasetReference"
							},
							"name": "RptDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "stgDynamicTarget",
								"type": "DatasetReference"
							},
							"name": "StgDB"
						}
					],
					"transformations": [
						{
							"name": "Upsert"
						}
					],
					"scriptLines": [
						"parameters{",
						"     TableName as string,",
						"     SchemaName as string,",
						"     UniqueID as string",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     waterMarkColumn: 'LastWritten',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     mode: 'read') ~> RptDB",
						"RptDB alterRow(upsertIf(true())) ~> Upsert",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:[($UniqueID)],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> StgDB"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_SCD1_Example')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Facts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "reportingSalesOrderHeader",
								"type": "DatasetReference"
							},
							"name": "reportingSalesOrderHeader"
						},
						{
							"dataset": {
								"referenceName": "DimAddress",
								"type": "DatasetReference"
							},
							"name": "DimAddress"
						},
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "DimCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "target_SalesOrderHeader_wDate",
								"type": "DatasetReference"
							},
							"name": "targetSalesOrders"
						}
					],
					"transformations": [
						{
							"name": "SelectColumnsWShipToDescription"
						},
						{
							"name": "LkpShipToAddress"
						},
						{
							"name": "Upsert"
						},
						{
							"name": "LkpCustomerDescip"
						},
						{
							"name": "SelectColumnWCustDescrip"
						},
						{
							"name": "LkpBillToAddressDescr"
						},
						{
							"name": "SelectColumnsWBillToDescr"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     waterMarkColumn: 'ModifiedDate',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     mode: 'read') ~> reportingSalesOrderHeader",
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimAddress",
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimCustomer",
						"LkpShipToAddress select(mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate = reportingSalesOrderHeader@ModifiedDate,",
						"          ShipToAddressDesscription = AddressLine1,",
						"          CustomerID,",
						"          BillToAddressID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsWShipToDescription",
						"reportingSalesOrderHeader, DimAddress lookup(ShipToAddressID == AddressID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LkpShipToAddress",
						"SelectColumnsWBillToDescr alterRow(upsertIf(true())) ~> Upsert",
						"SelectColumnsWShipToDescription, DimCustomer lookup(SelectColumnsWShipToDescription@CustomerID == DimCustomer@CustomerID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LkpCustomerDescip",
						"LkpCustomerDescip select(mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate = SelectColumnsWShipToDescription@ModifiedDate,",
						"          ShipToAddressDesscription,",
						"          CustomerDescription = CompanyName,",
						"          ModifiedDate = DimCustomer@ModifiedDate,",
						"          BillToAddressID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnWCustDescrip",
						"SelectColumnWCustDescrip, DimAddress lookup(BillToAddressID == AddressID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LkpBillToAddressDescr",
						"LkpBillToAddressDescr select(mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate = SelectColumnWCustDescrip@ModifiedDate,",
						"          ShipToAddressDesscription,",
						"          BillToAddressDesciption = AddressLine1,",
						"          CustomerDescription",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsWBillToDescr",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SalesOrderID as integer,",
						"          OrderDate as timestamp,",
						"          Status as integer,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerDescription as string,",
						"          ShipToAddressDescription as string,",
						"          BillToAddressDesciption as string,",
						"          ShipMethod as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          ModifiedDate as timestamp,",
						"          CreatedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['SalesOrderID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate,",
						"          ShipToAddressDescription = ShipToAddressDesscription,",
						"          CustomerDescription,",
						"          BillToAddressDesciption",
						"     )) ~> targetSalesOrders"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_SCD1_Example_NoCDC')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Facts"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "reportingSalesOrderHeader",
								"type": "DatasetReference"
							},
							"name": "reportingSalesOrderHeader"
						},
						{
							"dataset": {
								"referenceName": "DimAddress",
								"type": "DatasetReference"
							},
							"name": "DimAddress"
						},
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "DimCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "target_SalesOrderHeader_wDate",
								"type": "DatasetReference"
							},
							"name": "targetSalesOrders"
						}
					],
					"transformations": [
						{
							"name": "SelectColumnsWShipToDescription"
						},
						{
							"name": "LkpShipToAddress"
						},
						{
							"name": "Upsert"
						},
						{
							"name": "LkpCustomerDescip"
						},
						{
							"name": "SelectColumnWCustDescrip"
						},
						{
							"name": "LkpBillToAddressDescr"
						},
						{
							"name": "SelectColumnsWBillToDescr"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     waterMarkColumn: 'ModifiedDate',",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     mode: 'read') ~> reportingSalesOrderHeader",
						"source(output(",
						"          AddressID as integer,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          City as string,",
						"          StateProvince as string,",
						"          CountryRegion as string,",
						"          PostalCode as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimAddress",
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimCustomer",
						"LkpShipToAddress select(mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate = reportingSalesOrderHeader@ModifiedDate,",
						"          ShipToAddressDesscription = AddressLine1,",
						"          CustomerID,",
						"          BillToAddressID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsWShipToDescription",
						"reportingSalesOrderHeader, DimAddress lookup(ShipToAddressID == AddressID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LkpShipToAddress",
						"SelectColumnsWBillToDescr alterRow(upsertIf(true())) ~> Upsert",
						"SelectColumnsWShipToDescription, DimCustomer lookup(SelectColumnsWShipToDescription@CustomerID == DimCustomer@CustomerID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LkpCustomerDescip",
						"LkpCustomerDescip select(mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate = SelectColumnsWShipToDescription@ModifiedDate,",
						"          ShipToAddressDesscription,",
						"          CustomerDescription = CompanyName,",
						"          ModifiedDate = DimCustomer@ModifiedDate,",
						"          BillToAddressID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnWCustDescrip",
						"SelectColumnWCustDescrip, DimAddress lookup(BillToAddressID == AddressID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LkpBillToAddressDescr",
						"LkpBillToAddressDescr select(mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate = SelectColumnWCustDescrip@ModifiedDate,",
						"          ShipToAddressDesscription,",
						"          BillToAddressDesciption = AddressLine1,",
						"          CustomerDescription",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsWBillToDescr",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SalesOrderID as integer,",
						"          OrderDate as timestamp,",
						"          Status as integer,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerDescription as string,",
						"          ShipToAddressDescription as string,",
						"          BillToAddressDesciption as string,",
						"          ShipMethod as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          ModifiedDate as timestamp,",
						"          CreatedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['SalesOrderID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          SalesOrderID,",
						"          OrderDate,",
						"          Status,",
						"          SalesOrderNumber,",
						"          PurchaseOrderNumber,",
						"          AccountNumber,",
						"          ShipMethod,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue,",
						"          ModifiedDate,",
						"          ShipToAddressDescription = ShipToAddressDesscription,",
						"          CustomerDescription,",
						"          BillToAddressDesciption",
						"     )) ~> targetSalesOrders"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_SCD2_Example')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Dimensions"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "TestDataForEmployee",
								"type": "DatasetReference"
							},
							"name": "srcEmployee"
						},
						{
							"dataset": {
								"referenceName": "TestDataForEmployeeDim",
								"type": "DatasetReference"
							},
							"name": "srcEmployeeDim"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TestDataForEmployeeDim",
								"type": "DatasetReference"
							},
							"name": "SinkEmployeeDimInsert"
						},
						{
							"dataset": {
								"referenceName": "TestDataForEmployeeDim",
								"type": "DatasetReference"
							},
							"name": "SinkEmployeeDimUpdate"
						}
					],
					"transformations": [
						{
							"name": "HASHInput"
						},
						{
							"name": "HASHRef"
						},
						{
							"name": "SetToActive"
						},
						{
							"name": "ExistsCheckforUpdates"
						},
						{
							"name": "ExistsCheckforObsolete"
						},
						{
							"name": "SetToInActive"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "FilterForTesting"
						}
					],
					"script": "source(output(\n\t\tEmpID as short,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tMiddleName as string,\n\t\tTitle as string,\n\t\tHireDate as date,\n\t\tBirthDate as date,\n\t\tPhone as string,\n\t\tMaritalStatus as string,\n\t\tEmergencyContactName as string,\n\t\tEmergencyContactPhone as string,\n\t\tSalariedFlag as boolean,\n\t\tGender as string,\n\t\tDepartmentName as string,\n\t\tStartDate as date,\n\t\tEndDate as string,\n\t\tStatus as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\twildcardPaths:['2021/*.csv']) ~> srcEmployee\nsource(output(\n\t\tEmployeeKey as integer,\n\t\tEmpID as short,\n\t\tFirstName as string,\n\t\tLastName as string,\n\t\tMiddleName as string,\n\t\tTitle as string,\n\t\tHireDate as date,\n\t\tBirthDate as date,\n\t\tPhone as string,\n\t\tMaritalStatus as string,\n\t\tEmergencyContactName as string,\n\t\tEmergencyContactPhone as string,\n\t\tSalariedFlag as boolean,\n\t\tGender as string,\n\t\tDepartmentName as string,\n\t\tStartDate as date,\n\t\tEndDate as string,\n\t\tStatus as string,\n\t\tIsActive as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> srcEmployeeDim\nSelectColumns derive(inputhash = md5(EmpID,LastName,Title,Phone,MaritalStatus,SalariedFlag,DepartmentName)) ~> HASHInput\nsrcEmployeeDim derive(sqlhash = md5(EmpID,LastName,Title,Phone,MaritalStatus,SalariedFlag,DepartmentName)) ~> HASHRef\nExistsCheckforUpdates derive(IsActive = 1,\n\t\tEndDate = toDate('9999-12-31')) ~> SetToActive\nHASHInput, HASHRef exists(inputhash == sqlhash,\n\tnegate:true,\n\tbroadcast: 'auto')~> ExistsCheckforUpdates\nHASHRef, SetToActive exists(srcEmployeeDim@EmpID == SelectColumns@EmpID,\n\tnegate:false,\n\tbroadcast: 'auto')~> ExistsCheckforObsolete\nExistsCheckforObsolete derive(EndDate = toDate(currentUTC()),\n\t\tIsActive = 0,\n\t\tStatus = 'Termed') ~> SetToInActive\nSetToInActive alterRow(updateIf(true())) ~> AlterRow1\nFilterForTesting select(mapColumn(\n\t\tEmpID,\n\t\tFirstName,\n\t\tLastName,\n\t\tMiddleName,\n\t\tTitle,\n\t\tHireDate,\n\t\tBirthDate,\n\t\tPhone,\n\t\tMaritalStatus,\n\t\tEmergencyContactName,\n\t\tEmergencyContactPhone,\n\t\tSalariedFlag,\n\t\tGender,\n\t\tDepartmentName,\n\t\tStartDate,\n\t\tEndDate,\n\t\tStatus\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumns\nsrcEmployee filter(EmpID ==1002) ~> FilterForTesting\nSetToActive sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEmpID,\n\t\tFirstName,\n\t\tLastName,\n\t\tMiddleName,\n\t\tTitle,\n\t\tHireDate,\n\t\tBirthDate,\n\t\tPhone,\n\t\tMaritalStatus,\n\t\tEmergencyContactName,\n\t\tEmergencyContactPhone,\n\t\tSalariedFlag,\n\t\tGender,\n\t\tDepartmentName,\n\t\tStartDate,\n\t\tEndDate,\n\t\tStatus,\n\t\tIsActive\n\t)) ~> SinkEmployeeDimInsert\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['EmployeeKey'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tEmployeeKey,\n\t\tEmpID,\n\t\tFirstName,\n\t\tLastName,\n\t\tMiddleName,\n\t\tTitle,\n\t\tHireDate,\n\t\tBirthDate,\n\t\tPhone,\n\t\tMaritalStatus,\n\t\tEmergencyContactName,\n\t\tEmergencyContactPhone,\n\t\tSalariedFlag,\n\t\tGender,\n\t\tDepartmentName,\n\t\tStartDate,\n\t\tEndDate,\n\t\tStatus,\n\t\tIsActive\n\t)) ~> SinkEmployeeDimUpdate"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_StagePlaceHolder')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Staging"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "reportingSalesOrderHeader",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dummy",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Column_1 as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_CaseHeader_Code_Research_POC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_CaseHeader_Lookups_POC",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_CaseHeader_Lookups_POC",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"vwCodeTables": {},
									"srcCaseHeader": {},
									"DummyFile": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Final POCs"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_CaseHeader_Lookups_POC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_DynamicDataFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LkupTableNames",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:15:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "/*\n********************************************************************************************************\nThe first sql select will get the table names.\nthe second sql will get the max ordinal. This is to check if there are multiple columns that make up\na unique row. In the case of CODETABLEITEM there are 3. I only want to process on row. If there is\none row the column is use in as the Key Identifier in the data flow.\nIf the Ordinal Position is greater than 1 it is the CODETABLEITEM. Then that data is processed \ndifferently in the data flow via Conditional split.\nThe third sql gets the columns used in the Primary Key\n\nCode by: Renee Poore\n  \n\n*******************************************************************************************************\n*/\n\nSELECT tblinfo.TABLE_NAME,\n       tblinfo.TABLE_SCHEMA,\n       ISNULL(tblid.COLUMN_NAME, 'NA') UNIQUE_ID,\n       mop.ORDINAL_POSITION \nFROM   (SELECT TABLE_NAME,\n               TABLE_SCHEMA\n        FROM   INFORMATION_SCHEMA.TABLES\n        WHERE\n         TABLE_TYPE = 'BASE TABLE'\n         AND TABLE_SCHEMA = 'CURAPD01') tblinfo\n       LEFT OUTER JOIN (SELECT TABLE_NAME,\n                               MAX(ORDINAL_POSITION) AS ORDINAL_POSITION\n                        FROM   INFORMATION_SCHEMA.KEY_COLUMN_USAGE\n                        WHERE\n                         OBJECTPROPERTY(OBJECT_ID(CONSTRAINT_SCHEMA + '.'\n                                                  + QUOTENAME(CONSTRAINT_NAME)), 'IsPrimaryKey') = 1\n                        GROUP  BY TABLE_NAME) mop\n                    ON tblinfo.TABLE_NAME = mop.TABLE_NAME\n\n       INNER JOIN (SELECT DISTINCT TABLE_NAME,\n                                   COLUMN_NAME,\n                                   ORDINAL_POSITION\n                   FROM   INFORMATION_SCHEMA.KEY_COLUMN_USAGE\n                   WHERE\n                    OBJECTPROPERTY(OBJECT_ID(CONSTRAINT_SCHEMA + '.'\n                                             + QUOTENAME(CONSTRAINT_NAME)), 'IsPrimaryKey') = 1) tblid\n               ON mop.TABLE_NAME = tblid.TABLE_NAME\n                  AND mop.ORDINAL_POSITION = tblid.ORDINAL_POSITION \n\n\n\t\t\t\tWHERE MOP.ORDINAL_POSITION = 1",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LookupDynamicAllTables",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "GetEachTableName",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LkupTableNames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LkupTableNames').output.value\n\n",
								"type": "Expression"
							},
							"batchCount": 4,
							"activities": [
								{
									"name": "df_RptToStage",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:03:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "df_RptToStage",
											"type": "DataFlowReference",
											"parameters": {
												"TableName": {
													"value": "'@{item().table_name}'",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "'@{item().table_schema}'",
													"type": "Expression"
												},
												"UniqueID": {
													"value": "'@{item().unique_id}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"RptDB": {
													"Schema": {
														"value": "@item().table_schema",
														"type": "Expression"
													},
													"TableName": {
														"value": "@item().table_name",
														"type": "Expression"
													}
												},
												"StgDB": {
													"Schema": "STG",
													"TableName": {
														"value": "@item().table_name",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "df_CodeTableItem",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:15:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_CodeTableItem",
								"type": "DataFlowReference",
								"parameters": {
									"TableName": "'CODETABLEITEM'",
									"SchemaName": "'CURAPD01'",
									"UniqueID": "'na'"
								},
								"datasetParameters": {
									"RptDB": {},
									"StgDB": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Staging"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_CodeTableItem')]",
				"[concat(variables('factoryId'), '/dataflows/df_RptToStage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_ManualTableReload')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LkupTableNames",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:15:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "blbDynamicTableReload",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "GetEachTableName",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FilterRowsWithY",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FilterRowsWithY').output.value",
								"type": "Expression"
							},
							"batchCount": 4,
							"activities": [
								{
									"name": "df_DynamicSelect",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "df_DynamicSelect",
											"type": "DataFlowReference",
											"parameters": {
												"ptblTableName": {
													"value": "'@{item().Table}'",
													"type": "Expression"
												},
												"ptblLastWritten": {
													"value": "'@{item().DateTime}'",
													"type": "Expression"
												},
												"ptblPrimaryKeyColumn": {
													"value": "'@{item().PrimaryKeyColumn}'",
													"type": "Expression"
												},
												"ptblSchema": {
													"value": "'@{item().SourceSchema}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"RptDBTEST": {
													"Schema": {
														"value": "@item().SourceSchema",
														"type": "Expression"
													},
													"TableName": {
														"value": "@item().Table",
														"type": "Expression"
													}
												},
												"StgDBTEST": {
													"Schema": "STG",
													"TableName": {
														"value": "@item().Table",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					},
					{
						"name": "FilterRowsWithY",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "LkupTableNames",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LkupTableNames').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@startswith(item().Process,'Y')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Staging"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_DynamicSelect')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_MasterDimension')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_StagePlaceHolder",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_StagePlaceHolder",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_StagePlaceHolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_MasterFact')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is the Main pipeline that will execute all pipelines.",
				"activities": [
					{
						"name": "df_StagePlaceHolder",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_StagePlaceHolder",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"failure": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Facts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_StagePlaceHolder')]"
			]
		}
	]
}